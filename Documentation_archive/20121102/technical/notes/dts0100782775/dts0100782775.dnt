========================================================================

File:      $RCSfile: dts0100782775.dnt,v $
Version:   $Revision: 1991 $
Modified:  $Date: 2012-11-02 14:29:43 -0700 (Fri, 02 Nov 2012) $

(c) Copyright 2007-2011 by Mentor Graphics Corp. All rights reserved.

========================================================================
This document contains information proprietary and confidential to
Mentor Graphics Corp., and is not for external distribution.
========================================================================

BridgePoint Project Design Note
BridgePoint does not support multiple versions of model compiler

1. Abstract
-----------
This is raised to provide a mechanism that allows customers to use multiple 
model compilers in a BridgePoint model without the manual intervention 
that is currently required in the current version to support such an 
environment.

2. History
----------

3. Document References
----------------------
[1] ClearQuest DEI dts0100782775
[2] dts0100782775.ant
    The analysis note for this issue.
[3] ClearQuest dts0100809568
    Allow the CDT-based BridgePoint new project wizard to be extensible
[4] ClearQuest DEI dts0100843233
    Update the pre-builder to work with inter-project references
[5] ClearQuest DEI dts0100845396
    Remove references to 3020 from the Model Compilers generated by 
    bp.mc.template
[6] <cvs>Documentation/internal/process/Procedures/
         HOWTO-create-a-new-ModelCompiler-Plugin.tnt
    This describes how to use the new bp.mc.template Eclipse plugin creation 
    template to create a new BridgePoint Model Compiler plugin (or regenerate
    existing plugins for maintenance).
[7] http://www.ibm.com/developerworks/library/os-eclipse-pde/
    Building templates with the Eclipse Plug-in Development Environment
[8] http://www.ibm.com/developerworks/opensource/library/os-eclipse-plugin-templates/
    Create your own Eclipse plug-in template

4. Background
-------------
With the approach selected in the analysis note there shall be a separate MC
plugin for each supported model compiler.  This allows the current approach used 
by MC3020 for utilizing a source MC to continue to be used.  That approach is
simply this: Under the installed MC plugin the user will find a folder named 
"mc3020". The source MC shall be placed in a folder named "arc" under that 
"mc3020" folder.  While it is a bit unusual that a folder named "mc3020" will 
exist in every supported MC plugin, this approach is taken because:
1) This approach allows these new MCs to be introduced with no change to either 
   xtumlmc_build or the source archetypes which simplifies this task.
2) This approach allows the current MC3020 plugin to continue to be used in
   existing projects in the field in parallel with the new MC plugins 
   including the new MC plugin that supports our C model compiler.

A separate issue [5] is raised to revisit this and replace the "mc3020" 
folder with a more appropriate name.  When this is done we must also 
consider introducing project update functionality to migrate the mc3020
projects to the new C model compiler plugin.  Alternatively, we could introduce
support for multiple names.  However, this discussion is left for [5].

5. Analysis
-----------
see [2]

6. Design
---------
This section shall first describe the steps to refactor MC3020 to create a 
reusable framework that allows us to create new MC plugins.  It will then 
describe in more detail what the resulting framework looks like.
6.1 Refactor the MC3020 plugin to create a new reusable set of classes that 
    contain all the functionality required by MC3020 but that are packaged in 
    a way that allows us to quickly and easily generate new "light-weight" model 
    compiler plugins.
6.1.1    
    Create a new MC plugin that shall be used to clearly refactor MC3020 into 
    a generic MC plugin.  This plugin will be used as a base to generate 
    MC plugins from.  This new plugin (which shall be thrown away when done)
    shall be named:
    com.mentor.bp.mc.c
6.1.2 com.mentor.bp.mc.c shall start as a copy of MC3020 to assure no 
    functionality is lost.
6.1.2.1 Using this new plugin for the refactoring assures that no changes 
    will be made to MC3020.  This allows us to continue to use mc3020 both 
    internally and in the field with no chance that we have introduced errors.
6.1.2.2 Test this new plugin to assure it is working    
6.1.3 Create a new plugin that shall hold the majority of the refactored Model    
    Compiler plugin functionality.  This new plugin shall be named:
    com.mentor.nucleus.bp.mc
6.1.3.1 This plugin shall contain abstract java classes (meaning they must be 
    extended by the actual MC plugin classes), or classes that define constants
    and/or static operations that may be used by any MC.
6.1.3.2 As MC3020 is refactored, functionality shall be moved out of the 
    bp.mc.c plugin and into the bp.mc plugin.  It shall be reworked in a 
    manner that allows the functionality to be reused by any MC.
6.1.4 This refactoring shall be done iteratively.  As changes are made the 
    bp.mc.c plugin is re-tested to assure it is still properly working.   
6.1.5 Continue the refactoring until the bp.mc.c and bp.mc plugins contain a 
    clean, simple, reusable set of classes.  Of course this step is objective,
    but team input shall be obtained to assure there is agreement that this
    stage has been reached.
6.1.6 Create a new Eclipse plugin template that shall be used to generate new 
    model compilers.  This plugin shall be named:
    com.mentor.bp.mc.template.
6.1.6.1 This plugin shall extend the org.eclipse.pde.ui.templates extension 
    point to provide a BridgePoint Model Compiler template.
6.1.6.2 This new template shall be used to generate all the new Model Compilers.
6.1.6.3 The bp.mc.c plugin created in step 6.1 above shall be used as guide for 
    creating the template java files used to generate the model compilers.
6.1.6.4 The following references shall be used to help create this new
    Eclipse plugin template [7] [8].
6.1.7 Five new Model Compilers shall be generated using the new Model Compiler
    plugin creation template.  They are:
    com.mentor.nucleus.bp.mc.c.binary
    com.mentor.nucleus.bp.mc.c.source
    com.mentor.nucleus.bp.mc.cpp.source
    com.mentor.nucleus.bp.mc.vhdl.source
    com.mentor.nucleus.bp.mc.systemc.source
6.1.8 Once the new plugins are generated, the bp.mc.c plugin is no longer
    of any use.  It shall be branched (R3_4_5-RWM-dts0100782775-2) but removed 
    from head.  Note that since it is actually not possible to completely remove
    a plugin from head, all files in this plugin shall be removed, and a 
    readme.txt left behind explaining why the 'empty' plugin exists.

6.2 Structure of the 'new' refactored Model Compiler plugins:
6.2.1 com.mentor.nucleus.bp.mc
      This plugin contains Abstract java classes (they can not be directly 
      instantiated) as well as constants and static functions (utility 
      functions).  All shared model compiler functionality is defined in the 
      classes defined in this plugin.  As of the initial implementation there
      is no model-compiler specific functionality.  All the model compilers
      were generated with the BridgePoint Model Compiler template and no
      changes were made to any of the model compilers after generation.  The 
      abstract classes are clearly denoted in this plugin because each 
      one's name begins with the word "Abstract".
      For each Abstract class in this bp.mc plugin there is a generated 
      Model Compiler class that extends the Abstract class.  It is also worth
      noting that as of this time, no classes in bp.mc shall extend any Eclipse
      extension points.  It is the generated model compiler classes where the
      needed extensions are declared in this new architecture.  
6.2.2 AbstractActivator.java
      This class extends org.eclipse.ui.plugin.AbstractUIPlugin which allows
      the plugin to make contributions to the UI.   This class is extended by
      the model compiler plugin activator class which means this is where any
      required plugin activation code is found.  
6.2.3 AbstractExportBuilder.java
      This class extends org.eclipse.core.resources.IncrementalProjectBuilder.
      This class defines the functionality required by the Model Compiler
      pre-builder.  
6.2.4 MCBuilderArgumentHandler.java
      This class defines the argument handling for arguments passed to the
      xtumlmc_build script.  These arguments are placed into the Model Compiler
      launch file and when the Model Compiler builder runs it uses these 
      arguments.   This class is the only class in the bp.mc plugin that is not 
      an Abstract class.  The reason is that no Model Compiler needs to modify 
      the behavior because all MCs are using xtumlmc_build.  If the need arises
      to override command-line argument handling on a per-MC basis this class
      can follow the pattern of the others and be made Abstract with a concrete
      class generated for the MCs.      
6.2.5 AbstractNature.java
      This class extends org.eclipse.core.resources.IProjectNature and defines 
      the functionality for the Model Compiler nature.  This is where the 
      folders and files that are required by a model compiler project are 
      defined.  It is through the functionality defined here that things like
      the marking files, the gen folder, and the src and dest folders get 
      created and populated at new project creation time.
6.2.6 AbstractNewProjectWizard.java
      This class extends com.mentor.nucleus.bp.core.ui.DelegatingWizard which 
      defines the interface for the classes that extend the 
      com.mentor.nucleus.bp.core.model-compilers extension point.  This is where
      the functionality required to support the NewProjectWizard is defined.

6.3 Structure of the generated Model Compiler plugins.  
    Each of the classes described here is generated by the 
    bp.mc.template [section 6.2.3].
6.3.1 Activator.java
      This class extends bp.mc/AbstractActivator.java and it implements 
      org.eclipse.ui.IStartup.  This class is defined as the eclipse Activator 
      for each generated model compiler.  The Activator is responsible for 
      loading the plugin when it is referenced.  This class implements a 
      singleton pattern.  
6.3.2 ExportBuilder.java
      This class extends bp.mc/AbstractExportBuilder.java.  It implements a 
      singleton pattern.  This is the class defined as the run-class for the
      org.eclipse.core.resources.builder extension point which is extended by 
      the model compiler to provide the pre-builder functionality.
6.3.3 MCNature.java
      This class extends bp.mc/AbstractMCNature.java.  It implements a  
      singleton pattern.  This class is defined as the run-class for the 
      org.eclipse.core.resources.natures extension point which is extended by 
      the model compiler to provide a project nature.    
6.3.4 MCNewProjectWizard.java
      This class extends bp.mc/AbstractMCNewProjectWizard.java.  It implements a 
      singleton pattern.  This class is defined as the "model compiler" class
      in the com.mentor.nucleus.bp.core.model-compilers extension point which 
      is extended by the model compiler. 
      
6.3.5 Marking files
      The marking files being used in all the model compilers generated for this
      issue are the same.  The MC3020 marking files are being used.  These
      files are stored in the BridgePoint source repository under 
      <cvs>model_compilers/mc3020/schema/colors.   During the BridgePoint 
      build, build server scripts move these marking files under the Model 
      Compiler plugins.   The build script shall be updated to move these
      files into the new MCs in the same way it has been done for MC3020 in 
      the past.  The infrastructure described in this document allows a means 
      to change this behavior.  However, it was not required at this time.      

6.4 How to generate/regenerate Model Compilers
    A new "HOWTO" was created [6] to explain how to use the new 
    bp.mc.template plugin creation template to generate a new Model 
    Compiler plugin or regenerate existing ones for maintenance.
      
6.5 Maintenance of the Model Compilers
6.5.1 It was a design goal that no model compiler-specific modifications need
      to be made, and this goal was achieved for the 5 new Model Compilers
      generated as part of this issue.  This means that at any moment
      the team can regenerate the Model Compilers from the template.  This 
      generation process is trivial [6]. 
6.5.2 The BridgePoint team should strive to never make a change in any of the
      specific model compilers.  Any required changes should be made to this
      bp.mc plugin and/or to the template.  
    
6.6 Modify the model pre-builder to support IPRs [4].
    A separate issue is raised for this task.  It will not be included in this
    work.
    
7. Design Comments
------------------
7.1 bp.mc.mc3020/MC3020NewProjectWizard.java
    In the init() function, there was some initialization code that is not 
    performing any useful task right now in head.
    
7.1.1 During revision 1.12.4.1 of this file a change was made associated with 
    issue [3].  This change removed some code that was introduced to 
    allow testing of a internal Edge Builder.  This builder was used at some 
    point in the distant past for unit testing.  This builder is defined in the 
    nucleus.internal.test plugin which defined it by extending the 
    com.mentor.nucleus.code-builders extension.  EDGE has been removed, and
    that extension point was changed to be 
    com.mentor.nucleus.bp.core.code-builders[3].  It would have been fine to  
    remove this EDGE-specific code, but an error was made in the removal of
    this EDGE-specifc code which in effect broke the ability to extend MC3020 
    to use code builders other then CDT.  This was fixed by adding-back code 
    that properly looks to see if there is more then 1 builder present (i.e. 
    more than one plugin that extends com.mentor.nucleus.code-builders), and 
    if so allows the user to choose which one to use.

7.1.2 nucleus.internal.test/plugin.xml
   Removed this test-version of a model compiler from the list of available MCs.
   The MC unit tests have not been used for many years now.  This plugin has 
   some code that forces the selected test MC into use regardless of user 
   selection.  It did this in the past to allow unit tests to work.  When unit 
   tests for MCs are reintroduced this plugin needs to be modified (if that is 
   the selected approach for testing).  However, right now this MC is just in 
   the way when trying to debug in a development environment, so it is being 
   disabled by removing its extension of the core.code-builders extension 
   point.

7.1.3 In bp.core.ui/WizardDelegateChooserPage.java::createControl() the tool
    creates the list of MCs to present to the user.  It is here that the 
    property SWT.SINGLE is specified to control that a single MC be allowed.
    With the implementation selected we will continue to specify SWT.SINGLE and
    not SWT.MULTI. However during investigation code was added to support the
    situation where multiple MCs are allowed. This code is in this function
    under the widgetSelected() function which is defined inside the 
    actionListioner inner class.  This code to support multiple selection
    is being left in place.

7.1.4 Filter the list of available model compilers presented to the user in the
    new project wizard to remove model compilers that are not licensed. 
    
    In wizardDelegateChooser.java::createControl() where the tool finds the 
    plugins that extend the model-compilers extension point code shall be added 
    to force the delegating plugin to load (the delegating plugin is a model 
    compiler).   Each model compiler that extends the model-compiler extension
    point already must define public static function named getWizard() that 
    returns an instance of itself.  With this change, the implementation of that
    static function is modified in the bp.mc/AbstractNewProjectWizard.java 
    class (which each specific MC extends) so it will return null if the 
    model compiler is not licensed.  The code populating the list box now checks 
    this return value and does not add the entry if it returned null.
    
7.2 Remove MC3020's extension of the model-compilers extension point.
    This change prevents MC-3020 from appearing in the list of available
    model compilers in the new project wizard.  The MC-3020 plugin is still
    included with the product distribution.  This is important because existing
    projects that are currently using the MC-3020 plugin will continue to use
    this plugin as will the project in the bp.welcome project.

7.3 Update the build server scripts to account for the 7 new
    plugins introduced by this issue.  These plugins are described above in
    the design section.  They are:
	com.mentor.nucleus.bp.mc
	com.mentor.nucleus.bp.mc.c.binary
	com.mentor.nucleus.bp.mc.c.source
	com.mentor.nucleus.bp.mc.cpp.source
	com.mentor.nucleus.bp.mc.vhdl.source
	com.mentor.nucleus.bp.mc.systemc.source
	com.mentor.nucleus.bp.mc.template
7.3.1 The following build server scripts  must be updated to include the new
    plugins so that the new plugins are properly tagged and included with the 
    BridgePoint distribution:
	com.mentor.nucleus.bp.core/tools/create_release_functions.sh
	com.mentor.nucleus.bp.core/tools/tag_bp_nb.sh
	com.mentor.nucleus.bp.core/tools/tag_bp.sh
7.3.2 The following build server script contains a function that is called 
    during the build process to setup the mc3020 folder (which is found under
    the mc3020 plugin).  This script shall be modified to perform this same 
    action into each of the new MC plugins.  Note that the new plugins shall
    still contain a mc3020 folder (just like the mc3020 plugin).  This shall be
    updated at a later date [5].
    com.mentor.nucleus.bp.core/tools/configure_external_dependencies.sh
7.3.3 Update the linux installer to support the new Model compiler plugins.
    The BridgePoint linux installer has a post-installation step that moves
    binaries needed for xtumlmc_build.exe execution via wine into the plugin
    folder and makes them executable.  This step must be repeated for each of 
    the new model compiler plugins.

7.4 Assure that the CDT builder is still listed as the last builder in the list
    of builders for any Model Compiler project.
    
    The bp.cdt plugin contains a dependency on the mc3020 plugin.  The reason 
    for this dependency is that in the builder performFinsh() operation a
    call is being made into MC3020 that reorders the list of builders that were 
    created to assure that the CDT builder is last.  This is necessary in order
    to assure that the builder runs after the Model Compiler.  This dependency
    shall be removed.  The functionality that provides this reordering has been
    refactored into the new 'abstract' bp.mc plugin.  Therefore, bp.cdt is no
    longer dependent on mc3020, but it is dependent on bp.mc.  This dependence 
    allowed because all MCs (even customer MCs) will use the bp.mc plugin in
    order to take advantage of things like the pre-buidler and the Model 
    Compiler nature.

7.5  In bp.core.ui/WizardDelegateChooserPage.java::createControl() code was 
   removed that was created many years ago to support testing with an EDGE 
   builder.  The EDGE builder is gone, and the test project is no longer being
   used therefore this code (and its large comment) shall be removed.
            
8. Work Required
----------------
Specified in the design section above.
    
9. Unit Test
------------
See [2]

End
---

$Log: dts0100782775.dnt,v $
Revision 1.12  2012/01/11 18:35:11  rmulvey
job:dts0100782775
Addressed review observations

Revision 1.11  2012/01/11 03:47:15  rmulvey
job:dts0100782775
Made a final pass through the document to correct errors.

Revision 1.10  2012/01/11 03:27:10  rmulvey
job:dts0100782775
Design note complete.  I just need to make a final proof-reading pass.

Revision 1.9  2012/01/10 20:37:10  rmulvey
job:dts0100782775
Updated design note.

Revision 1.8  2012/01/10 17:42:07  rmulvey
job:dts0100782775
Updated design note , note is still not complete, but all work is now complete.

Revision 1.7  2011/12/30 19:06:47  rmulvey
job:dts0100782775
Clarified build server change description

Revision 1.6  2011/12/30 18:58:59  rmulvey
job:dts0100782775
Updated design note from review comments

Revision 1.5  2011/12/29 21:54:07  rmulvey
job:dts0100782775
Updated with notes taken during the review.

Revision 1.4  2011/12/29 20:50:07  rmulvey
job:dts0100782775
Updated after analysis review

Revision 1.3  2011/12/29 18:53:50  rmulvey
job:dts0100782775
Added more detail in the design comments.

Revision 1.2  2011/12/29 18:50:59  rmulvey
job:dts0100782775
Introduced description of current work.

Revision 1.1  2011/12/29 17:35:21  rmulvey
job:dts0100782775
Introduced

