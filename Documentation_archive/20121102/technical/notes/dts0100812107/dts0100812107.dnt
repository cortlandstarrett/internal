========================================================================

File:      $RCSfile: dts0100812107.dnt,v $
Version:   $Revision: 1991 $
Modified:  $Date: 2012-11-02 14:29:43 -0700 (Fri, 02 Nov 2012) $

(c) Copyright 2007-2011 by Mentor Graphics Corp. All rights reserved.

========================================================================
This document contains information proprietary and confidential to
Mentor Graphics Corp., and is not for external distribution.
========================================================================

BridgePoint Project Design Note
Introduce CheatSheet infrastructure with  SimpleModel CheatSheet


1. Abstract
-----------
As part of the Documentation project, it is decided to develop cheat sheets that
help the user to get started of using the tool, and how to create their own 
models.

2. History
----------
None.

3. Document References
----------------------
[1] ClearQuest DEI dts0100812107 - Introduce CheatSheet infrastructure with  
	SimpleModel CheatSheet
[2] How-To-Create-CheatSheet
	<cvs>Documentation\internal\process\templates\checklists\How-To-Create-CheatSheet.chk
[3] Manual Test : SMA QA BridgePoint dts0100812487 - Run Hello World Model cheat 
	sheet

4. Background
-------------
Cheat Sheets are built-in mechanism for displaying mini-tutorials. A cheat sheet 
allows to guide a user through a set of ordered instructions much like a 
traditional wizard, except that the steps are taken directly within the 
BridgePoint IDE instead of a dialog box. Cheat sheets use a simple XML format.
The cheat sheet consists of multiple instructions called items, each item has 
different attribute define the instruction  headline, related help reference,
description, action and 
other attributes, a sample for cheat sheet item  :   

<item
	title=""
    skip=""
    href="" >
    <action
    	pluginId="" 
		class=""
		param1="" param2=""  />
	<description>
    	<b>Body</b>
	</description>
</item>
   

5. Analysis
-----------
5.1 It is required to introduce cheat sheets infrastructure to be used by
cheat sheets files, the infrastructure is generic actions
such as Open Diagram, create model element, draw associations, and others.
Each cheat sheet action should execute one of these generic actions along with 
customizing parameters

5.2 The cheat sheet generic actions should receive list of parameters depends
on the action type. eg.  project name, element type, and element name.

5.3 A unified cheat sheet action shall only be used in the cheatsheet and routs 
action to the proper generic action class based on the first passed parameter.

5.4 The cheatsheet infrastructure shall not depend on existed testing 
	infrastructure, and if needed, this test utilities shall be moved to 
	bp.utitlies plugin
5.5 Create composite cheat sheet for Simple Model cheatsheet :
5.5.1 Simple Model Characteristic : 
5.5.1.1 Has One package as a root package, that contains two components, the 
		first one 'Root' hold the model, the second one called 'TestBench'. Both
		Components connected to each other. The connection is formalized to an
		interface called 'verification', this interface resides peers to the 
		previous components  
5.5.1.2 Implement the model in single package reside in the 'Root' component.
5.5.1.3 The model package one model class with instance state machine.
5.5.1.4 The instance state machine contains two states 'Start' and 'End' with
		single transition from 'Start' to 'End', the 'End' state holds OAL to
		print 'state End has been executed'
5.5.1.5 The 'verification' interface has single operation.
5.5.1.6 The 'TestBench' contains single package, the hold one function called 
		'test'. The 'test' function send message over the port to 'Root' 
		component.  
5.5.2 The composite cheat sheet sections : 
 
	-Create Simple Model
		-Prepare workspace
		-Create xtUML Project
		-Model Design
			-Model Framework
			-Model Architecture
		-Model Implementation
			-Model Classes creation
			-State Machine Creation
		-Model Verification
			-TestBench Creation
		-Model Execution
			-Model Execution in Verifier
		-Model Build and Core Generation
			-Build and Code Generation
		 		

6. Design
---------
6.1 Add the following plugin to bp.Welcome Plugin xml dependencies :
	"org.eclipse.ui.cheatsheets"
6.2 Generic actions list to be implemented : 
6.2.1 Draw Element from Palette
6.2.2 Add Element to canvas elements, e.g Operation, Attribute, Bridges etc.
6.2.3 Open Diagram
6.2.4 Open Activity Editor 
6.2.5 Link With Editor
6.2.6 Formalize Port
6.2.7 Assign Event
6.2.8 Add OAL
6.2.9 Rename element from Canvas 
6.2.10 Rename element from ME view
6.2.11 Draw Association/Port
6.2.12 Change Key letter 
6.2.13 Launch Verifier 
6.2.14 Execute Activity 
6.2.15 Build Project
6.2.16 Create Project
6.2.17 Switch Perspective

6.3 Composite cheat sheet sections actions : 
6.3.1 Prepare workspace : 
	  - Switch to xtUML modeling perspective
	  - Link with editor
6.3.2 Create xtUML Project 
	  - Create xtUML project
	  - Open the System Model diagram
6.3.3 Model Framework :
	  - Create the Root package
	  - Create the Root component
6.3.4 Model Architecture :
	  - Create the Model package
6.3.5 Model Classes creation :
	  - Create new model class, rename it, change its key letter, and add 
	  instance state machine.
6.3.6 State Machine Creation
	  - Open the instance state machine
	  - create two states, rename them to 'Start' and 'End'
	  - Draw transition between them
	  - Add event and formalize the transition to it
	  - Add OAL code to state 'End'
6.3.7 TestBench Creation :
	  - Create 'TestBench' component.
	  - Create 'verification' interface, add an interface operation to it.
	  - Connect the 'Root' component with 'TestBench'  component.
	  - Add package to 'TestBench' component, add function 'test' to it.
	  - Add OAL to the 'test' function to send message to 'Root' Component.
6.3.8 Model Execution in Verifier
	  - Launch the verifier
	  - Execute the 'test' function
6.3.9 Build and Code Generation
	  - Switch C/C++ perspective
	  - Build the project
	  - View the generated code.
	  
7. Design Comments
------------------
7.1 The cheat sheets infrastructure used some of the existed testing utilities 
that reside in the test plugins, and since we do not ship these test plugin,
these utilities is refactored and moved to bp.utilities plugin in new created
com.mentor.nucleus.bp.utilities.testing package. As a side effect, all 
references for these utilities in all plugins has been updated. 


8. Work Required
----------------
Fully outlined in the design section

9. Unit Test
------------
9.1 All Junit test must pass.
9.2 Run manual test [3]


End
---

$Log: dts0100812107.dnt,v $
Revision 1.1  2011/11/07 21:22:29  nmohamad
job:dts0100812107
Create

