========================================================================

File:      $RCSfile: dts0100911252.dnt,v $
Version:   $Revision: 1991 $
Modified:  $Date: 2012-11-02 14:29:43 -0700 (Fri, 02 Nov 2012) $

(c) Copyright 2007-2012 by Mentor Graphics Corp. All rights reserved.

========================================================================
This document contains information proprietary and confidential to
Mentor Graphics Corp., and is not for external distribution.
========================================================================

BridgePoint Project Design Note
Modify the verifier realized code interface to reuse stack frame values during
recursion.

1. Abstract
-----------
This note describes a fix to the Verifier Interface to External Code (VIEC) that
caused reentrancy to not operate correctly.

2. History
----------
None.

3. Document References
----------------------
[1] ClearQuest DEI dts0100911252 - Verifier realized code interface does not 
	reuse stack frame values during recursion
[2] ClearQuest DEI dts0100921469 - Make sure that creating a new runtime value 
	in the context of Verifier realized code interface does not cause a leak

4. Background
-------------
A customer reported a fault with VIEC such that in an interface operation re-
entrancy context, the return value becomes stale after one iteration. 

5. Requirements
---------------
The verifier shall return the correct value when executing a reentrant design in
a realized component context.

6. Analysis
-----------
The verifier does not create new modeled stack frames when executing
realized code for another time, instead it relies on the natural java stack 
handling. However it currently does create a new value in stack frame each
time the realized code is entered. Because of this, the value passed is not
updated, causing the reentrant calculation to be performed incorrectly.

7. Design
---------
The realized code execution shall be modified to create new value in stack frame
if there is no previously created value. Otherwise the existing value is reused.
The changes are made to VerifierInvocationHandler.executeRealizedCode(), just
before the returned value is marshaled back into Verifier.

8. Design Comments
------------------
Reusing an existing runtime value in context of Verifier realized code interface  
should be considered, otherwise a leak is possible. A seperate issue has been 
raised to address this issue [2], this issue is put off to a later release.

9. Work Required
----------------
Fully outlined in design section.

10. Unit Test
------------
10.1 Run Debug ui test.
10.2 Add new automated test that does the following : 
- Using single port, re-enter java realized code multiple time and check
  return value.
- execute the previous test using two ports.
_R compare the console text with the expected out

End
---

$Log: dts0100911252.dnt,v $
Revision 1.4  2012/10/15 19:04:31  nmohamad
job:dts0100911252
Addressing review minutes

Revision 1.3  2012/10/15 14:20:15  nmohamad
job:dts0100911252
Add design comments

Revision 1.2  2012/10/15 12:19:22  campbell
Job: dts0100911252
Expand descriptions a little. Fix typos.

Revision 1.1  2012/10/09 15:04:40  nmohamad
job:dts0100911252
Create

