========================================================================

File:      $RCSfile: dts0100812107-dts0100807847.dnt,v $
Version:   $Revision: 1991 $
Modified:  $Date: 2012-11-02 14:29:43 -0700 (Fri, 02 Nov 2012) $

(c) Copyright 2007-2011 by Mentor Graphics Corp. All rights reserved.

========================================================================
This document contains information proprietary and confidential to
Mentor Graphics Corp., and is not for external distribution.
========================================================================

BridgePoint Project Design Note
Introduce CheatSheet infrastructure with  Simple System CheatSheet

Create an Eclipse cheatsheet to walk User through BridgePoint 
Project Flow 

1. Abstract
-----------
As part of the Documentation project, it is decided to develop cheat sheets that
help the user to get started of using the tool, and how to create their own 
models. Then Create an Eclipse cheatsheet to walk User through BridgePoint 
Project Flow.


2. History
----------
A cheatsheet brief demo was done for the Simple System cheatsheet. Demo minutes 
were captured in [6].

3. Document References
----------------------
[1] ClearQuest DEI dts0100812107 - Introduce CheatSheet infrastructure with  
	Simple System CheatSheet
[2] How-To-Create-CheatSheet
	<cvs>Documentation\internal\process\templates\checklists\How-To-Create-CheatSheet.chk
[3] Manual Test : SMA QA BridgePoint dts0100812487 - Run All BrdigePoint 
	CheatSheets 
[4] ClearQuest DEI dts0100807847 - Create a Eclipse Cheat Sheet to walk User 
    through BridgePoint Project Flow
[5] ClearQuest DEI dts0100831018 - Correct the Links to Help in the BridgePoint 
	CheatSheets  to point to the right content related with each step
[6] Simple System demo minutes : 
	<cvs>Documentation\internal\review_minutes\R3_4_3\dts0100812107-demo.rvm
	
4. Background
-------------
Cheat Sheets are built-in mechanism for displaying mini-tutorials. A cheat sheet 
allows to guide a user through a set of ordered instructions much like a 
traditional wizard, except that the steps are taken directly within the 
BridgePoint IDE instead of a dialog box. Cheat sheets use a simple XML format.
The cheat sheet consists of multiple instructions called items, each item has 
different attribute define the instruction  headline, related help reference,
description, action and 
other attributes, a sample for cheat sheet item  :   

<item
	title=""
    skip=""
    href="" >
    <action
    	pluginId="" 
		class=""
		param1="" param2=""  />
	<description>
    	<b>Body</b>
	</description>
</item>
   

5. Analysis
-----------
5.1 It is required to introduce cheat sheets infrastructure to be used by
cheat sheets files, the infrastructure is generic actions
such as Open Diagram, create model element, draw associations, and others.
Each cheat sheet action should execute one of these generic actions along with 
customizing parameters

5.2 The cheat sheet generic actions should receive list of parameters depends
on the action type. eg.  project name, element type, and element name.

5.3 A unified cheat sheet action shall only be used in the cheatsheet and it 
routes the action to the proper generic action class based on the first passed 
parameter.

5.4 The cheatsheet infrastructure shall not depend on existed testing 
	infrastructure, and if needed, this test utilities shall be moved to 
	bp.utitlies plugin
5.5 Create composite cheat sheet for Simple System :
5.5.1 Simple System Characteristic : 
5.5.1.1 Has single system model package 'System' package, that contains two 
		components, the first one 'Device' hold the model, the second one 
		called 'TestBench'. Both Components are connected to each other. The 
		connection is formalized to an interface called 'verification', this 
		interface lives next to previous components.  
5.5.1.2 Implement the model in single package reside in the 'Device' component.
5.5.1.3 The model package has model class with instance state machine.
5.5.1.4 The instance state machine contains two states 'Start' and 'End' with
		single transition from 'Start' to 'End', the 'End' state holds OAL to
		print 'state End has been executed'
5.5.1.5 The 'verification' interface has single operation.
5.5.1.6 The 'TestBench' contains single package, that hold one function called 
		'test'. The 'test' function sends message over the port to 'Device' 
		component.  
5.5.2 The composite cheat sheet sections : 
 
	-Create Simple System
		-Prepare workspace
		-Create xtUML Project
		-Design
			-Framework
			-Architecture
		-Implementation
			-Model Class creation
			-State Machine Creation
		-Verification
			-TestBench Creation
		-Execution
			-Execution in Verifier
		-Build and Core Generation
			-Build and Code Generation

5.6 Heart Pacer Case Study :
5.6.1 Create an Eclipse cheatsheet to help the user get a general idea about the 
      Whole BridgePoint Project flow. It takes the user all the way through the 
      process from the analysis phase to the code generation phase. 	
5.6.2 The Heart Pacer Model was chosen for this CaseStudy it shows the user how
      this model is analyzed then designed then verified and finally got 
      generated as C code.  
 
6. Design
---------
6.1 Add the following plugin to bp.Welcome Plugin xml dependencies :
	"org.eclipse.ui.cheatsheets"
6.2 Generic actions list to be implemented : 
6.2.1 Draw Element from Palette
6.2.2 Add Element to canvas elements, e.g Operation, Attribute, Bridges etc.
6.2.3 Open Diagram
6.2.4 Open Activity Editor 
6.2.5 Link With Editor
6.2.6 Formalize Port
6.2.7 Assign Event
6.2.8 Add OAL
6.2.9 Rename element from Canvas 
6.2.10 Rename element from ME view
6.2.11 Draw Association/Port
6.2.12 Change Key letter 
6.2.13 Launch Verifier 
6.2.14 Execute Activity 
6.2.15 Build Project
6.2.16 Create Project
6.2.17 Switch Perspective

6.3 Composite cheat sheet sections actions : 
6.3.1 Prepare workspace : 
	  - Switch to xtUML modeling perspective
	  - Link with editor
6.3.2 Create xtUML Project 
	  - Create xtUML project
	  - Open the System Model diagram
6.3.3 Model Framework :
	  - Create the 'System' package
	  - Create the 'Device' component
6.3.4 Model Architecture :
	  - Create the Model package
6.3.5 Model Classes creation :
	  - Create new model class, rename it, change its key letter, and add 
	  instance state machine.
6.3.6 State Machine Creation
	  - Open the instance state machine
	  - create two states, rename them to 'Start' and 'End'
	  - Draw transition between them
	  - Add event and formalize the transition to it
	  - Add OAL code to state 'End'
6.3.7 TestBench Creation :
	  - Create 'TestBench' component.
	  - Create 'verification' interface, add an interface operation to it.
	  - Connect the 'Device' component with 'TestBench'  component.
	  - Add package to 'TestBench' component, add function 'test' to it.
	  - Add OAL to the 'test' function to send message to 'Device' Component.
6.3.8 Model Execution in Verifier
	  - Launch the verifier
	  - Execute the 'test' function
6.3.9 Build and Code Generation
	  - Switch C/C++ perspective
	  - Build the project
	  - View the generated code.
	
6.4	Heart Pacer Case Study :
 The Case Study cheatSheet would go through the different phases of the 
 BridgePoint process. Each process is represented by an item in a simple 
 cheatSheet followed by simple description of the phase and linked with a 
 button to perform the action described. 
6.4.1 Analysis   
	  The Analysis item description will be as follows: 
	  "The analysis phase is where you clarify requirements and consider what 
	  your model will do.  Here you create Use Case, Sequence, Activity and 
	  Communication diagrams.    Let’s look at some of these diagrams.."
	  Then there will be three actions to open the informal diagrams, the 
	  communication diagram, the sequence diagram and the Activity diagram 	  
6.4.2 Design
      The Design item description will be as follows: 
	  "The design phase is where you create an implementation based on the 
	  analysis.  During this executable modeling, you define components, 
	  interfaces, classes, state machines that form the application solution.  
	  Here you also create components to test the solution.  Now let’s consider 
	  a few diagrams produced in this step"
	  Then there will be three actions to open the component and class diagrams.
	  
6.4.3 Verification
      The Verification item description will be as follows: 
	  "As the design and tests begin to take form, use the xtUML Model Debugging 
	  perspective to execute the model.  Let’s execute the heart pacer model"
	  Then there will be three actions, one to launch the verifier then another 
	  one to execute the function "init" then a tip on how to close the verifier 
	  session 	   

6.4.4 Implementation
      The Implementation item description will be as follows: 
	  "Once you are happy with the solution, translate the model into 
	  implementation code.  Let’s do this now."
	  Then there will be Two actions, one to open the C/C++ perspective and the
	  other is to build the project and get the code generated.
6.4.5 Ongoing development
      There will be additional tip at the end of the cheatsheet to state the 
      following 
      "The process is not done in a single pass.  As you uncover new 
      requirements, or add enhancements or fixes to the design, verify and 
      implement actively and iteratively to make sure the model passes 
      verification and the implementation stays up to date"
      	  
6.5 Reference the cheatsheets : 
6.5.1 Add a link in Help > Welcome > Quickstart that links to the cheat sheet 
	  selection page
6.5.2 Add a link in the BridgePoint help contents to the cheat sheet selection 
	  page
   
	  
7. Design Comments
------------------
7.1 The cheat sheets infrastructure used some of the existed testing utilities 
that reside in the test plugins, and since we do not ship these test plugins,
these bp.utilities is refactored and moved to bp.utilities plugin in new created
bp.utilities.ui.CanvasUtilities.java class. As a side effect, all 
references for these utilities in all plugins has been updated. 

7.2 The Heart Pacer Case Study References the Bridge Point Help at it's entry 
point till the BPHelp gets updated.
When The help gets updated with new content for informal diagrams and other
topics the references to help in the Heart Pacer Case Study CheatSheet will be 
updated accordingly to reference the right content at each step. 
Issue is raised to address this point[5].
    




8. Work Required
----------------
Fully outlined in the design section

9. Unit Test
------------
9.1 Run bp.weclome.test  
9.2 Run manual test [3]


End
---

$Log: dts0100812107-dts0100807847.dnt,v $
Revision 1.6  2011/11/09 19:17:02  nmohamad
job:dts0100812107
Addressing review minutes

Revision 1.5  2011/11/09 16:27:58  nmohamad
job:dts0100812107
Add new point, 6.5.2

Revision 1.4  2011/11/09 16:24:56  nmohamad
job:dts0100812107
Update document references , and history sections

Revision 1.3  2011/11/09 16:05:27  hkhaled
job:dts0100812107
modify section 9

Revision 1.2  2011/11/09 15:56:27  hkhaled
job:dts0100812107
append dts0100807847 dnt to the existing one

Revision 1.1  2011/11/09 15:38:06  hkhaled
job:dts0100812107
append dts0100807847 dnt to the existing one

Revision 1.1  2011/11/07 21:22:29  nmohamad
job:dts0100812107
Create

