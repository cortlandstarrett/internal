========================================================================

File:      $RCSfile: dts0100782470.dnt,v $
Version:   $Revision: 1991 $
Modified:  $Date: 2012-11-02 14:29:43 -0700 (Fri, 02 Nov 2012) $

(c) Copyright 2007-2011 by Mentor Graphics Corp. All rights reserved.

========================================================================
This document contains information proprietary and confidential to
Mentor Graphics Corp., and is not for external distribution.
========================================================================

BridgePoint Project Design Note
Generate IP-XACT XML Memory Map for SystemC

1. Abstract
-----------
Customers have requested that BridgePoint generate XML file(s) containing
a memory map of the registers and memory blocks used for TLM communication.

2. History
----------

3. Document References
----------------------
[1] ClearQuest dts0100782470 - XML export of BridgePoint generated memory map
[2] IP-XACT Wikipedia - http://en.wikipedia.org/wiki/IP-XACT
[3] IP-XACT standard home - http://www.accellera.org/activities/ip-xact/
[4] System-C standard home - http://www.systemc.org/home/

4. Background
-------------
BridgePoint xtUML models can be translated into SystemC [4].  This involves
generating System-C compliant abstract C++ that captures the behavior of the
executable UML model.  In addition, the model compiler generates a "clean,
simple, default starting point" TLM wrapper.  This wrapper includes definition
of the registers and memory blocks used to communicate through the TLM layer.

The same information as is generated into RegDefs.h is needed in IP-XACT [2,3]
format.  Model compiler translation will be supplied to generate this
industry-standard format file.

5. Analysis
-----------
5.1.  The same information as is generated into RegDefs.h will be generated
      into a separate file in IP-XACT XML format.
5.2.  The generated file will be named <project-name>-registers-ipxact.xml.
5.3.  All components in the configured xtUML will supply input to the generated
      file.
5.4.  Only ports marked as TLM will feed into the output XML file.
5.5.  Component, port, message and parameter description information will be
      supplied into the generated file.

6. Design
---------
6.1.   The existing generation of RegDefs.h will inform the generation of the
       IP-XACT output.
6.2.   Separation of query from template will be established.
6.2.1  A new metamodel subsystem will be added to the mc3020 metamodel.  This
       new subsystem will be contain classes TLM port, register.  These will
       be linked to TE_PO and TE_PARM respectively and ordered.
6.3.   The RegDefs.h query will be separated from the rest of the TLM wrapper
       generation.  Additional RegDef templates will be employed.
6.4.   New template register, offset, port will be created and implemented using 
       the spirit and socrates schemas (supplied by Doulog). 
6.4.1  Structure of the template is to be a general XML 2.0 header identifying 
       all necessary namespaces using xmlns entries. 
6.4.2  TLM messages will be mapped to register and memory blocks in a manner
       consistent with RegDef and using the spirit schema to identify name 
       and soc schema for size and offset information.
6.4.3  Specific ports will have name, description, offset, access type and 
       default value details capture using spirit and soc schemas.
6.4.5  Currently, the XML export creates single and multiple transfer messages 
       separately. Single transfer messages are reported as register messages 
       while multple transfer messages arereported as memory blocks. For some 
       3rd party tools, it may be preferred that all messages are reported as 
       register messages. This will require further analysis as to the best 
       approach to map these contiguous blocks onto a series of uniquely named 
       registers that offer the same storage and transparent access.
6.5    Update xtumlmc_build.
6.5.1  Update xtumlmc_build to copy the newly generated XML file(s) from the 
       code generation directory to the src folder along with the C header
       and implementation files.
6.6.   Additional meta-model fields are added to support the inclusion of
       documented descriptions for elements in the customer xtUML model.  
       Specifically, support for emission of message description text and 
       parameter description text is added.
6.6.1. Add Description attribute to classes TE_MACT (Extended Message) and
       TE_PARM (Extended Parameter) in the MC-3020 meta-model.
6.6.2. Populate Description attribute value during initial query/population
       of the model compiler extensions to the meta-model.
       
7. Design Comments
------------------

None

8. Work Required
----------------

See section 6.


9. Unit Test
------------
9.1.    To confirm implementation of the XML export two specific tests were
        performed using two models familiar to the customer.  The models were
        avpacer.xtuml and integrated.xml which were previously shared with the
        customer. Each model was tested using the following procedure:
9.1.1.  With an empty src folder, perform a project build on the model
9.1.2.  in Edge perspective navigate to the <component>.xml file and open using
        eclipse XML viewer
9.1.3.  visually inspect source view and design view for parsing errors
9.1.4.  open RegDefs.h file and visually compare contents of <component>.xml with
        contents of RegDefs.h

9.2.    Final confirmation provided by successful import of contents by
        3rd party tool of customer's choice.

End
---

$Log: dts0100782470.dnt,v $
Revision 1.3  2011/07/29 17:47:16  cstarret
job:dts0100782470
updated with schema update

Revision 1.2  2011/07/29 17:27:14  kbrown
job:dts0100782470
Updated with Dean's latest changes.

Revision 1.1  2011/07/14 19:56:01  cstarret
job:dts0100782470
first draft design note

