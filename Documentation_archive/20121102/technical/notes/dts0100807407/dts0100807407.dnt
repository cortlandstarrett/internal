========================================================================

File:      $RCSfile: dts0100807407.dnt,v $
Version:   $Revision: 1991 $
Modified:  $Date: 2012-11-02 14:29:43 -0700 (Fri, 02 Nov 2012) $

(c) Copyright 2007-2011 by Mentor Graphics Corp. All rights reserved.

========================================================================
This document contains information proprietary and confidential to
Mentor Graphics Corp., and is not for external distribution.
========================================================================

BridgePoint Project Design Note
Include global types in code generation model

1. Abstract
-----------
This note describes the changes required to include global elements in the model
that is passed to generator for code generation.

2. History
----------

3. Document References
----------------------
[1] ClearQuest DEI dts0100807407
[2] ClearQuest DEI dts0100654681 Inter-project component references

4. Background
-------------
The introduction of global types [2] migrated all core types to be global, and
outside of the old data type package.  This means that they are not included in
the model created by the 3020 pre-builder, which of course breaks code
generation capability.

5. Analysis
-----------
All global types, defined in the bp.pkg/Globals/Globals.xtuml model file must
be appended to the model that is passed to the generator.  This shall be done at
the same stage as this single file model is created.  The global types must not
be included in the single file exported by the export wizard.

6. Design
---------
6.1 Cache loaded global elements

The Globals.xtuml file is loaded during the startup of the core plugin, during
this time they are now cached in a simple list.  The current load code is using
ImportBPSql, for simplicity (the stream importer does much more, like id
updating).  This is changed to use ImportModel instead, as the ImportBPSql code
does not handle PackageableElement entries.  The code previously worked because
upgrade code was recreating the PackagableElements.  Additionally, the
archetypes used to generate ImportModel are modified to keep track of all
elements that are loaded (identical to the way normal loading does).

6.2 Export global types in pre-builder

In mc3020/ExportBuilder.java code is added that gets the cached global types
from the CorePlugin class.  The elements in this list are added to the list that
is passed to stream export, which in turn includes them in the single file that
is created.  It does this only if globals have been loaded and if the current
project being built has globals enabled.

Global elements do not have an associated PersistableModelComponent which the
stream exporter does not handle well.  NPEs were caused as the exporter expects
all elements to have a PMC.  The stream exporter uses the PMC to deal with
proxies, in the case of global elements they will never be proxies.  The
archetype that generates the stream exporter class is modified to protect
against these NPEs.

7. Design Comments
------------------

8. Work Required
----------------
See design.

9. Unit Test
------------
9.1 Test with globals enabled
_- Start a clean workspace
_- Create the GPS example
_- Upgrade the GPS project to use globals
_- Build the project
_R There are no errors reported during code generation
_R The GPS example is compiled without problems

9.2 Test with globals disabled
_- Start a clean workspace
_- Create the GPS example
_- Build the project
_R There are no errors reported during code generation
_R The GPS example is compiled without problems

End
---

$Log: dts0100807407.dnt,v $
Revision 1.3  2011/11/02 20:21:03  tlondon
Job: dts0100807407

address review minutes

Revision 1.2  2011/11/02 16:40:53  tlondon
Job: dts0100807407

Add test for projects without globals enabled

Revision 1.1  2011/11/02 16:30:35  tlondon
Job: dts0100807407

Introduce note

