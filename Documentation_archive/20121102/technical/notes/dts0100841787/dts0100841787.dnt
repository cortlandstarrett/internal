========================================================================

File:      $RCSfile: dts0100841787.dnt,v $
Version:   $Revision: 1991 $
Modified:  $Date: 2012-11-02 14:29:43 -0700 (Fri, 02 Nov 2012) $

(c) Copyright 2007-2012 by Mentor Graphics Corp. All rights reserved.

========================================================================
This document contains information proprietary and confidential to
Mentor Graphics Corp., and is not for external distribution.
========================================================================

BridgePoint Project Design Note
Verifier check gives incorrect error after relating over association to many \
side using an associative class

1. Abstract
-----------
  A model contains a class diagram with a 1:1..* association with an associative 
class in the middle. When relating the two main classes together from the 
direction of 1->1..*, the relate completes correctly for all relates (even if 
Instance Population checks are turned on). Relating from the other direction, 
1..*->1, the relate completes correctly for all instances involved. If Instance 
Population checks are turned on, however, relates in the 1..*->1 direction 
produce incorrect warnings after the first relate.


2. History
----------

3. Document References
----------------------
[1] ClearQuest DEI dts0100841787 - Verifier check gives incorrect error after 
	relating over association to many side using an associative class
[2] ClearQuest DEI dts0100654483 - Verifier must check xtUML rules. For example 
	Relationship condinationality and multiplicity.

4. Background
-------------
None.

5. Requirements
---------------
5.1 Relating direction should not make difference in applying verifier auditing
	check. 
	
6. Analysis
-----------
6.1 Association with an associative class in the middle is represented in 
    Association subsystem by 'Linked Association', 'Class As Associated One Side', 
    'Class As Associated Other Side' and 'Class As Link'. 
    
    'Class As Associated One Side' and 'Class As Associated Other Side' 
    represent the model classes with direct association, and  'Class As Link' 
    represents the associative class in the middle.
    
    There is an attribute in the three of them called 'Mult' that hold the 
    multiplicity value.

6.2 Syntax of relate using statement : 
 	 relate source to destination across R# using associative
 	
 	In Relate Using::Execute, there is an assumption that multiplicity of 'source'
 	instance is always represented by  Class As Associated One Side::Mult, and 
 	the multiplicity of 'destination' instance is always represented by 
 	Class As Associated Other Side::Mult .
	These assumptions are not always valid because source and destination (and 
	hence the cardinalities)are determined by the position the parser finds 
	the instance handles in the statement, not the fact the instance class is 
	related to AONE/AOTH.

6.3 It is possible to select 'Class As Associated Other Side' or 
	'Class As Associated One Side'instance related by a model class in two 
	different ways : 
	
	a- Starting from 'Relate Using' Instance :    
									   
ACT_RU-> R_REL[R654]-> R_ASSOC[R206] -> R_AONE[R209] or R_AOTH[R210]
	
	b- Starting from 'Instance' instance : 
																	
I_INS-> CSME_CIE[R2962]-> O_OBJ[R2961]-> R_OIR[R201]-> R_RTO[R203]-> A_AONE[R204] or A_AoTH[R204]

6.4 In 'b' selection, it is obvious that there is no need to made any 
	assumption to either select A_AONE or A_AOTH because it is specialization 
	relation, and only of them will exist.
	
	In 'a', both of A_AONE and A_AOTH are related with A_ASSOC instance, and 
	another information is needed to properly select the instance that 
	represents the instance's (source/destination) model class.

6.5 The OAL in Relate::Execute operation was analyzed, and found that the 
	traversal to A_AONE and A_AOTH is the one mentioned in [6.3, b].

6.6 The branch for issue [2] was visited to find out whether Relate::Execute and
	Relate Using::Execute had the same traversals at the beginning of the 
	implementation, and that one of them changed later, and found that both
	of them has same implementation traversal from the beginning as they have 
	now.
	
7. Design
---------
7.1 Replace the selection of A_AONE and A_AOTH in Relate Using::Execute to use
	the traversal 'b' in 6.3.

8. Design Comments
------------------
None.

9. Work Required
----------------
Work is fully outlined in the design section.

10. Unit Test
------------
10.1 Run Verifier Junit test.
10.2 Update audit test model to include this use case.

End
---

$Log: dts0100841787.dnt,v $
Revision 1.3  2012/05/23 22:43:16  nmohamad
job:dts0100841787
Addressing reivew minutes

Revision 1.2  2012/05/14 17:32:26  nmohamad
job:dts0100841787
update analysis section

Revision 1.1  2012/05/14 15:38:55  nmohamad
job:dts0100841787
Create

