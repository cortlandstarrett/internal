========================================================================

File:      $RCSfile: dts0100879942.int,v $
Version:   $Revision: 1991 $
Modified:  $Date: 2012-11-02 14:29:43 -0700 (Fri, 02 Nov 2012) $

(c) Copyright 2007-2012 by Mentor Graphics Corp. All rights reserved.

========================================================================
This document contains information proprietary and confidential to
Mentor Graphics Corp., and is not for external distribution.
========================================================================

BridgePoint Project Implementation Note
Support Returned Strings More Safely

1. Abstract
-----------
This note describes an implementation of string data allocation to more
safely return string values from action bodies.

2. History
----------

3. Document References
----------------------
[1] ClearQuest dts0100879942 - Operations with string return values are not
code generated correctly when returning values from local string variables
[2] svn://tucson.wv.mentorg.com/arch1/products/tiger/doc_repository/trunk/Models/mctest/ex2

4. Background
-------------
C handles strings as pointers.  This adds a challenge when returning
strings from functions, operations and other message bodies.  The return
statement returns a pointer to a string and not really the whole string.
In most cases, this is fine.  Especially in assignments, the return string
pointer is used to copy the data from the called context into the calling
context.
However, returned strings are used in more than just assignment statements.
They are also used in expressions and passed as parameters.  In this latter
case, there is no copy from the called context into the calling context;
this presents a problem with certain return values originating as transient
variables local to the called context.

5. Requirements
---------------
5.1.   Returned strings will be copied into the called context immediately
       (before any other calls are made).
5.2.   Returned strings must be allocated simply.
5.3.   Returned strings must be deallocated safely.

6. Work Required
----------------
6.1    When a string is a function/operation/message/bridge return type in
       the context of an actual passed parameter, we will declare/allocate
       a transient variable in the calling context.  The return string will
       be copied to the transient variable before being passed into the
       called function.
6.1.1  stradd will be made more robust by rotating through multiple static
       buffer locations.
6.1.2  A new transient string allocation function called strget is introduced
       to provide memory-based (non-stack) space for strings.  It uses a 
       rotating array to allocate temporary storage that is rotated.
6.2    Allocation remains on the stack.  Analysis during this issue leads
       this developer (CDS) to believe that stack allocation is the only safe
       approach.  (It may be safer still to use the stack and always allocate
       the return data into the called context and pass this buffer into the
       called context by reference.)
6.3    Stack allocation makes deallocation automatic.

7. Implementation Comments
--------------------------
7.1    A bug in q.val.translate.arc was identified while running testing
       for this issue.  A recursive call to q_val_unary_op_value was not
       being made.  This was uncovered by testing with multiple layers of
       unary operator.
7.2    'extern' has been used in a (minorly) incorrect way.  It is given
       explicitly for function prototypes, even when the prototypes are part
       of an include file.  The 'extern' keyword is primarily meant for use
       when explicitly indicating that a declaration is for data or a function
       defined elsewhere and when not part of an include file.
       So, 'extern' is removed in places where it is superfluous.
7.3    Some places were using the explicit string Escher_iHandle_t when
       there is a meta-model attributes for this, te_instance.handle.
7.4    Running tests identified that windows' localtime call does not work
       for dates before 1970.  The code was made robust enough to detect
       this flaw and avoid crashing by testing for null.  Also, the test was
       changed to use dates after 1970.

8. Unit Test
------------
8.1    Run [2] using the instructions found in the local README.txt.

9. Code Changes
---------------
Branch name:  c879942
q.class.link.arc
q.utils.arc
q.val.translate.arc
t.class.relate_assoc.h
t.class.relate_assref.h
t.class.relate_reflex.h
t.class.relate_simple.h
t.class.relate_subtype.h
t.smt.c
t.sys_events.h
t.sys_ilb.h
t.sys_nvs.h
t.sys_persist.h
t.sys_sets.c
t.sys_thread.h
t.sys_trace.h
t.sys_user_co.h
t.sys_xtumlload.h
specialized/q.mc3020.arc
specialized/sys.arc
specialized/t.sys_factory.h
specialized/t.sys_sets.h
specialized/t.sys_tim.c
HEAD:
model_compilers/mc3020/schema/sql/xtumlmc_schema.sql

End
---

$Log: dts0100879942.int,v $
Revision 1.1  2012/07/11 19:22:35  cstarret
job:dts0100879942
implementation of string return handling in C
