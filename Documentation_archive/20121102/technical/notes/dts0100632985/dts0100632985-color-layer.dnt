========================================================================

File:      $RCSfile: dts0100632985-color-layer.dnt,v $
Version:   $Revision: 1991 $
Modified:  $Date: 2012-11-02 14:29:43 -0700 (Fri, 02 Nov 2012) $

(c) Copyright 2007-2011 by Mentor Graphics Corp. All rights reserved.

========================================================================
This document contains information proprietary and confidential to
Mentor Graphics Corp., and is not for external distribution.
========================================================================

BridgePoint Project Design Note
Support coloring/layering in document generation

1. Abstract
-----------
This note describes the changes required to properly support coloring and
layering within generated documentation.

2. History
----------

3. Document References
----------------------
[1] ClearQuest DEI dts0100632985
[2] ClearQuest DEI dts0100538625 Request ability to color/shade/highlight model
    elements
[3] ClearQuest DEI dts0100801382 Hide model elements ("stealth mode")

4. Background
-------------
When color and layer support was added ([2],[3]) to the tool's graphical
support, documentation generation was not properly tested.  Upon testing it was
noticed that the documentation generation process would crash in certain
situations.

Rather than create a new issue, as part of this was done for [2] and [3] and the
remaining work was small, a general issue [1] was used.  Upon promotion of this
work the headline issue shall not be closed.

5. Analysis
-----------
Documentation generation shall include color and layer configurations.  This
include those that are inherited.

6. Design
---------
6.1 Store layer mapping using a DiagramEditPart rather than the Model_c

The original implementation for layers stored user defined layers within a map
that used the Model_c instance of an editor as the key.  There are two problems
with this approach, one is that a diagram can be created without an editor (like
with doc gen), and the other is that the same Model_c instance can be displayed
with two different instances of a DiagramEditPart.  The latter issue was causing
conflicts when a documentation generation diagram was reusing existing layers
for an open graphical editor.

To resolve this the map in UserDefinedLayer is modified to use a DiagramEditPart
instance as the key.  All places in the code that retrieve data from this map
are modified to use a DiagramEditPart instance as the key.

In io.image's Generator class a call to DiagramEditPart.deactivate() is added.
This allows removal of the temporary layers that were created during the image
generation process.

7. Design Comments
------------------

8. Work Required
----------------
See design section.

9. Unit Test
------------
- The following tests use the GPS Watch from getting started, before beginning
the tests make sure to delete the Analysis package that is directly under the
system.

_- Run documentation generation without opening any diagrams
_R The documentation generation completes successfully

_- Add color settings to some symbols, both shapes and connectors
_- Run documentation generation
_R The documentation generation completes successfully
_- Open the image for the diagram
_R The color settings are within the stored image

_- Add a hidden layer and put a shape and connector into it
_- Run documentation generation
_R The documentation generation completes successfully
_- Open the image for the diagram
_R The shape and connector are hidden from the stored image

_- Add a new layer (not hidden) and put a shape and a connector into it
_- Run documentation generation
_R The documentation generation completes successfully
_- Open the image for the diagram
_R The shape and connector are not hidden from the stored image

_- Add color settings to the UI Interface symbol
_- Run documentation generation
_R The documentation generation completes successfully
_- Open the images for each diagram (interface, interface reference, imported
   interface reference)
_R The interface, interface reference and imported interface reference all have
   the appropriate color settings in the generated image

_- Add the UI Interface symbol to a hidden layer
_- Run documentation generation
_R The documentation generation completes successfully
_- Open the images for each diagram (interface, interface reference, imported
   interface reference)
_R The interface, interface reference and imported interface reference are all
   hidden from the generated image

End
---

$Log: dts0100632985-color-layer.dnt,v $
Revision 1.2  2012/01/04 20:53:56  tlondon
Job: dts0100632985

Update according to review minutes

Revision 1.1  2012/01/04 18:41:48  tlondon
Job: dts0100632985

Add design and implementation notes

