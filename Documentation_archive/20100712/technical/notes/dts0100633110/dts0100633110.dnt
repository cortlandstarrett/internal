========================================================================

File:      $RCSfile: dts0100633110.dnt,v $
Version:   $Revision: 804 $
Modified:  $Date: 2010-07-12 08:36:39 -0700 (Mon, 12 Jul 2010) $

(c) Copyright 2007-2010 by Mentor Graphics Corp. All rights reserved.

========================================================================
This document contains information proprietary and confidential to
Mentor Graphics Corp., and is not for external distribution.
========================================================================

BridgePoint Project Design Note
Define a team-wide test procedure for the BridgePoint spring2010 release

1. Abstract
-----------
Prior to the spring2010 BridgePoint release a team-wide test is being run.  
This note describes this test.

2. History
----------

3. Document References
----------------------
[1] ClearQuest DEI dts00100633110
[2] dts00100633110.ant
    This issues analysis note.
[3] ClearQuest DEI dts0100656045
    Fix JUnit tests - Parent issue
[4] ClearQuest DEI dts0100631408
    Support Package namespaces
[5] ClearQuest DEI dts0100675805 
    Create a hook in the BridgePoint junit tests to update the SMA QA test system 
[6] <cvs>/Documentation/internal/process/Procedures/qa_procedures.txt
    Procedures defined for BridgePoint Quality Assurance Roles
      
4. Background
-------------
See analysis note [2]

5. Analysis
-----------
See analysis note [2]

6. Design
---------
6.1 Seed the SMA QA system with a group of tests.
    This issues' analysis note specifies that there will be a group of tests 
    defined that "seed" the SMA QA system [2 § 6.4].  The following section
    define these tests.
    
    The test system shall be seeded with tests that are in the areas of focus
    for this release.  Additionally, all existing unit tests shall pass in this 
    release [3].

6.1.1 Verifier
AUTOMATE THE EXISTING MODEL COMPILER TEST SUITE - This can be done for less
effort than the time that will be spent _manually_ running them over and over
on this test cycle. ADD NEW MODELS CREATED TO TEST THE BELOW FEATURES TO THE
SAME INFRASTRUCTURE (this requirement does not apply to UI specific tests).
6.1.1.1 Verifier breakpoints
  - Breakpoints can be globally enabled and disabled.
  - Breakpoint counts operate correctly.
  - Breakpoints are moved correctly when OAL is edited above, below and at the
    breakpoint position.
  - Breakpoint state is remembered over a tool restart.
6.1.1.2 Verifier stepping
  - Stepping over a breakpoint works when the breakpoint is set on an interface
    message invocation.
  - Stepping over a breakpoint works when the breakpoint is set on a signal
    invocation.
  - Stepping over a breakpoint works when the breakpoint is set on the first
    line of interface message.
  - Stepping over a breakpoint works when the breakpoint is set on the first
    line signal body.
  - Stepping over a breakpoint works when the breakpoint is set on the first
    line of a state action assigned to a signal.
  - Stepping over an interface message invocation.
  - Stepping over a signal invocation.
  - Stepping into an interface message invocation.
  - Stepping into a signal invocation.
  - Stepping out of an interface message invocation.
  - Stepping out of a signal invocation.
6.1.1.3 Verifier data inspection
  - Component References are displayed correctly.
  - Instance References are displayed correctly.
  - Fixed length Arrays show correctly.
  - Variable length Arrays show correctly.
  - Arrays in attributes.
  - Arrays in transients.
6.1.1.4 Using spotlight
  - Fill spotlight with a very large number of elements, evaluate performance.
  - Check items can be added and removed from the spotlight correctly.
6.1.1.5 Simulated Time
  - Create a model with a thread of control that does not complete, check that
    it does not work correctly but is at least _graceful_.
6.1.1.6 verifier launching
  - Evaluate time to bring up the launch dialog with different sized models in
    the workspace.
  - Check that nested components can be selectively launched.
6.1.1.7 Stress test for threading
  - Run RATR and Looper, this hasn't been done in a while.
6.1.1.8 Coverage Test
        component/interface/port/message features/etc...  This test simply
        assures that all executable elements are exercised. Look at Component
        Syntax Test to see if it can be adapted to be executable, it should at
        least be useful as a template starting point. Add delegation tests.

6.1.2 Generic Packages
6.1.2.1 Enhance the cut/copy/paste tests to handle EP_PKG.
6.1.2.2 Enhance the als.oal.test model to do the same testing it does now, but 
      with the action homes under EP_PKG instead of in specialized packages.
6.1.2.3 
      Create a test that starts with a specialized package model, and uses 
      copy/paste to migrate the model to a generic package model. 
      Execute the model and assure it still functions the same way as it did
      in the specialized package implementation.  Execute the model.
6.1.2.4
      Assuming we decide we want to keep it, test the Generic Package upgrade
      checkbox on the model Import dialog with combinations of specialized
      packages nested within other packages and legacy generic packages nested
      within specialized packages etc.
      
6.1.3 Graphics

6.1.4 Useability
6.1.4.1 
    Create a test that requires the Tester to create a model based on DocGen 
    output and execute the model.
6.1.4.2
    Create a test that starts with an existing model that uses a lot of 
    bridges.  Replace the Bridges with components and interfaces. Execute 
    the model.

6.1.5 Namespace Support
      The tests for this are defined in the design note [4] for this issue.
      These tests shall be entered into the SMA QA system.
      
6.1.6 Revision control integration
6.1.6.1 CVS checkout/checkin/rename 
        Note: this and much more is done in Junit we just need to refer to it.  
        See [§s6.2].
6.1.6.2 SVN checkout/checkin/rename
6.1.6.3 ClearCase checkout/checkin/rename
6.1.6.4 Serena checkout/checkin/rename

6.2 Add CQ test issues for the automated tests already being run.
    BridgePoint has thousands of tests organized by Junit into test classes.
    To help the outside world see what our automated tests are already testing, we 
    shall define tests for each of the BP Junit test class.  Each of these
    tests shall have an appropriate description and component classification.
    When the unit tests run, the SMA CQ Junit hook [5] will cause the status
    of the test to be updated.

6.3 Recover manual tests from development notes and bugzilla.  
    These manual tests are regression tests that have been essentially lost.
    These need to be examined and migrated into the SMA QA system. 
    A separate issue shall be raised for this task, is is not required for this
    test cycle.

6.4 Implement the queries specified in [6 § 6.1]
6.4.1  Failing for Version
       Used to find which tests are marked as failing for a release entered by 
       the user.  
       
       product=="SMA QA - BridgePoint"          and 
       version_reported.contains(<version>)    and 
       state==assigned                          and 
       version_validated.does_not_contain(<version>)       
       
       
6.4.2  Passing for Version
       Used to find which tests are marked as passing for a release entered by 
       the user.
       
       product=="SMA QA - BridgePoint"          and 
       version_reported.contains(<version>)    and 
       state==assigned                          and 
       version_validated.contains(<version>)       
       
6.4.3  Ready To Run For Version 
       Used to find which tests are marked as needing to be run for the
       version.
       
       product=="SMA QA - BridgePoint"          and 
       state==assigned                          and 
       version_reported.doe_not_contain(<version>) 
       
6.4.4  All Tests  
       Lists all the tests with their component and test result status for all versions
       run.
       
       product=="SMA QA - BridgePoint" 
       
6.4.5 Tests to Triage 
      List Issues that are in the submitted state      
      
       product=="SMA QA - BridgePoint"          and 
       state==submitted                          
       
6.4.6 Information Requested 
      A list of tests in the "Information Requested" state.  As long as a test 
      in the Information Requested state, it will not be run.
      
       product=="SMA QA - BridgePoint"          and 
       state==information_requested
                                 
6.4.7 Postponed 
      A list of tests in the "Postponed" state.  As long as a test is in the 
      postponed state, it will not be run.

       product=="SMA QA - BridgePoint"          and 
       state==postponed
    
7. Design Comments
------------------
None

8. Work Required
----------------
Specified in the design section.

9. Unit Test
------------
There is no test for this issue.

End
---

$Log: dts0100633110.dnt,v $
Revision 1.10  2010/04/15 15:14:03  rmulvey
job:dts0100633110
References to version_submitted were changed to version_reported which is the correct name of this field in ClearQuest.

Revision 1.9  2010/03/24 15:28:42  rmulvey
job:dts0100633110
Updated the qa_procedures document to account for review observations and recent lessons learned.

Revision 1.8  2010/03/18 11:49:45  campbell
Job: dts0100633110
Added Verifier test seeds.

Revision 1.7  2010/03/17 22:07:57  rmulvey
job:dts0100633110
Added a missing reference

Revision 1.6  2010/03/17 22:05:38  rmulvey
job:dts0100633110
Introduced the note with some tests to seed the system.

Revision 1.5  2010/03/17 22:00:42  rmulvey
job:dts0100633110
Introduced the note with some tests to seed the system.

Revision 1.4  2010/03/17 21:59:34  rmulvey
job:dts0100633110
Introduced the note with some tests to seed the system.

Revision 1.3  2010/03/17 21:45:02  rmulvey
job:dts0100633110
Introduced the note with some tests to seed the system.

Revision 1.2  2010/03/17 21:25:33  rmulvey
job:dts0100633110
Introduced the note with some tests to seed the system.

Revision 1.1  2010/03/17 21:00:52  rmulvey
job:dts0100633110
Introduced the note with some tests to seed the system.

