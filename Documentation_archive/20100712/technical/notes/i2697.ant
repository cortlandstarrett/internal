========================================================================

File:      $RCSfile: i2697.ant,v $
Version:   $Revision: 804 $
Modified:  $Date: 2010-07-12 08:36:39 -0700 (Mon, 12 Jul 2010) $

(c) Copyright 2007-2010 by Mentor Graphics Corp. All rights reserved.

========================================================================
This document contains information proprietary and confidential to
Mentor Graphics Corp., and is not for external distribution.
========================================================================

BridgePoint Project Analysis Note
Wire messages directly to model elements

1. Abstract
-----------
This note specifies the requirements for wiring signals directly to a recipient
class state machine and interface operations directly to classes. 

2. History
----------
   final - i2697-061107-01.rvm

3. Document References
----------------------
[1] Bugzilla item i2697
    http://tucson.wv.mentorg.com//bugzilla/show_bug.cgi?id=2697

4. Background
-------------
We originally thought that writing OAL in an interface reference would give the
user a great deal of flexibility on how a signal was preprocessed before
delivery. However, if incoming signals and their data are explicitly handled in
OAL, it is very difficult for a model compiler to avoid copying data values.
Since some of these data items can be very large, the cpu overheads of even one
copy will be unacceptable. This note describes an alternative in addition to OAL
that allows direct mapping of messages to an appropriate modeled handler
element.

5. Analysis
-----------
All messages shall be serviced in exactly one place in the model, synchronous
messages shall be handled by importing the message as a class operation.
Asynchronous messages shall be handled by importing a signal into a class state
machine. Once a message is assigned to a model element, it is no longer
available for assignment elsewhere.

Unmapped messages shall continue to allow the user to specify OAL. The OAL for
mapped messages shall be persisted, but shall be invisible to the user and shall
be ignored by Verifier and the model compilers.

5.1 Asynchronous message handling
Assignment of signals shall be limited to class state machines only, since
instance state machines require resolution to an instance, not possible at the
domain boundary. The user shall right click on a transition and select the
option, 'Assign Signal ...'. A wizard shall appear with a droplist allowing the
user to select from the list of interfaces referred to on the formalized model
boundary. Once an interface is selected, the user shall see a droplist that
shows the list of currently unassigned signals declared on that interface.
Assignment of the same signal to multiple transitions of a class state machine
shall be supported, so signals are only suppressed from this list if they are
consumed on another class state machine.

Access to data carried by a signal shall be provided by the existing 'rcvd_evt'
and 'param' keywords. Both keywords have exactly the same behavior. Because
signals are edited and revision controlled elsewhere, no attempt shall be made
to filter signals in the selection based on the currently selected state and the
data the signal carries. Instead, if a signal does not bear an argument value
referred to from a state action, the parser shall report an error. Where events
and signals are mixed on transitions into the same state, argument values with
the same name must also match in terms of the argument type.

Double clicking an assigned signal in the Model Explorer shall open the class
state machine to which the signal has been mapped.

A transition that has been assigned to a signal shall contribute an
'Unassign Signal' menu entry. Selecting this shall revert the transition to an
unassigned state. Removal of all references to a signal in a state machine shall
cause the signal to revert to an unassigned state. Any OAL previously typed by
the user shall once again become accessible. 

5.2 Synchronous message handling
The user shall right click on a class and select the option,
'Assign Interface Operation ...'. As for signals, a wizard shall appear with a
droplist allowing the user to select from the list of interfaces referred to on
the formalized model boundary. Once an interface is selected, the user shall see
a droplist that shows the list of currently unassigned interface operations
declared on that interface.

As might be expected, access to interface operation argument values shall be via
the 'param' keyword.

Double clicking an assigned interface operation shall open the appropriate
activity editor. When an interface operation is assigned to a class, any OAL
previously typed by the user is not lost, though the user may wish to rework it
as a result of the reassignment.

Deleting the interface operation from a class removes it from the class, but
does not delete the interface operation or its OAL. The interface operation
reverts to being unassigned and is available for mapping to another class if the
user so wishes.

6. Work Required
----------------
6.1 Modify the metamodel to capture and persist message mappings.
6.2 Add new menu entries for 'Assign Signal ...' and
    'Assign Interface Operation ...'
6.3 Add new wizards for selecting the interface and showing and selecting from
    the message list.

7. Acceptance Test
------------------
7.1 All existing J-Units must pass.
7.2 Allow an asynchronous message to be assigned to multiple transitions on a
    class state machine.
7.3 Assignment to transitions on an instance based state machine is not
    possible.
7.4 Allow a synchronous message to be assigned to a class. The assigned message
    dispays like a class operation but with a different icon in the Model
    Explorer.
7.5 Missing argument data is flagged by the parser for both synchronous and
    asynchronous messages.
7.6 Mismatched type data (asynchronous messages only) is flagged by the parser.

End
---

$Log: i2697.ant,v $
Revision 1.6  2010/01/05 04:29:31  kbrown
job:dts0100644853
Batch commit of copyright change from 2009 to 2010 for BP CVS projects.

Revision 1.5  2009/01/01 23:13:07  rmulvey
Job:4060
Batch promotion of copyright changes from Review-i4060 and Review-i4060-01.

Revision 1.4.6.1  2008/12/31 16:10:10  rmulvey
Job:4060
This is a batch commit of 2009 copyright changes to branch Review-i4060.  This includes the
report that outlines all changes made (before/after for each line changed).  This report is found here: <cvs>/Documentation/internal/test_results/R2_1_2/i4060/update-copyright-results.txt.

Revision 1.4  2007/06/11 21:57:37  campbell
Job:2697
Address review observations.

Revision 1.3  2007/06/11 20:29:37  campbell
Job:2697
Updated.

Revision 1.2  2007/06/11 18:42:36  campbell
Job:2697
CXlarify that OAL feature shall still be supported. Clarify what happens to previously typed OAL. Clarify how messages get unassigned from model elements.

Revision 1.1  2007/06/11 18:12:14  campbell
Job:2697
Introduced.

