========================================================================

File:      $RCSfile: dts0100631029.ant,v $
Version:   $Revision: 804 $
Modified:  $Date: 2010-07-12 08:36:39 -0700 (Mon, 12 Jul 2010) $

(c) Copyright 2007-2010 by Mentor Graphics Corp. All rights reserved.

========================================================================
This document contains information proprietary and confidential to
Mentor Graphics Corp., and is not for external distribution.
========================================================================

BridgePoint Project Analysis Note
Remove need to formalize a Component to a Domain


1. Abstract
-----------
This note discusses implementation alternatives to removing the need for a three
step procedure for creating a component containing UML.


2. History
----------


3. Document References
----------------------
[1] ClearQuest DEI dts0100631029 - Remove need to formalize a component to a
    domain


4. Background
-------------
Currently, to create a component whose behavior is defined by a UML model, the
user must:

1) Create a Domain.
2) Create the Component
3) Formalize the Component to the Domain.

Users find this confusing and difficult. Creating a 'UML Component' should be as
easy as drawing any other symbol.


5. Analysis
-----------
There is one significant barrier to realizing this goal. Currently, a Component
can have one of two different diagram types under it (i.e. when the user double
clicks or otherwise opens up the symbol). The current design takes the position
that the default behavior is to open up into a component diagram.

A new simpler design needs to be as transparent as possible, and allow both
Component and xtUML Domain level diagrams to be easily created.

The following alternatives were explored:

- Allow free mixing of Classes and Components on the same diagram.
- Allow mixing Subsystem, Data Type, External Entity and Function packages with
  Components.
- Completely remove specialized packages.
- When a component is empty, provide the union set of buttons from both the
  Component and Domain Package diagrams.
- Present the user with a component type chooser dialog when the Component is
  created.
- Present the user with a component type chooser dialog when the Component is
  opened for the first time.

These ideas are discussed in more detail below:


5.1 Free mixing of Classes and Components
Allow the free mixing of Classes and Components on the same diagram. Subsystem,
Datatype, External Entity and Function packages can all be placed on the same
diagram with Components. In addition, classes can interact with 'sibling'
components (i.e. those defined on the same diagram as the root (e.g.) subsystem
package). This interaction will be analogous to way in which the components
currently interface with each other.

5.1.1 Advantages
This avoids the problem of diagrams having to change style [5.4, 5.5, 5.6] by
allowing the same diagram to support both Component-like and Domain-like
behavior. To support this, classes will have to support interface references.
Since this is part of the UML 2.0, BridgePoint would be seen to support another
part of the standard.

5.1.2 Disadvantages
To provide interface support for classes is significantly additional complexity
for the tool. This translates into significant engineering resource to create
and maintain this feature. One example of the kind of work that needs to be done
is that with classes and their subsystem containers, there is currently no
convention of input output balancing like there is with Components where we have
interface references, ports and delegation concepts. For example, how would we
present to the user the fact that a class nested three subsystems deep interacts
with a component at the top level? To address this we either need to; allow
Components to be imported into a Class Diagram and wired there, or provide the
same Interface balancing behavior as is currently provided for Components. Given
that these two approaches provide very different amounts of information to the
user it would seem that significant marketing effort is required to discover the
requirements. This is just one question that occurs. There would doubtless be
many others.


5.2 Mix Domain level package types with Components
Allow mixing Subsystem, Datatype, External Entity and Function packages with
Components. This proposes similar behavior to [5.1], except that the classes
themselves will not have visibility of sibling components. Thus, functionality
can be delegated from the root component (the parent of the hybrid diagram) to
a component (Component package-like) or to a class (xtUML Component-like).
However, interaction between the Classes defined in the component and the
Components defined in the component is not allowed in this proposal.

5.2.1 Advantages
Similar advantages to those above [5.1.1], but with considerably less
engineering complexity.

5.2.2 Disadvantages
May offer reduced complexity, but it is still a significant internal re-
engineering of the upper layers of the tool. Some meta-model rework will be
inevitable. As with most meta-model changes, data upgrade code will also likely
be needed. The inability of classes to interact with sibling Components seems a
slightly arbitrary limitation, especially against a background of its being
allowed in the UML 2.0 standard. Additional documentation work will be needed to
explain the limitation clearly.

These disadvantages need to be seen against the background of the motivation for
this change, that the user can transparently create Component or Domain Package
diagrams. The functionality is really intended to allow the user to create one
diagram type or the other transparently. Nevertheless, hybrid diagrams must be
fully supported since the user can create them.


5.3 Completely remove specialized packages.
This proposal provides a complete rework of the BridgePoint packaging mechanism.
It removes all specialized packages, so that any symbol may be freely mixed in
any package.

5.3.1 Advantages
Completely avoids the problem of diagrams changing style [5.4, 5.5, 5.6] by
having only one style of diagram. From the users perspective, moves BridgePoint
much closer to UML 2.0.

5.3.2 Disadvantages
A very significant rework that is sure to require significant engineering
resource. Unlike [5.1] it is likely to simplify the meta-model and so does not
have the additional longer term maintenance overhead, and may even contribute
some gain in this area.

This increased flexibility increases the probability that it will be possible to
create models which either:

 - cannot be translated or
 - require significant model compiler complexity to translate or
 - translate to source sets which do not compile

BridgePoint currently prevents these scenarios by being very prescriptive about
what symbols and diagrams can be drawn in what places in the model.

Given the likely magnitude of the rework both to builder and to the model
compilers, it is questionable if it is not more cost effective to port
BridgePoint to the EMF UML 2.0 plugin metamodel.


5.4 Provide both sets of tool buttons when empty
When a component is empty, provide the union set of buttons from both the
Component and Domain level diagrams. When the first symbol is drawn, remove
those symbol tools that are not compatible with the symbol just added by the
user.

5.4.1 Advantages
Minimizes the amount of tool rework needed by keeping almost all of the existing
meta-model design. No data upgrade required.

5.4.2 Disadvantages
Not completely transparent to the user, the diagram must change style when the
first symbol is added to take on the style of the diagram the accepts the symbol
just added. By extension, the diagram must change style again when the last
symbol is removed, to allow for the user backing out and changing their mind
about what style of diagram they wish to use.


5.5 Allow the user to choose when Component is created
Present the user with a dialog when the Component is created. The dialog will
allow the user to specify which type of diagram they want the component to have.

5.5.1 Advantages
As for [5.4.1].

5.5.2 Disadvantages
Even more intrusive to the user than [5.4]. This also has the significant
disadvantage that we are forcing the user to make a choice very early on that
they may not yet have enough information to decide on. Also, it is not
immediately obvious how we could make it reversible. In other words, what
happens if the user decides they want a UML type Component but then later
decides that they want to change to a solution that involves UML modeling at a
lower level of Component?

5.6 Allow the user to choose when Component first opened
Present the user with a dialog when the Component is opened for the first time
or when the component contains no symbols on the diagram below. The dialog will
allow the user to specify which type of diagram they want the component to have.

5.6.1 Advantages
As for [5.4.1]. Leaves the decision point slightly later than [5.5]. If the user
backs out all the symbols in the underlying diagram (Component/Domain) then the
dialog can be presented again, thereby enabling back tracking.

5.6.2 Disadvantages
Explicit user decision still required very early in the process. A cheat sheet
or other help mechanism should be budgeted for if this proposal is accepted.


6. Work Required
----------------
Once a preferred alternative or alternative short-list is selected, this work
will be split into a number of smaller tasks each tracked by a separate issue.
This section will capture the high level tasks and specify the individual
issues.


7. Acceptance Test
------------------
This section intentionally left empty at this time pending discussions on the
alternatives presented.

End
---

$Log: dts0100631029.ant,v $
Revision 1.4  2010/01/05 04:31:34  kbrown
job:dts0100644853
Batch commit of copyright change from 2009 to 2010 for BP CVS projects.

Revision 1.3  2009/11/02 12:06:15  campbell
Job: dts0100631029
Minor changes. Added proposal that actual work be split across multiple issues.

Revision 1.2  2009/11/02 11:08:58  campbell
Job: dts0100631029
Added more data points.

Revision 1.1  2009/11/02 10:19:07  campbell
Job: dts0100631029
Introduced.

