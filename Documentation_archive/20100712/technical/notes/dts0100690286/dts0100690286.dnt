========================================================================

File:      $RCSfile: dts0100690286.dnt,v $
Version:   $Revision: 804 $
Modified:  $Date: 2010-07-12 08:36:39 -0700 (Mon, 12 Jul 2010) $

(c) Copyright 2007-2010 by Mentor Graphics Corp. All rights reserved.

========================================================================
This document contains information proprietary and confidential to
Mentor Graphics Corp., and is not for external distribution.
========================================================================

BridgePoint Project Design Note
Random behavior after break/resume

1. Abstract
-----------
In the supplied multi-component model, setting a breakpoint and resuming would
cause random error messages after just a few resumes and re-breakpoint hits.
This note describes how this will be addressed.

2. History
----------

3. Document References
----------------------
[1] ClearQuest DEI dts0100690286 - Random behavior after break/resume.
[2] Clearquest DEI dts0100654483 - Verifier must check xtUML rules.

4. Background
-------------
The model in question is the GPS Watch demo model which contains four components
collaborating as wired up component references. They use timers extensively. The
problem occurs with both timer modes but is easier to hit with simulated time,
since the model behavior is more intense.

5. Analysis
-----------
During execution, each component has its own thread. During resume, the first
statement is executed as a call to Step Over so as to not re-break on the break-
point. During this step over execution happens in the UI thread, not the
component execution thread. Normally, this is not a problem, but during debug,
it was seen that when the problems occurred, two threads (the component thread
and the UI thread) were both attempting to execute different statement blocks in
the same model at the same time. Verifier was never designed to work like this
and so the random problems are seen as the two threads interfere with each
others execution context.

This phenomenon was eventually traced to the Timer. When the user suspends
execution, a call to TIM.suspendTime() is made. This ensures that the timers are
inactive during the suspended state. It was observed that no equivalent call was
made when the suspend happens as a result of a breakpoint hit or other run time
reason.

The effect of this was that timers expire more frequently and in component
instances (execution engines) are notified when they should not be. This leads
to the component instances getting into a state where they assume that an inter-
component call has completed when it has not. This situation causes exactly the
range of symptoms observed.

Moreover, inserting a call to suspendTime() into the BPThread run loop at the
point where it is about to suspend the thread removes all unwanted symptoms of
this problem.

6. Design
---------
6.1 Root fix
A call to TIM.suspendTime() is made immediately above the call to fee.wait() in
the run loop of the BPThread class. This suspendTime call is wrapped in an if
test so that the call is made only in the event that the wait state is being
entered as a result of execution being suspended. This prevents the timer infra-
structure from running and stops inappropriate notifications being sent to
suspended components. Since Resume is always performed under user control, no
analogous call to TIM.resumeTime() is needed since they are already all present
where they are required.

6.2 Additional changes
As part of this work, some other safety startup code was added to make startup
more deterministic.

6.2.1 Wait for targets to start
The startup sequence is changed so that all other components (the ones that had
not hit a breakpoint) are started before the startup sequence is entered for the
current component. 'Current' for the purposes of this note means the component
whose stack contains a user selected entry. A method, 'waitForTargetsToStart()'
is added. This calls on to a method in BPDebugTarget. This is done because the
latter class has visibility of all component instances in a simulation. A new
method, threadIsWaitingToResume() is added in this class to do the actual work.
This method enters a while loop that ensures all other components are fully
started before returning. For graceful fault tolerance, a simple timeout is
included and the method returns false if all the targets did not start. The
timeout is determined by a user preference set on the same preference page as
the Verifier runtime Audit preferences[2]. The default value is 5 seconds, which
is far longer than it should ever take most models to resume execution.

The 'waitForTargetsToStart()' method is called from the 'BPThread.resume()'
method. It calls onto threadWaitingToResume and returns the success as a result
back to resume. If it returns true, resume goes on to start the current thread
and resume the timer infrastructure. If false, it does nothing more and places
an entry in the error log. This entry shall read: "Resume Failure. Component did
not become ready in time. The timeout may be extended in the BridgePoint
preferences at Window > Preferences > BridgePoint > Verifier".

6.2.2 Wait for inter-component signaling to complete before launching
BPThread.internalResume() has code added that loops while the top stack frame
is not the one the user selected. A similar timeout and error log entry is
set up here in case the resume code cannot get in.

6.2.3 Note that the changes for this issue will be combined with the branch for
[2] to facilitate the addition of the timeout preference.

7. Design Comments
------------------
7.1 Virtual Machine locking.
While investigating this issue, it was noticed that errors were being reported
by the implementation for the VM class to the effect that expected methods were
not being found. Examination of the error messages showed that this was being
caused by multiple components (and hence threads) trying to make different
bridge calls at the same time. Because data values are passed one at a time,
the values were getting mixed up between different threads.

7.1.1 One solution is to add a lock associated with the stack instance in the VM
implementation, Vm_c. However, this has the risk that any inter-component
messaging made to obtain values to pass to a bridge call will cause deadlock.
This is guaranteed to happen when the called message itself makes a bridge call.

7.1.2 Another solution was considered where an instance of the simple stackframe
like structure, Vm_c.TgtInfo is returned to the Bridge invocation OAL context,
where it could be used to build up the external call data privately for each
thread. Unfortunately, this won't work because the invocation code has to be
prepared to exit before completion if a new stack frame context is required (as
is the case where an argument value is itself furnished by a synchronous call).
If the OAL context code exits, the TgtInfo value would be lost without returning
it back up the tree, further adding to execution complexity.

7.1.3 The selected solution is to keep a map of threads to stacks in the
realized VM. The simple stack structure, Vm_c.s currently stores instances of
Vm_c.TgtInfo. This is used to support the case where one Bridge call is supplied
argument data by another bridge call, which requires the Vm_c implementation to
be reentrant. The solution is to replace the current static stack and obtain
it instead from a map keyed by the Thread identity. This enables each thread to
enjoy concurrent access to the Bridge invocation mechanism. A simple allocation
mechanism will create a new stack instance if none is found for a new Thread. No
deallocation is required since there will never be more than a small number of
threads.

8. Work Required
----------------
Fully described in the design.

9. Unit Test
------------
9.1 Run the model in the issue:
_- Download \\wv\dfs\BridgePoint\field_data\dts0100690286\GPS.zip
_- Execute the Component named 'System' and all its contents
_- Set the breakpoint at line 3 of the workout timer3: tick transition action
_R Execution stops
_- Click resume
_R No runtime errors are reported in the console
_R No Null Pointer or other exceptions are reported in the error log
_R Execution stops again
_- Click resume over and over
_R No runtime errors are reported in the console
_R No Null Pointer or other exceptions are reported in the error log
_R Execution stops again
_- Uncheck the breakpoint enable or toggle it off altogether
_- Click resume
_R No runtime errors are reported in the console
_R No Null Pointer or other exceptions are reported in the error log
_R Execution continues

9.2 Existing Unit tests
Existing unit tests must pass.

End
---

$Log: dts0100690286.dnt,v $
Revision 1.5  2010/06/08 11:04:01  campbell
Job: dts0100690286
Address review observations.

Revision 1.4  2010/06/07 20:14:35  campbell
Job: dts0100690286
Introduced.

Revision 1.3  2010/05/20 18:51:20  campbell
Job: dts0100690286
Ready for review.

Revision 1.2  2010/05/20 18:34:15  campbell
Job: dts0100690286
Updated with more design.

Revision 1.1  2010/05/20 17:56:28  campbell
Job: dts0100690286
Introduced.

