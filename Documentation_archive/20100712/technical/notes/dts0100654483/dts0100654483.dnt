========================================================================

File:      $RCSfile: dts0100654483.dnt,v $
Version:   $Revision: 804 $
Modified:  $Date: 2010-07-12 08:36:39 -0700 (Mon, 12 Jul 2010) $

(c) Copyright 2007-2010 by Mentor Graphics Corp. All rights reserved.

========================================================================
This document contains information proprietary and confidential to
Mentor Graphics Corp., and is not for external distribution.
========================================================================

BridgePoint Project Design Note
Verifier must check relationship conditionality and multiplicity rules.

1. Abstract
-----------
This note describes the design used to implement checking instance populations
against the modeled cardinality rules.

2. History
----------

3. Document References
----------------------
[1] ClearQuest DEI dts0100654483 - Verifier must check xtUML rules. For example
    Relationship condinationality and multiplicity.
[2] cvs://Documentation/internal/technical/notes/dts0100654483.ant
[3] svn://trunk/Models/Test/Runtime Audit Test

4. Background
-------------
See [2].

5. Analysis
-----------
See [2].

6. Design
---------
The design closely follows the Work Required section of [2].

7. Design Comments
------------------
Some rework of the select, relate, unrelate and delete execute operations was
undertaken to ensure that the needed instance handles were in scope at the point
at which the audits are carried out. In each case the abstract logic was
unchanged.

8. Work Required
----------------
Fully described above and in [2].

9. Unit Test
------------
These tests are in the form of an executable model[3]. Check out the model and
run Utilities/runAllTests.

9.1 Degrees of Freedom
The degrees of freedom are:

9.1.1 Statement being performed:
Select, Relate, Unrelate, Delete

9.1.2 Which statements are selected for audit:
Select, Relate, Unrelate, Delete

9.1.3 Severity level:
Ignore, Warning, FATAL

9.1.4 Association Conditionality
Conditional, Unconditional

9.1.5 Association Multiplicity
One to One, One to Many, Many to Many

9.1.6 Link Class Multiplicity
This is the cardinality shown on the broken associative line between a link
class and the association it is attached to. One shows no decoration on the
class diagram, while Many shows an associated '*'.
One, Many

9.1.7 Association type
Simple, Associative, Subtype-Supertype

9.1.8 Reflexive
Reflexive, Non-Reflexive

9.1.9 Instance Role
The instance being traversed from or deleted is participating as a regular
related instance or a link instance (instance of the link class).
Non Link Class Instance, Link Class Instance

9.1.10 Relation direction
This is the direction that the initial test population instances were related;
i.e. relate a to b across R1 is 'Forward' and relate b to a across R1 is
'Reverse'.
Forward, Reverse

9.1.11 Traversal direction (not relevant to Delete)
This is the direction that the test statement does the relation or traversal.
For relate and unrelate the traversal direction is analogous to 9.1.10; i.e.
'(un)relate a to b' is forward and '(un)relate b to a' is reverse. For select,
A->B is forward and B->A is reverse.
Forward, Reverse

9.1.12 Formalization
Whether or not the association being traversed in the test is formalized or not;
i.e. whether you can see referential attributes in the classes at either end.
Formal, Informal

9.1.13 Link Population
Whether the setup instance population across a given link already contains
instances or not.
Empty, Not Empty

9.1.14 Existing Link
Whether the setup instance population across a given link already contains an
instance for the instance pairs being related (as opposed to 9.1.13 where the
existing instances link other instance pairs than the ones under test). Assuming
Conditionality and Multiplicity rules are met (as dictated by the other
combinations of test case), 9.1.13 would not produce an error, whereas with this
variation it would always produce an error.
No link, Link already exists

9.1.15 Test case reduction
The code which ignores, reports or halts (DOF 9.1.3) is repeated in 6 places.
All test cases pass through this code one way or another. Accordingly, we do not
need to factor these tests for every case. Instead, we can create 18 tests that
exercise this behavior and use the Warning state for all other tests to confirm
that the case was detected.

Similarly, the cases where the alternate statement types are selected (9.1.2)
can be covered with 8 simple tests that prove for each statement that behavior
is changed when the relevant selector is changed and not when a different
selector is changed.

The Instance Role (9.1.9) and Link Class Multiplicity variants are only a degree
of freedom for 1 third of the tests (those that involve an Associative
association).

Even after reduction, there are still several thousand combinations. Several
complementary basic cases will therefore be selected and an issue will be raised
to get 100% coverage.

9.2 UI
9.2.1 Audit can be enabled and disabled
Appearance, Persistence between Launcher sessions, Persistence between tool
sessions.

9.2.2 Selectors are grayed when Audit is disabled
Appearance, Persistence between Launcher sessions, Persistence between tool
sessions.

9.2.3 All selectors offer choice of Ignore, Warning, FATAL
Appearance, Persistence between Launcher sessions, Persistence between tool
sessions.

End
---

$Log: dts0100654483.dnt,v $
Revision 1.5  2010/06/11 15:17:13  campbell
Job: dts0100654483
Address review issues.

Revision 1.4  2010/05/19 14:11:23  campbell
Job: dts0100654483
Extend test reduction section.

Revision 1.3  2010/05/19 11:57:09  campbell
Job: dts0100654483
Add test reduction section.

Revision 1.2  2010/05/19 11:08:45  campbell
Job: dts0100654483
Cosmetic changes, ready for review.

Revision 1.1  2010/05/19 10:37:02  campbell
Job: dts0100654483
Introduced.

