========================================================================

File:      $RCSfile: dts0100640143.dnt,v $
Version:   $Revision: 804 $
Modified:  $Date: 2010-07-12 08:36:39 -0700 (Mon, 12 Jul 2010) $

(c) Copyright 2007-2010 by Mentor Graphics Corp. All rights reserved.

========================================================================
This document contains information proprietary and confidential to
Mentor Graphics Corp., and is not for external distribution.
========================================================================

BridgePoint Project Design Note
Breakpoints in OAL on creation transitions are disregarded

1. Abstract
-----------
When debugging a Model the verifier, Breakpoints in OAL  on
"creation transitions" do not work. 
Breakpoints in OAL on other transitions seem to work.

2. History
----------
None.

3. Document References
----------------------
[1] ClearQuest DEI dts0100640143 - Breakpoints in OAL on 
creation transitions are disregarded.
[2] CVS/com.mentor.nucleus.bp.core/ooaofooa.xtuml
[3] ClearQuest DEI dts0100640143 - Breakpoints in OAL on 
creation transitions are disregarded/Associated File Path
\\wv\dfs\bridgepoint\field_data\dts0100640143\
creation_trans_sr2261307551.zip
4. Background
-------------
None.

5. Analysis
-----------
5.1 Introduction
	
	In core Meta-Model [2], Any breakpoint can be classified into
	OAL Breakpoint, Event Breakpoint, State Breakpoint. This is 
	shown in BreakPoint.xtuml, where the inheritance relation 
	R3102, disjoint complete, relates between the parent class 
	"Breakpoint" as BP_BP and its children "oal Breakpoint" as 
	BP_OAL, "Event Breakpoint" as BP_EV and "State BreakPoint" 
	as BP_ST.  
    
    The Breakpoint can be held by different activity types in 
    OAL language. They are FUNCTION, BRIDGE, STATE, 
    OPERATION,MDA, REQ_OPERATION, PROV_OPERATION, REQ_SIGNAL, 
    PROV_SIGNAL, TRANSITION.
    CREATION_TRANSITION is one of the OAL activities that can hold
	a break point.
	In the Core Meta-Model [2],ooaofooa.xtuml, CREATION_TRANSITION is 
	related with TRANSITION through the relation R507, in
	state_machine.xtuml . This is an inheritance relation, 
	disjoint complete, relates between the parent class "Transition" as
	SM_TXN, and its children "No Event Transition" as SM_NETXN, 
	"New State Transition"as SM_NSTXN and 
	"Creation Transition" as SM_CRTXN.

5.2 OAL BreakPoint Identification process in java code
     
     By pressing Right-click on any OAL line and choose 
     "Toggle BreakPoint" an action is triggered. This action is handled 
     by toggleLineBreakpoints() function in BPLineBreakpointAdapter.java
     class.
	 Function toggleLineBreakpoints() is responsible for
	   _-Identifying the breakpoint line and its statements. (5.2.1)
	   _-Create a new  instance of BPLineBreakpoint class and add it to
		the BreakPointManager.(5.2.2) 
	 	
5.2.1 Identifying Breakpoint line  and its corresponding statement

      This is accomplished by sequence of functions  invoked
      in toggleLineBreakpoints() function. The sequence is as 
      the following:
      
      	_-getValidLine() is invoked, in BPLineBreakpoint.java class.
      	  This function is responsible for: Extracting the 
      	  "NonRootModelElement" from passed "IResource". Then getting 
      	  the activity type by calling getActivityType(). The function
      	  getActivityType() in turn get the type by switching on the 
      	  type of the extracted "NonRootModelElement" to be one of 
      	  types: FUNCTION, BRIDGE, STATE, MDA, OPERATION, REQ_OPERATION,
      	  PROV_OPERATION, REQ_SIGNAL, PROV_SIGNAL, TRANSITION. 
      	  It_doesnot_take_into_consideration "CREATION_TRANSITION" as 
      	  an activity type.
      	_- findStatementOnLine() is invoked, in BPLineBreakpoint.java.
      	   This function is responsible for Getting breakpoint target
      	   statement. This is done by switching of the Activity type, return 
      	   from the previous step, to extract instance of the activity
      	   and the corresponding action statement.
      	   
5.2.2 Line BreakPoint creation and graphical displaying
      _- New instance of BPLineBreakpoint is created.Upon the creation init()
       function is invoked.
      _- graphical displaying,the string displayed in "Breakpoints" view
         to show breakpoint location, is obtained when getModelElementLocation() 
         is invoked.
         This function find the breakpoint equivalent string by recursive calls.
         In each call it switches on the "NonRootModelElement" to be one of 
         the Metal-model classes;StateMachineState_c, StateMachineEvent_c, 
         Transition_c, PendingEvent_c,StateMachine_c,... etc. 
         It_doesnot_take_into_consideration "CreationTransition_c".
	  
6. Design
---------
6.1 Design 
		From the analysis section. It can be shown that 
		CREATION_TRANSITION is one of the activity types that 
		can hold a breakpoint.But CREATION_TRANSITION is not taken into 
		consideration in the identification process, as mentioned in the
		previous section.
		
	    In short the functions whose behavior depends on the activity type,
	    that can hold a breakpoint, are:
			getModelElementLocation() in ModelElementLocation.java
			getActivityType() in BPLineBreakpoint.java
			getNumLines() in BPLineBreakpoint.java
			findStatementOnLine() in in BPLineBreakpoint.java
		
		The solution is to make the previously mentioned functions 
		recognize CREATION_TRANSITION as one of the activity types.
		
		This identification can be accomplished by one of the techniques
		described in the following sub-sections.
6.1.1 
       Changing the switch case in the previously mentioned functions.
       In that switch case add an extra entry for CREATION_TRANSITION.
6.1.2 
       Make CreationTransition_c "extends" Transition_c class. So 
       CREATION_TRANSITION will be recognized in the same way TRANSITION
       is recognized.
       This requires that java Model compiler changes the way of generated
       classes that are related by inheritance relation. The inheritance 
       relation should be explicitly implemented by adding "extends"
       keyword in the child classes.  

7. Design Comments
------------------

8. Work Required
---------------- 
      The approach mentioned in 6.1.1 is the one taken. 

9. Unit Test
------------
9.1
	_- Create a new xtuml project
	_- Import a model (Test_DeletionState.xtuml [3])
	_- Launch the Verifier
	_- In class TestDeletionStateClass2 in Test_DeletionState subsystem
	   add breakPoint in CreationEvent oal code.
	_- Execute TestFunction() function
	_R Make sure that the execution stops in the the breakpoint
	   added in the previous step

End
---

$Log: dts0100640143.dnt,v $
Revision 1.7  2010/01/06 11:18:42  etarek
job:dts0100640143
changes work required sec

Revision 1.6  2010/01/05 04:30:39  kbrown
job:dts0100644853
Batch commit of copyright change from 2009 to 2010 for BP CVS projects.

Revision 1.5  2009/12/29 15:41:14  etarek
job:dts0100640143
changes required after review

Revision 1.4  2009/12/29 14:31:52  etarek
job:dts0100636427
formating the notes

Revision 1.3  2009/12/29 07:29:25  etarek
job:dts0100640143
changing design section

Revision 1.2  2009/12/29 07:01:06  etarek
job:dts0100640143
JUnit test trial

Revision 1.1  2009/12/27 12:00:36  etarek
job:dts0100640143
Design notes

