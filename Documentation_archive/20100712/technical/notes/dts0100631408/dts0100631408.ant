========================================================================

File:      $RCSfile: dts0100631408.ant,v $
Version:   $Revision: 804 $
Modified:  $Date: 2010-07-12 08:36:39 -0700 (Mon, 12 Jul 2010) $

(c) Copyright 2007-2010 by Mentor Graphics Corp. All rights reserved.

========================================================================
This document contains information proprietary and confidential to
Mentor Graphics Corp., and is not for external distribution.
========================================================================

BridgePoint Project Analysis Note
Support Package namespaces.

1. Abstract
-----------
This note describes the specification and technical alternatives examined for
supporting package level namespaces.

2. History
----------

3. Document References
----------------------
[1] ClearQuest DEI dts0100631408 - Support Package namespacing

4. Background
-------------
Currently packages are transparent. That is, elements declared in a package are
visible to elements in all other packages. There is a critical requirement that
visibility of names be restricted as described below.

5. Analysis
-----------

5.1 Visibility rules
Elements declared in a package shall be by default private. They cannot be
referenced outside of the local package. The user can change this and make the
element public. When an element is made public, it can be referred to by
elements in the parent package of the owning package of the element (i.e its
siblings). Sub-packages have access to all the elements visible to the owning
packages at all levels ascending the containment hierarchy. The reverse is not
true, an owning package can access only the elements declared as public in its
immediate sub-packages, not those below it. When ascending the containment
hierarchy, the first element in scope that matches a given name found by the
parser is used. An issue is raised[2] to track the addition of fully qualified
name support in OAL. Where selection is being made from a chooser, all
alternatives are presented, qualified by their full path names.

Elements whose visibility is controlled in this way are:
 Classes, Associations, Interfaces, Data types, Constants, Bridges, Functions,
 Packages (all types) and Components.

Visibility of Attributes, Operations and Events shall be the same as that
specified for their owning Class.

5.1.1 Class visibility
A private class cannot be accessed by OAL anywhere other than the local package.
Accessing attributes, calling operations and sending or creating events of the
class are illegal. Creation, destruction and selection are similarly disallowed.
Even traversal through a class with private visibility is illegal. Similarly,
holding instance references to and passing parameters of a reference type to the
class are all modeling time errors. If a class is made private, all references
to it in the current model are checked for legality and the user is warned if
doing so will make his model malformed. Note that making a link class private
disallows relate and unrelate operations across an otherwise public association
(but traversal would still be legal in this case).

5.1.2 Association visibility
Associations obey the same visibility rules as classes do. OAL outside the local
package cannot traverse a private association. Performing relate and unrelate
operations across private associations is similarly illegal.

5.1.3 Structured data type visibility
All member types must be visible where the structured data type is defined.
Member types must be visible where those members are accessed.  So, if a model
element does nothing more than store and send a structured data type, without
ever peering inside it to access its members, then that model element needs
visibility only to the definition of the structured data type and not to the
data types of its members.

5.1.4 Instance reference visibility
A package which declares an instance reference type must have visibility of the
referenced class. Similarly, a package that declares a user defined type that
has a core type of instance reference must have visibility of the class being
referenced. A package which uses the user defined data type need not have access
to the class in question unless it makes use of features of that class (e.g.
accesses attributes, operations or events of the class).

5.1.5 Package visibility
Packages follow the same rules as other elements and can be specified as public
or private by the user. A private package (or more accurately, the elements the
package publishes) is invisible outside of the owning package. The public
elements of a public package are reference-able outside the owning package.

5.1.6 Inter-package class references (Imported Classes)
These too honor the public/private state of a class. It is not possible to
assign an imported class to a class marked as private in another subsystem.

5.1.7 Component references (Imported Components)
Only publicly visible components may be referenced from outside an owing
package.

5.1.8 Visibility from port OAL
Port OAL is considered global to the component to which it is attached. By
extension, this means that port OAL has visibility of only those elements
declared public by the top level packages owned by the component.

5.1.9 Signal assignment
Assignment of signals to transitions may only be made to the state machines of
public classes.

5.1.10 Instantiable elements
An instantiable element is one which appears as an instance of another element,
typically on an interaction diagram. Examples are Instances (of classes),
Messages (instances of events and signals), Operation Calls. There are two
conflicting ways in which these diagrams are used, and they require different
policies with respect to visibility. One way, is that the analyst designer
wishes to convey his or her vision using diagrams close to the concepts being
analyzed at a given level in the system. The other way is to create large
'cover it all' diagrams that allow the eye to freely follow the flow of control
from high to low level. The first approach is assisted by enforcing the same
visibility rules as specified elsewhere in this document. The second is hindered
by such enforcement, since to appear on the 'cover it all' diagram, every
element to be instantiated would have to be public. Since both ways of working
are valid, a project level preference shall be provided that turns visibility
enforcement off for interaction type diagrams.


5.2 Visibility default
Project level default preferences shall be provided for each element type listed
above[5.1]. The default value shall be public.


5.3 UI
The Model Explorer tree icons shall be decorated with a small red square if the
element has been marked as private.


5.4 Changing Visibility
Elements that can have their visibility set by the user shall show a context
menu entry, either 'Make public' or 'Make private' depending on the current
state of the element. This menu entry shall be enabled across multiple
heterogeneous elements provided they all have the same visibility state.


5.5 Data upgrade
For models being ported to a new version of the tool that supports this feature,
all elements will default to public visibility, otherwise the imported models
are broken.

6. Work Required
----------------
Fully described in the sections above.

7. Acceptance Test
------------------
Must test visibility in all combinations of public and private element, public
and private container, package and component.

End
---

$Log: dts0100631408.ant,v $
Revision 1.6  2010/03/02 20:58:08  campbell
Job: dts0100631408
Minor modifications to ant. dnt introduced.

Revision 1.5  2010/01/05 04:31:48  kbrown
job:dts0100644853
Batch commit of copyright change from 2009 to 2010 for BP CVS projects.

Revision 1.4  2009/11/04 09:53:48  campbell
Job: dts0100631408
Specify preference is project level.

Revision 1.3  2009/11/04 09:52:10  campbell
Job: dts0100631408
Updated with further comments from JRW.

Revision 1.2  2009/11/03 11:37:49  campbell
Job: dts0100631408
Updated with comments from JRW.

Revision 1.1  2009/11/02 16:58:36  campbell
Job: dts0100631408
Introduced.

