========================================================================

File:      $RCSfile: dts0100631821.int,v $
Version:   $Revision: 804 $
Modified:  $Date: 2010-07-12 08:36:39 -0700 (Mon, 12 Jul 2010) $

(c) Copyright 2007-2010 by Mentor Graphics Corp. All rights reserved.

========================================================================
This document contains information proprietary and confidential to
Mentor Graphics Corp., and is not for external distribution.
========================================================================

BridgePoint Project Implementation Note
Update MC3020 to generate Client/Server code for operations with direction 
Server to Client

1. Abstract
-----------
This note describes the implementation of modifying the mc3020 to support xtUML
operations with direction "Server to Client".

2. History
----------

3. Document References
----------------------
[1] ClearQuest DEI dts0100631821- xtUML-Autosar mc3020 generates SenderReceiver
    code for operations with direction Server to Client
[2] ClearQuest DEI dts0100580443- BP AUTOSAR
[3] xtUML to AUTOSAR transformations document
    http://beta.wv.mentorg.com/tenmile_svn/tenmile/trunk/documentation/notes/   
    dts0100581974/xtUML_AUTOSAR_transformations.doc
[4] Tick_S2C VSI project - \\wv\dfs\bridgepoint\field_data\dts0100631821
[5] Genericx86 VSI project - \\wv\dfs\bridgepoint\field_data\dts0100631821
	
4. Background
-------------
4.1   The AUTOSAR Interface can either be a Client-Server Interface (defining a
      set of operations that can be invoked) or a Sender-Receiver Interface, 
      which allows the usage of data-oriented communication mechanisms.
	  
4.2   A component has well-defined ports, through which the component can
      interact with other components. A port is either a PPort that provides an
      AUTOSAR Interface or an RPort that requires such an interface.
4.2.1 When a PPort of a component provides an interface, the component to which
      the port belongs provides an implementation of the operations defined in
      the Client-Server Interface.
4.2.2 When a RPort of a component requires an Interface, the component can
      invoke the operations defined in the Client-Server Interface.
	  
4.3   The direction of initiation is used to categorize whether an AUTOSAR
      Software Component is a client or a server.

4.4   xtUML operations are mapped to synchronous Client/Server communication
      scheme in AUTOSAR.

4.5   In both xtUML and AUTOSAR, the Client has the required port and the server
      has the provided port.	  

4.6   Currently MC3020 model compiler generates code for operations with a
      direction "Client to Server" but a Sender/Receiver code is generated
      for operations having the opposite direction i.e. "Server to Client"

5. Design
---------
5.1 In xtUML, the operation in the interface can be with direction
    "Client to Server" or "Server to Client" so it can be invoked from the
    client side or the server side based on its direction
    But in AUTOSAR, the operation can only be invoked from the client side.

5.2 In xtUML: If "Client to Server" operation, the "send" statement has to be
    used from the client side. 
	So, the ports in xtUML will be "the same" as in AUTOSAR:
    - "required port" in xtUML will be mapped to "RPort" in AUTOSAR.   (Caller)
    - "provided port" in xtUML will be mapped to "PPort" in AUTOSAR.   (Callee)

5.3 In xtUML: If "Server to Client" operation, the "send" statement has to be
    used from the the server side.
    So, the ports in xtUML will be "reversed" in AUTOSAR:
    - "provided port" in xtUML will be mapped to "RPort" in AUTOSAR.   (Caller)
    - "required port" in xtUML will be mapped to "PPort" in AUTOSAR.   (Callee)

5.4 In case of provided port and the message direction is "Server to Client",
	generate Rte_Call
	In case of required port and the message direction is "Server to Client",
	generate the server runnable

6. Implementation Comments
--------------------------

7. Unit Test
------------
7.1 Using the Tick model
	  _- Import the Genericx86 project [5] into workspace
	  _- Right click on the project and select "Build Project"
      _R Project build succeeded
      
      _- Import the Tick_S2C project [4] into workspace.
      _- Right click on the project and select "Build Project"
      _R Project build succeeded
      _R In src/Tickee_ports.c an Rte_Call is generated for the "Server to
         Client" operation
      _R In src/Ticker_ports.c a server runnable is generated for the 
         "Server to Client" operation

8. Code Changes
---------------
Branch: <cvs>/Branches/R3_0_3-DME-636114

model_compilers/mc3020/arc/q.component.port.arc
model_compilers/mc3020/arc/t.component.port.autosar.c

End
---

$Log: dts0100631821.int,v $
Revision 1.3  2010/01/05 04:32:22  kbrown
job:dts0100644853
Batch commit of copyright change from 2009 to 2010 for BP CVS projects.

Revision 1.2  2009/12/03 18:46:47  domedhat
job:dts0100631821
update implementation note.

Revision 1.1  2009/12/02 18:40:30  domedhat
job:dts0100631821
implementation note
