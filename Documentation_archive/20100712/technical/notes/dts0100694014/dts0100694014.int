========================================================================

File:      $RCSfile: dts0100694014.int,v $
Version:   $Revision: 804 $
Modified:  $Date: 2010-07-12 08:36:39 -0700 (Mon, 12 Jul 2010) $

(c) Copyright 2007-2010 by Mentor Graphics Corp. All rights reserved.

========================================================================
This document contains information proprietary and confidential to
Mentor Graphics Corp., and is not for external distribution.
========================================================================

BridgePoint Project Implementation Note
Fix 'mutliple issues in required/provided interface ports'

1. Abstract
-----------
This note describes how Formalization and Unformalization will be handled by the
tool in the future.

2. History
----------

3. Document References
----------------------
[1] ClearQuest DEI dts0100694014 - mutliple issues in required/provided
    interface ports.

4. Background
-------------
The tool currently allows the user to unformalize interface references
associated with a Component Reference. This is a bad thing because the user is
changing the state of a component defined elsewhere in the model, perhaps one
even maintained by a different development team.

5. Analysis
-----------
5.1 The reported problem

The video attached to the issue shows a mixed model containing both Components
and Component References. It goes on to show the Unformalize menu entry being
available on some interface references and not available on others.
Specifically, Unformalize is available on the required interface reference
attached to a Component and not on any of the others. This inconsistency is in
itself a defect.

If the Unformalize entry is used, the video then shows that the target component
has also had its interface reference unformalized. This has the consequence that
the interface refence on the referring diagram disappears, because the policy is
to not show unformalized interface references.

The abstraction is that a Component Reference is just that, a passive place-
holder for a component defined elsewhere. There should be nothing you can do to
a Component Reference that will affect the Referred to Component in any way.
Anything that has the effect of changing anything about the component is a
defect. Thus, this is clearly a defect too.

So, in summary, this issue describes two different defects:

- The menu entries are inconsistent for different interface references.
- Unformalizing an interface reference attached to a Component Reference affects
  the state of the referred to Component.

5.2 Possible solutions

The inconsistency issue must be fixed. The Unformalize menu should appear or not
for all interface references the same way.

Whether the Unformalize menu should appear or not is less clear. However, if it
is to appear, it should never be permitted to alter the target referenced
component's state.

5.2.1 Option 1: Always allow Unformalize to appear.
In the case of an unwired Component there is no problem, the user is working
directly with the component and we can go ahead and unformalize the interface.

In the case of two component wired together, the user is also working directly
with both components and we are again free to go ahead and unformalize both
interface references. 

If either side of the association is a Component Reference, then the satisfied
interface reference pair must be disconnected before the Unformalize command can
be honored. Also the unformalize action can apply only to the Component side of
pair. No effect may be made to the Component Reference side of the pair, since
the reference would then be inconsistent with the Component it is supposed to
represent.

If both sides of the association are component reference, then Unformalize
cannot be allowed at all. Even unformalizing the component reference would not
allow (interface reference) Unformalize to be supported, because an unformalized
component reference has no interface references by definition.

The sequence of actions described above might not be what the user would expect.
Therefore, if this was the selected behavior, we would need a cancelable dialog
to warn the user about the changes that will be made.

The observations above add up to a very complex set of rules, preconditions and
runtime warning behavior that user must remember, understand and react to during
interaction with the tool.

It therefore might be better just to not allow Unformalize at all in some
circumstances in the interests of an easier to understand interface.

5.2.2 Option 2: Allow Unformalize to appear only when the state of the model
                supports it.
In this scenario we implement two simple rules:

- Only unsatisfied Interface References can be Unformalized (or Formalized).
- Only Interface References attached to Components can be Unformalized (and
  Formalized).

The advantage of this option is clear, the rules under which an interface
reference can be formalized or unformalized is clear. The tool can go ahead and
perform the formalization state change without testing the state of the model
further and without having to consult or warn the user.

The disadvantage is that the user must explicitly Disconnect a satisfied
interface reference pair before the required formalization state change can be
performed. This will be seen by some users as unnecessary extra clicks. However,
given the need for a dialog and its attendant extra clicks, this is not seen as
a strong argument against this option.

5.2.3 Recommendation
Option 2 is the recommended course of action, being much easier to remember and
to document.

6. Design
---------
Elaborate on each point of the Work Required section of the design note.
Describe how you implemented each step.

7. Implementation Comments
--------------------------
If the design cannot be implemented as written or if it needs some modification,
enumerate the changes to the design in this section.  If there was no preceding
design note, then this section documents any deviations from the implementation
as presented at the pre-implementation engineering review.

8. Unit Test
------------
Outline all the unit tests that need to pass and describe the method that you
used to design and perform the tests. If the unit test section in the design
note is elaborate enough, you may choose to simply point the reader to the
design note.

9. Code Changes
---------------
Branch name: <enter your branch name here>
Enumerate all the files that have been modified while you worked on this issue.

End
---

$Log: dts0100694014.int,v $
Revision 1.4  2010/06/15 14:19:20  campbell
Job: dts0100694014
Address comments.

Revision 1.3  2010/06/15 11:28:24  campbell
Job: dts0100694014
Add reference to corruption fix not being needed.

Revision 1.2  2010/06/15 11:24:12  campbell
Job: dts0100694014
Fix numbering.

Revision 1.1  2010/06/15 11:21:48  campbell
Job: dts0100694014
Introduced.
