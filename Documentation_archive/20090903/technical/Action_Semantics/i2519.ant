========================================================================

File:      $RCSfile: i2519.ant,v $
Version:   $Revision: 1.1 $
Modified:  $Date: 2009/09/03 18:18:45 $

(c) Copyright 2006-2009 by Mentor Graphics Corp. All rights reserved.

========================================================================
This document contains information proprietary and confidential to
Mentor Graphics Corp., and is not for external distribution.
========================================================================

BridgePoint Design Note
Integer to/from real coersion is incorrect


1. Abstract
-----------
This note describes the analysis and work done to the BridgePoint action
language parser to fix a type coersion issue.

2. History
----------
update - <CVS>/Documentation/internal/review_minutes/R1_4_1/i2519-110806-01.rvm

3. Document References
----------------------
[1] Bug 2519.  http://phoenix.projtech.com/bugzilla/show_bug.cgi?id=2519
[2] <CVS>/Documentation/internal/technical/Action_Semantics/action_semantics.ant
[3] http://en.wikipedia.org/wiki/Strongly-typed_programming_language
[4] http://en.wikipedia.org/wiki/Type_system
[5] http://en.wikipedia.org/wiki/Type_safety

4. Background
-------------
The original requirements and design ideas for the BP action language parser
are captured in [2].

5. Analysis
-----------
5.1     BP OAL parser design
5.1.1   The bp.als.oal/bnf/oal.bnf file contains a Backus Naur Form description
        of the OAL
5.1.2   A special version of antlr (antlr.Tool) in the pt_antlr project is
        invoked by the als builder.
5.1.2.1 This tool reads the bnf and emits SQL in a form compatible with the
        BridgePoint grammar model (oal_grammar.sql).
5.1.2.2 Then, grammar_enhancer.arc runs on this populated model to hook the
        grammar artifacts up to the correct OAL.
5.1.2.3 This generates a file called bp.als.oal/src/oal.g.  This file is
        directly compatible with antlr itself. When run on it, antlr produces a
        file called OalParser.java
5.1.2.4 OalParser.java relies on another antlr generated file OalLexer.java.
        This is generated by antlr from the file oal_lex.g
5.1.2.5 This last file is hand written. It contains the token definitions for
        OAL. It would have been nice if this could also have been generated from
        the bnf file, but it is quite small and relatively painless to maintain
        (compared to the OAL syntax analyser).
5.1.3   ANTLR works by allowing the user to provide their own code to be
        performed when a specific piece of syntax is recognized.
5.1.3.1 This code is not hand written. When the parser runs, the metamodel is
        populated, so OAL is used in this case as well.
5.1.3.2 These function callouts are defined in the xtUML metamodel (ooaofooa)
        in bp.core under Functions/OAL Validation Functions
5.1.3.3 There is special code generation that looks for functions declared in
        the metamodel and generates code from them into
        bp.als.oal/src/Oal_validate.java.
5.1.3.4 When this code gets run, it updates the metamodel instances based on
        what the parser finds.
5.1.3.5 It is this instance population that Verifier executes.
5.1.4   The data_types_compatible() function is in the xtUML metamodel
        Functions/OAL Validation Utility Functions package, it checks if data
        types are compatible

5.2     This table from [4] shows the type handling of several common languages

5.2.1   Programming    static /   strong /   safety
        language       dynamic    weak
        ---------------------------------------------
        Ada            static     strong     safe
        C              static     weak       unsafe
        C++            static     strong     unsafe
        Java           static     strong     safe
        Pascal         static     strong     safe
        Perl 1-5       dynamic    weak       safe

5.2.2   Some definitions [4]:
        - static: A programming language is called statically typed if type
            checking may be performed without testing equivalence of
            run-time expressions.
        - dynamic: In dynamic typing, type checking often takes place at
            runtime because variables can acquire different types depending
            on the execution path.
        - strong: Strong typing involves not allowing an operation to
            succeed on arguments which have the wrong type.
        - weak: Weak typing means that a language will implicitly convert
            (or cast) types when used.
        - safety: A language is considered "type-safe" if it does not allow
            operations or conversions which lead to erroneous conditions.

5.3     BridgePoint Action Language data typing
5.3.1   Variables in BPAL are implicitly type'd based upon the value they are
        assigned
5.3.2   Functions in BPAL are statically typed (parameters are declared with
        types)
5.3.3   BPAL has no type casting capabilities
5.3.4   BPAL is strongly typed in all cases except in handling reals and
        integers
5.3.4.1 BPAL considers ints and reals to be type compatible [4], all other types
        are considered incompatible
5.3.4.2 ints and reals may be mathematically operated on, with the result being
        a real
5.3.4.3 ints and reals may be logically operated on, EXCEPT boolean "and" and
        "or"
5.3.4.4 ints and reals may be assigned to each other, with the result type being
        whatever the type of the variable is at first usage. reals are truncated
        when assigned to a variable of type integer.
5.3.4.5 ints and reals may be passed to functions expecting the opposite type
        and an automatic conversion will occur

5.4     Explore how we think data type manipulation and compatability should
        behave.  There are a number of things to consider:
5.4.1   Is there a particular language we want to mimic? C, C++, Pascal?
5.4.2   Should we allow assignment of integer to real?
5.4.3   Should we either disallow or truncate assignment of real to integer?
5.4.4   Should we disallow equality comparison of real's and integer's?
5.4.5   Should we support promotion?  Or once typed, a variable stays that
        type?

5.5     Discussion
5.5.1   BPAL is strongly typed in every regard except with integer's and real's,
        mimic-ing C in this regard.  However, it does not allow other implicit
        conversions C programmers take for granted (e.g. int -> boolean).
5.5.2   This single implicit conversion seems to me to be a convenience crutch
        to allow an analyst to get away with putting some implementation details
        into the design.
5.5.3   This special exception for these two types seems to fly against the
        design of the rest of the system.
5.5.4   Allowing silent, lossy data conversion, as can happen when a real is
        passed to a function that takes an integer parameter, seems especially
        dangerous.
5.5.5   Our lack of strong typing on these two datatypes is problematic for
        customers such as Saab who generate to Ada (a strongly-typed language)
5.5.6   All that being said, there are two major factors to weigh before
        disallowing this weak typing going forward:
5.5.6.1 Changing this could easily break existing customer models.
5.5.6.2 BPAL's lack of a casting operator would prohibit customers from
        relativly easily getting the models working again.

5.6     Results
5.6.1   Increase the default type strength, but add support via eclipse
        preferences to decrease the strength.
5.6.1.1 Rule 1:  Disallow promotion of integer to real by default
5.6.1.2 Rule 2:  Disallow coercion (real to integer) by default
5.6.1.3 Rule 3:  Disallow binary comparison operations of integer and real
        by default
5.6.1.4 There will be two eclipse preferences to "weaken" the default behavior
        for backwards compatability.  One preference will unhook rule 1.  The
        other preference will unhook rules 2 and 3.
5.6.1.5 The Verifier will honor these preferences.
5.6.2   Performing a parse all in the tool will apply the new rules to existing
        models.  Importing a model will apply the new rules to the model.
5.6.3   We will need to document this change in the OAL reference and in the
        release notes.

6. Work Required
----------------
6.1     Eclipse preferences for parser backwards compatability
6.1.1   Define the preferences and where they will live
6.1.2   Implment EE OAL and Java code to read/write them

6.2     Documentation
6.2.1   OAL reference manual
6.2.2   Release notes

6.3     Strengthen default typing
6.3.1   Implement rules specified in 5.6.1 by modifying the ooaofooa domain
        function data_types_compatible()
6.3.2   Use eclipse preference switches defined in 5.6.1.4

7. Acceptance Test
------------------
7.1     Extend the bp.als.oal.test JUnit test suite
7.1.1   Some test cases where integers are assigned to reals and vice-versa
        will have previously succedded but now will not
7.1.2   Add similar test cases to test the eclipse assignment statements using
        variations on the new eclipse preferences that weaken the typing rules.

End
---

$Log: i2519.ant,v $
Revision 1.1  2009/09/03 18:18:45  rmulvey
job:dts0100616734
Archive documentation and other development notes following the R3_0_0 release.  These are being archived under Documentation/internal/technical/archive/20090903

Revision 1.4  2009/01/01 23:13:12  rmulvey
Job:4060
Batch promotion of copyright changes from Review-i4060 and Review-i4060-01.

Revision 1.3.16.1  2008/12/31 16:10:16  rmulvey
Job:4060
This is a batch commit of 2009 copyright changes to branch Review-i4060.  This includes the
report that outlines all changes made (before/after for each line changed).  This report is found here: <cvs>/Documentation/internal/test_results/R2_1_2/i4060/update-copyright-results.txt.

Revision 1.3  2006/11/14 14:30:30  kbrown
Job:2519
Made changes Cort found in second review of the ant.

Revision 1.2  2006/11/10 20:17:50  kbrown
Job:2519
Analysis note and review minutes with changes applied.

Revision 1.1  2006/11/08 20:58:34  kbrown
Job:2519
<CVS>/Documentation/internal/technical/Action_Semantics/i2519.ant

First-pass analysis note.

