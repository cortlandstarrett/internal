========================================================================

File:      $RCSfile: action_semantics.dnt,v $
Version:   $Revision: 1.1 $
Modified:  $Date: 2009/09/03 18:18:45 $

(c) Copyright 2003-2009 Mentor Graphics Corporation All rights reserved.

========================================================================
This document contains information proprietary and confidential to
Project Technology, Inc. and is not for external distribution.
========================================================================
Tiger Drop 1 Design Note
Generate Action Language Processing from BNF

Abstract
--------

This note describes the design of converting a BNF specification
of an action language to code that processes the language.

History
-------

update action_semantics-062403-1.rvm
final  action_semantics-062603-1.rvm

Document Reference
------------------

bp.core/doc/internal/technical/Action_Semantics/action_semantics.ant

Background
----------

See analysis note.

Design
------

AS1.1 - Create a model of parse trees

The domain name is grammar.  The domain defines
the information needed to describe a syntax tree 
for a BNF grammar.  The domain has the following classes
(indentation indicates the subtype hierarchy):

Node
  Non Leaf Node
    Root
    Rule
    EBNF
  Leaf Node
    Rule Reference
    Terminal

Everything is a subtype of Node.  In addition, the Rule class
has a relationship to a synchronous service that
performs the semantic validation for the rule.
The portion of the OOA of OOA having to do with
synchronous services, parameters, and their datatypes
is replicated in this model.

The domain .bak file is placed in 
com.projtech.bp.als/mdl/grammar.bak.

AS1.2 - Create an Antlr processor that outputs SQL statements

AS1.2.1  A new class PTPopulatorAST is created. This class
is derived from CommonAST.  The class implements the function
sqlSerialize(), which outputs the AST tree to a series of
INSERT statements that populate the model in AS1.1.
Not all attributes for the instances are output, as some
are only used for generation time bookkeeping.  See Work
Required for details.

AS1.2.2 The current Antlr tool set provides the class Tool to 
convert .g files to xml.  The Tool class is modified to invoke 
the sqlSerialize() function on the root AST of the parsed .g file.  
The following command line parameters are added:

-sql=<file path>  is the name of the file to output the 
   sql insert statements to.

-nocodegen if present the Tool class will not output the
   code needed to execute the parser.   We don't want to 
   generate files that aren't used.  

AS1.2.3 The Version class is modified so that "-pt" is appended
to the project_version data member.

AS1.2.4 The input grammar for OAL is defined in 
com.projech.bp.als.oal/bnf/oal.bnf.  The file has the same format
as an Antlr .g file, we just name it .bnf so that the parser
files aren't automatically generated by Antlr for this file.

AS1.3 - Create the archetypes to translate the populated grammar model

AS1.3.1 The BNF specification (.g file) generation archtype

AS1.3.1.1  The schema for the generation database is the
grammar model.  We use schema_gen to create the file grammar_schema.sql

AS1.3.1.2  We also need to load the datatypes that will be used,
since AS1.2 didn't generate that information.
The file com.projtech.bp.als/sql/udt.sql is created by
exporting the user defined types from the grammar model.

AS1.3.1.3  The archetype com.projtech.bp.als/arc/grammar_enhancer.arc
has the following functionality:

- Initializes all existing instances to the default state
- Finds all rules that are followed by !'s, and marks those 
  rules as not needing validation
- Emit the preamble of the .g file (the options, class name, etc.)
  with the same content as that provided by the input .g file.
  Rule options are output identically to the input .g file as well.
- Emit the rule definitions for each rule with the validation function
  invocations invoked as needed.

The environment variable ALS_NAME must be defined before running
this archetype.  The initial value for it will be "oal".
The emitted text is placed in the file 
com.projtech.bp.als.${ALS_NAME}/src/com/projtech/bp/als/${ALS_NAME}/${ALS_NAME}.g
If the environment variable ALS_NAME is not defined, then the
archetype exits with an error message.

AS1.3.2 The function SQL generation archetype

The archetype uses the generation database from AS1.3.1, and
outputs SQL INSERTs for all datatypes defined in the gen db.
This allows the function and parameter datatypes to match up
correctly when importing the SQL into Model Builder.

The archetype then outputs SQL INSERTs for all S_SYNC and S_SPARM
instances in the generation database.  The information is emitted
to com.projtech.bp.als.${ALS_NAME}/sql/${ALS_NAME}_functions.sql.

In addition to the functions in the gen db, the function 
get_next_id() is defined.  This function is the default action
for all functions.

Each generated function has a description of 

ParserValidateFunction: TRUE

and an action specification of

return ::get_next_id();

We'll need the ParserValidateFunction later after we export
the functions from the ooaofooa50 model, to know which functions
are part of the parser validation, and not just some function 
that's already in ooaofooa50.

The archetype is named com.projtech.bp.als/arc/function_gen.arc.

AS1.3.3  The file com.projtech.bp.als.oal/src/com/projtech/bp/als/oal/oal_lex.g
is written.  It contains the definition of the lexer that the parser
will use.

AS1.3.4  The script com.projtech.bp.als/generate.bat is created 
to do the following:

- Execute the Tool class to convert the input .bnf file to ${ALS_NAME}.pei.sql
- Import grammar_schema.sql
- Import ${ALS_NAME}.pei.sql
- Import udt.sql
- Execute grammarEnhancer.arc  (outputs ${ALS_NAME}.g)
- Execute function_gen.arc  (outputs ${ALS_NAME}_functions.sql)

The script has one parameter, the value for ALS_NAME.


AS1.4 - Adding the validation action language.

AS1.4.1 The file ${ALS_NAME}_functions.sql is imported into BP, with the
ooaofooa50 model.

AS1.4.2 The external entity Error Reporting (ERR) is added to the
ooaofooa50 model.  The EE has one bridge, reportParseError, that
takes two arguments: msg of type string, and ast of type AST.
An alternative is to not create the new external entity, but
to add the new bridge to the USER external entity.  The alternative
is not used to keep the subject matters clearly separated.  Also,
since the implementation of the bridge will require the function to
throw exceptions (something MC-Java doesn't support), the 
ERR::reportParseError function will be hand written.

AS1.4.3 The action specification for each of the validation functions
is written by hand.  For example, the object_keyletters_validate
function would contain:

 select any obj from instances of O_OBJ where ( selected.Key_Lett == param.text );
 if ( empty obj )
    ERR::reportParseError( msg: "Unknown keyletters: ", ast: param.rule_ast );
 end if;

After all the functions' action specifications are written,
the functions are exported to com.projtech.bp.als.oal/sql/function.pei.sql.
 
AS1.5 - Generate validation code

An archetype is written that produces the validation Java code from 
the function specifications written in AS1.4.3.  The archetype uses the 
MC-Java code generation archetypes to output the action language. 
The validation code is output to 
com.projtech.bp.als.${ALS_NAME}/src/com/projtech/bp/als/${ALS_NAME}/$c{ALS_NAME}_validate.java

AS1.5.1  Create the file com.projtech.bp.als/arc/ooa_oal_pop_func.arc
This file is a copy of TinyJava/ooa_oal_pop.arc, modified so that only
synchronous services with the parse keyword ParserValidateFunction equal to
"TRUE" are passed to .al_xlate.

AS1.5.2  Create the file com.projtech.bp.als/arc/validate_gen.arc
This archetype outputs the ${ALS_NAME}_validate.java file.  The archetype
outputs the translated functions for each synch service that has ParserValidateFunction
equal to "TRUE".

AS1.5.3  Create the file com.projtech.bp.als/gen_validate.bat to 
automate the creation of the validation java code:

- Import ooa_schema.sql
- Import ooaofooa50.sql
- Import function.pei.sql (using domain code 1)
- Import udt.sql (using domain code 1)
- Execute ooa_oal_pop_func.arc
- Import ${ALS_NAME}_validate.bpi.sql
- Execute validate_gen.arc

The script has one parameter, the value for ALS_NAME.

Work Required
-------------

AS1.1  Create a model of parse trees

AS1.2  Create an Antlr processor that outputs SQL statements

The files are placed in the project pt_antlr.  

AS1.2.1  Create class PTPopulatorAST 

The following attributes of the Node class are not output:

	     validation_required
	     validation_label
	     validation_action
	     label_required
	     label_emitted
	     label_dcl_emitted
	     label_ref_emitted
	     label
	     pre_attach
	     post_attach
	     value
	     in_options_sequence

The following attributes of the NonLeaf class are not output:

	     loop_index
	     loop_id_name
	     fncname_start
	     fncname_end
	     
All attributes for the rest of the classes are output.

AS1.2.2  Modify the Tool class 

AS1.2.3  Modify the Version class

After the files are modified and compiled, a .jar file is created 
for the project.

AS1.2.4  Create the file com.projech.bp.als.oal/bnf/oal.bnf

AS1.3  Create the archetypes to translate the language model

AS1.3.1  The BNF specification (.g file) generation archtype

AS1.3.1.1  Create the file grammar_schema.sql

AS1.3.1.2  Create udt.sql

AS1.3.1.3  Create grammar_enhancer.arc

AS1.3.2  Create function_gen.arc

AS1.3.3  Create oal_lex.g

AS1.3.4  Create com.projtech.bp.als/generate.bat 

AS1.4  Adding the validation action language.

AS1.4.1  Import functions sql 

- Checkout the domain level
- The first time, import the file oal_functions.sql
- Subsequently, import function_import.sql

AS1.4.2  Add the external entity Error Reporting (ERR)

- Import the file err_ee_w_graphics.sql

AS1.4.3 Write the validation function action specs

- All validation WRT event generation is not implemented in this drop.
- All validation WRT debug statements is not implemented in this drop.

- Export the functions to com.projtech.bp.als.oal/sql/function_import.sql.
  Do not export any graphics.  Export all the data types.

- After exporting the file, copy the file to function.pei.sql, and then remove,
  by hand, all the core data type INSERTs from the file.  There should 
  only by S_SYNC and S_PARM INSERTs in the file.

AS1.5 - Generate validation code

AS1.5.1  Create com.projtech.bp.als/arc/ooa_oal_pop_func.arc

AS1.5.2  Create com.projtech.bp.als/arc/validate_gen.arc

AS1.5.3  Create com.projtech.bp.als/gen_validate.bat

---
End

$Log: action_semantics.dnt,v $
Revision 1.1  2009/09/03 18:18:45  rmulvey
job:dts0100616734
Archive documentation and other development notes following the R3_0_0 release.  These are being archived under Documentation/internal/technical/archive/20090903

Revision 1.7  2009/01/01 23:13:12  rmulvey
Job:4060
Batch promotion of copyright changes from Review-i4060 and Review-i4060-01.

Revision 1.6.168.1  2008/12/31 16:10:16  rmulvey
Job:4060
This is a batch commit of 2009 copyright changes to branch Review-i4060.  This includes the
report that outlines all changes made (before/after for each line changed).  This report is found here: <cvs>/Documentation/internal/test_results/R2_1_2/i4060/update-copyright-results.txt.

Revision 1.6  2003/07/16 22:05:25  greg
Job: 19
Review changes made

Revision 1.5  2003/07/10 20:21:33  greg
Job: 19
Updated the work for creating validation functions.

Revision 1.4  2003/06/27 15:35:01  greg
Job: 19
Added ALS_NAME prefix to generated functions file.

Revision 1.3  2003/06/27 15:29:24  greg
Job: 19
Update from second review

Revision 1.2  2003/06/25 18:20:49  greg
Job: 19
Update from review

Revision 1.1  2003/06/23 19:11:39  greg
Job: 19
Renamed and moved file.

Revision 1.3  2003/06/23 19:10:34  greg
Job: 19
Ready for review

Revision 1.2  2003/06/10 19:22:44  greg
Job: 19
Design section completed

Revision 1.1  2003/06/10 15:14:56  greg
Job: 19
Initial checking

