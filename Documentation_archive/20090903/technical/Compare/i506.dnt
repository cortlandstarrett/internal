========================================================================

File:      $RCSfile: i506.dnt,v $
Version:   $Revision: 1.1 $
Modified:  $Date: 2009/09/03 18:22:09 $

(c) Copyright 2004-2009 by Mentor Graphics Corp. All rights reserved.

========================================================================
This document contains information proprietary and confidential to
Mentor Graphics Corp., and is not for external distribution.
========================================================================

Tiger Project Design Note
Fixing the Memory Leaks in the Tiger due to Compare

Abstract
--------
This design note describes the work required for the identification of 
memory leaks occurring due to Compare and finally their remedy to the best 
possible extent.

History
-------

Document References
-------------------
[1] Bugzilla Issue # 506
[2] Java Virtual Machine Profiler Interface (JVMPI) 
    http://java.sun.com/j2se/1.4.2/docs/guide/jvmpi/jvmpi.html
[3] com.projtech.bp.compare/src/
[4] class bp.compare.ModelCacheManager.ModelStructuredTextGenerator
[5] class bp.compare.ModelCacheManager

Background
----------
It is found that running compare on large models causes Tiger to show 
performance lags, eventually giving an out of memory error [1].

Analysis
--------
- i506.1  Tiger Profiler
During the research it was found that finalize() method cannot be relied upon 
for determining if the object is freed. Moreover this will require insertion of 
debug code in every candidate class. So we need a profiler that provides 
following features:

- A list of classes that are currently loaded and their instance count.
- Filtering above list at the level of profiler agent.
- Allows, to run garbage collector on demand.

There are number of open source/free profilers that could be used. But none of 
usable profilers provided above features, especially filtering at agent level.
Instead we found that JVMPI[2], profiler interface can be used to write a small
profiler which provides us exactly what we need.

- i506.2  Identifying the Memory Leaks
  Resolution for this issue is provided by identifying different possible 
areas in the code that might be responsible for not freeing objects that are no 
longer needed. These areas are

- i506.2.1  Text Document 
  ModelStructuredTextGenerator[4] creates text for a model and holds the text
  in Document object. It is possible that this document object is not being 
  freed.

- i506.2.2  Compare Tree Nodes
  ModelStructuredTextGenerator[4] also creates a tree of nodes that point to 
  a range with in text document representing the model. It is required to 
  ensure that this tree of nodes is freed.

- i506.2.3  Cleanup of Ooaofooa
  ModelCacheManager[5] loads the model and calls Ooaofooa.clearDatabase() to 
  free it soon after text and nodes are generated. It is possible that model
  elements are not properly freed.
  
- i506.2.4  Graphics Objects
  If Import process loads graphics then it should free graphics as a result 
  of clearDatabase(). Or alternatively it should not load graphics data at all.
  
- i506.2.5  Eclipse Framework
  Eclipse 2 seem to have memory leak in TextMergeViewer when big text files 
  are compared. We need to ensure that if it is not eclipse memory leak that is 
  causing our compare to result in the memory error.
  
Design
------
- i506.1  Writing a profiler based on JVMPI
  A DLL in C++ is written using JVMPI which listens for the following 
events: 
. JVMPI_EVENT_OBJECT_ALLOC  -   Received after an object is created.
. JVMPI_EVENT_OBJECT_FREE   -   Received when an object is freed.
. JVMPI_EVENT_OBJECT_MOVE   -   Received when an object is moved in heap.
. JVMPI_EVENT_CLASS_LOAD    -   Received when a Class is loaded.
. JVMPI_EVENT_GC_START      -   Received when GC is started.
. JVMPI_EVENT_GC_FINISH     -   Received After GC has finished.
. JVMPI_EVENT_JVM_SHUT_DOWN   -   Sent by JVM before shutting down.

The DLL (named as ProfilerDll.dll) is passed as a parameter of Java Virtual 
Machine:
          -XrunProfilerDll

To filter the classes to be considered for profiling, the names of the classes 
should be mentioned in a file "ProfilerFilter.txt" placed at the root of C 
drive. "ProfilerFilter.txt" first line should have an integer value as 
filtering mode:
 1 =  All strings given below must occur in a class name
 2 =  Any string given below can occur in a class name
 
- i506.1.1  GC Plugin
  To collect the information of object deletion the java's Garbage Collector 
(GC) must be called, which then sends an event through the JVMPI to the 
profiler. To explicitly call System.gc() in eclipse environment, a simple 
plugin is developed that adds a button to the console views title bar. Pressing 
this button while profiling an eclipse application (e.g. Tiger) sends events of  
JVMPI_EVENT_GC_START and JVMPI_EVENT_GC_FINISH to profiler. In case the GC 
releases any objects the profiler receives the JVMPI_EVENT_OBJECT_FREE event in 
between the GC_START and GC_FINISH events. On GC_FINISH the profiler dumps the 
list of objects in the memory.

- i506.2  Fixing Memory Problems
  The following sub-sections do not trace to the similarly numbered Analysis 
subsections. Rather, all the steps below are repeated for each area identified 
in the analysis section to determine where the memory leaks are occurring.

Using the profiler with following contents of "C:\ProfilerFilter.txt" various 
objects were found not being released:
2
_c
com.projtech.bp.compare
CompareDocumentRangeNode
jface.text.Document

Following are the fixes for the memory leaks identified after using the 
Profiler:

- i506.2.1  Removing un-needed local references 
  Remove the local references of:
. ModelContentMergeViewer from the class ModelContentMergeViewerCreator and,
. ModelContentViewer from the class ModelContentViewerCreator and, 
. StructureDiffViewer from the class StructureDiffViewerCreator.
All the above ViewerCreator classes are factory classes and hence should not 
cache factory items.

- i506.2.2  Releasing CompareDocumentRangeNodes and Document
  It is observed that Eclipse does not (due to possible memory leak) free the 
Document objects created during the compare.  The possible solution is to reset
the Document contents to empty string at the dispose of Compare window.  
The ModelMergeViewerContentProvider class is modified to maintain a vector of 
Document objects. These objects are created in getModelfromCache() method and 
are set to empty string in ReleaseAll() method.

- i506.2.3  Fixing memory Leaks from com.projtech.bp.ui.canvas plugin
  The default ImportModel behavior is to load both graphical and non-graphical 
model data. Loading graphics domain during compare is not required and 
currently causes memory overheads. 
To fix this problem the common archetype, bp.io.core/arc/gen_import_java.inc, 
is updated. A new variable "m_parseGraphics" is added and is set by a new 
parameter added to the constructor of ImportModel.
This variable restricts loading/unloading of graphics data in the methods: 
processStatement(), processValue() and finishLoad(). The plugin 
com.projtech.bp.io.mdl will require a rebuild.

Note:
Some objects are not shown to be released like ComparePlugin, ModelCacheManager 
objects. All such objects are Singleton not necessarily be released.

Work Required
-------------
- i506.1  Writing a profiler based on JVMPI
  Develop a simple profiler with the requirements mentioned in design section 
using JVMPI in C++. Place the Visual C++ project in 
utilities/com.projtech.util.profiler/native on CVS.

- i506.1.1  GC Plugin
  Develop the eclipse plugin com.projtech.util.gc as described in design 
section. Place the plugin at utilities/com.projtech.util.gc on CVS.

- i506.2  Fixing Memory Problems
  Run the Profiler as mentioned in design section i506.1 with the filters as
mentioned in the design section i506.2.

- i506.2.1  Removing un-needed local references 
  Modify all the files as mentioned in design section.
  
- i506.2.2  Releasing CompareDocumentRangeNodes and Document
  Modify the class ModelMergeViewerContentProvider as described in the design 
section.

- i506.2.3  Fixing memory Leaks from com.projtech.bp.ui.canvas plugin
  Modify com.projtech.bp.io.core/arc/gen_import_java.inc as described in the 
design section.
  
End
---

$Log: i506.dnt,v $
Revision 1.1  2009/09/03 18:22:09  rmulvey
job:dts0100616734
Archive documentation and other development notes following the R3_0_0 release.  These are being archived under Documentation/internal/technical/archive/20090903

Revision 1.3  2009/01/01 23:13:35  rmulvey
Job:4060
Batch promotion of copyright changes from Review-i4060 and Review-i4060-01.

Revision 1.2.128.1  2008/12/31 16:10:48  rmulvey
Job:4060
This is a batch commit of 2009 copyright changes to branch Review-i4060.  This includes the
report that outlines all changes made (before/after for each line changed).  This report is found here: <cvs>/Documentation/internal/test_results/R2_1_2/i4060/update-copyright-results.txt.

Revision 1.2  2004/11/04 03:34:36  siddique
Job:506
Review observations addressed

Revision 1.1  2004/11/03 10:44:12  siddique
Job:506
Introduced.
