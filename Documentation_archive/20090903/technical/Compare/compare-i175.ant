========================================================================

File:      $RCSfile: compare-i175.ant,v $
Version:   $Revision: 1.1 $
Modified:  $Date: 2009/09/03 18:22:09 $

(c) Copyright 2004-2009 Mentor Graphics Corporation All rights reserved.

========================================================================
This document contains information proprietary and confidential to
Project Technology, Inc. and is not for external distribution.
========================================================================

Tiger Project Analysis Note
Model Comparison

Abstract
--------
Eclipse based BridgePoint shall provide the ability to compare models
logically i.e. ignoring differences in ids and comparing the content of
the models themselves.

History
-------
  update - compare-i175-062404-01.rvm
  final  - compare-i175-070704-01.rvm

Document References
-------------------
[1] bp.core/mdl/ooaofooa.bak
[2] BridgePoint builder sample model: Microwave Oven
[3] Bugzilla issue: 175

Analysis
--------
The Tiger compare facility shall be provided by fulfilling the Eclipse compare
programming contract so that the functionality is available in all places that
an Eclipse user would expect it. Specifically, these places are:

 - Team > Synchronize with Repository
 - Team > Merge
 - Team > Show In Resource History > Compare
 - Compare > <All Types>
 - Replace With > <All Types>
 - Restore from Local History

The tiger compare function shall show three views; the difference tree and the
incoming and outgoing panes. As a general abstraction, the behavior of the
Tiger compare feature shall be consistent with the standard Eclipse
functionality when comparing (for example) java or plugin.xml files. However,
merging support is not required at this time.

Incoming changes are those made by a third party, outgoing changes are those
made by the user (these are often being committed to version control, hence
the name, outgoing).

The files to be compared at first release shall be of the extension .sql and
shall contain a complete domain. However, the design chosen shall allow easy
migration to multiple files with different extensions and containing subsets
of a domain, such as subsystem or state machine.

Models which contain only graphical differences shall be considered to be
identical for the purposes of this work.

The Difference Tree View
The difference tree structure shall be identical to that shown in the Model
Explorer, except that identical parts of the tree are not shown (i.e. the tree
for two logically identical models is empty). Icons shall be as for the Model
Explorer.

An entry marked with a plus (+) sign is added in the incoming model and an
entry with a minus (-) sign is removed in the incoming model. Entries with
neither plus nor minus are changed.  Where data for a common ancestor
is available (during a merge, for example), the tree icon for the element shall
show a double headed red arrow decoration where differences exist in both
copies (i.e a conflict exists).

The Incoming and Outgoing Panes
These panes shall show an ASCII representation of the models being compared.
The representation shall be of the generic form:

<Entity Name>.<Attribute Name>:<Value>

The content of the tree shall be as specified in Appendix I.

Child nodes shall be indented using 2 spaces for each time a tree branch is
descended. Multi-line output, such as description and action semantics fields
shall maintain the same text start position for every line so that, for example,
block indenting in these fields remains visible. The output order of the fields
shall be as specified by the attribute order in the OOA of OOA.

Except for those metamodel entities that have specified ordering relationships,
all output within each indentation level is alpha sorted based on the human
readable identifier attribute. This guarantees a consistent output order in all
cases. The metamodel entities having specific ordered relationships are
Attribute (using R103) and Attribute Reference in Class (which is ordered by
R112). Attribute names shall be created using the meta-model 'Full Name'
coloring. Field order shall be the same as it appears on the metamodel diagrams.

The code that produces the output of the above format shall be generated
automatically from the core model[1].

The incoming and outgoing change views shall have difference equivalents joined
using bezier lines. Where an ancestor version can be identified, incoming
changes shall be highlighted in blue, outgoing changes shall be highlighted in
gray and conflicting changes in red. Each highlighted change shall be marked
in the right hand margin in the color specified above.

Alternative Functional Behavior Considered
More data could have been combined into a single line of output. For example,
the function output could have been reduced by outputting:

  Function.Signature: max(a: integer, b: integer): boolean

However, adopting this idea would have made the job of adding a merge
capability more difficult at a later date.

Work Required
-------------

i175.1 Load data from file into an in-memory model.

i175.2 Traverse model to obtain required output data.

i175.3 Transform data into the format specified in Appendix I.
i175.3.1 Generate internationalized code to produce the tree content
i175.3.2 Generate US English internationalization resource file

i175.4 Interface to the Eclipse comparison infrastructure.

Note that items 2 and 3 above shall be generated to the greatest extent
possible. Item 1 shall be achieved using existing input code and item 2
shall be decoupled from the specific input format used in item 1 so that
other file formats may be compared in the future.

Appendix I - The Compare Tree
-----------------------------
Legend:
- Meta-class
@ Meta-attribute
> Reference

- System Model
  @ System Name
  - Domain
    @ Domain Name
    @ Domain Description
    @ Fully Derived Indicator
    - Data Type
      @ Data Type Name
      @ Data Type Description
      > Core Type: Data Type
      - Enumerator
        @ Enumerator Name
        @ Enumerator Description
    - Function
      @ Name
      @ Description
      @ Action Semantics Field
      @ Successful Parse Indicator
      > Return Type: Data Type
      - Function Parameter
        @ Parameter Name
        @ By Reference Indicator
        > Type: Data Type
    - External Entity
      @ External Entity Name
      @ External Entity Description
      @ External Entity Key Letters
      - Bridge
        @ Bridge Name
        @ Bridge Description
        @ Bridge Type
        @ Action Semantics Field
        @ Successful Parse Indicator
        > Return Type: Data Type
        - Bridge Parameter
          @ Bridge Parameter Name
          @ By Reference Indicator
          > Type: Data Type
      - External Entity Event
        @ External Entity Event Number
        @ External Entity Event Meaning
        @ External Entity Event Label Unique Indicator
        @ External Entity Event Unique Label
        @ External Entity Event Derived Label
        @ External Entity Event Description
        > Data Item: External Entity Event Data Item
      - External Entity Event Data Item
        @ External Entity Event Data Item Name
        @ External Entity Event Data Item Description
        > Type: Data Type
      - External Entity Data Item
        @ External Entity Data Item Name
        @ External Entity Data Item Description
        > Type: Data Type
    - Subsystem
      @ Subsystem Name
      @ Subsystem Description
      @ Subsystem Prefix
      @ Number Range
      - Model Class
        @ Class Name
        @ Class Number
        @ Class Key Letters
        @ Class Description
        - Attribute
          @ Attribute Name
          @ Description
          @ Attribute Name Prefix
          @ Attribute Root Name
          @ Prefix Mode
          > Type: Data Type
          - Class Identifier
            @ Class Identifier Identifier
          - Derived Base Attribute
            @ Action Semantics Field
            @ Successful Parse Indicator
          - Attribute Reference in Class
            @ Is Constrained
            @ Attribute Reference in Class Description
            > Referred To: Model Class
            > Referenced Over: Association
        - Operation
          @ Operation Name
          @ Operation Description
          @ Instance Based Indicator
          @ Action Semantics Field
          @ Successful Parse Indicator
          > Return Type: Data Type
          - Operation Parameter
            @ Operation Parameter Name
            @ By Reference Indicator
            > Type: Data Type
        - Instance State Machine
          - State Machine State
            @ State Name
            @ State Number
            @ Final State Indicator
            - Action
              @ Successful Parse Indicator
              @ Action Semantics Field
              @ Description
          - State Machine Event
            @ Event Number
            @ Event Meaning
            @ State Machine Event Label Unique Indicator
            @ State Machine Event Unique Label
            @ State Machine Event Derived Label
            @ Description
            > Data Item: State Machine Event Data Item
            > Alias: State Machine Event
            > Creation: State Machine State
          - State Machine Event Data Item
            @ Event Data Item Name
            @ Event Data Item Description
            > Type: Data Type
          - State Event Matrix Entry
            > In: State Machine State
            > Triggered By: State Machine Event
            > To: State Machine State
            - Event Ignored
              @ Description
            - Cant Happen
              @ Description
          - No Event Transition
            > From: State Machine State
            > To: State Machine State
        - Class State Machine
          - State Machine State
            @ State Name
            @ State Number
            @ Final State Indicator
            - Action
              @ Successful Parse Indicator
              @ Action Semantics Field
              @ Description
          - State Machine Event
            @ Event Number
            @ Event Meaning
            @ State Machine Event Label Unique Indicator
            @ State Machine Event Unique Label
            @ State Machine Event Derived Label
            @ Description
            > Data Item: State Machine Event Data Item
            > Alias: State Machine Event
            > Creation: State Machine State
          - State Event Matrix Entry
            > In: State Machine State
            > Triggered By: State Machine Event
            > To: State Machine State
            - Event Ignored
              @ Description
            - Cant Happen
              @ Description
          - No Event Transition
            > From: State Machine State
            > To: State Machine State
      - Association
        @ Association Number
        @ Association Description
        - Class As Simple Participant
          @ Multiplicity
          @ Conditionality
          @ Text Phrase
          > Related: Model Class
        - Class As Simple Formalizer
          @ Multiplicity
          @ Conditionality
          @ Text Phrase
          > Related: Model Class
        - Class As Associated One Side
          @ Multiplicity
          @ Conditionality
          @ Text Phrase
          > Related: Model Class
        - Class As Associated Other Side
          @ Multiplicity
          @ Conditionality
          @ Text Phrase
          > Related: Model Class
        - Class As Link
          @ Multiplicity
          > Related: Model Class
        - Class As Supertype
          > Related: Model Class
        - Class As Subtype
          > Related: Model Class
        - Class As Derived One Side
          @ Multiplicity
          @ Conditionality
          @ Text Phrase
          > Related: Model Class
        - Class As Derived Other Side
          @ Multiplicity
          @ Conditionality
          @ Text Phrase
          > Related: Model Class
      > Imported: Model Class


End 
---

$Log: compare-i175.ant,v $
Revision 1.1  2009/09/03 18:22:09  rmulvey
job:dts0100616734
Archive documentation and other development notes following the R3_0_0 release.  These are being archived under Documentation/internal/technical/archive/20090903

Revision 1.10  2009/01/01 23:13:35  rmulvey
Job:4060
Batch promotion of copyright changes from Review-i4060 and Review-i4060-01.

Revision 1.9.160.1  2008/12/31 16:10:48  rmulvey
Job:4060
This is a batch commit of 2009 copyright changes to branch Review-i4060.  This includes the
report that outlines all changes made (before/after for each line changed).  This report is found here: <cvs>/Documentation/internal/test_results/R2_1_2/i4060/update-copyright-results.txt.

Revision 1.9  2004/07/07 16:37:55  campbell
Job: 175
Addressed review issues.

Revision 1.8  2004/07/02 21:36:30  campbell
Job: 175
Rearranged tree to match Explorer and Outline.

Revision 1.7  2004/07/01 19:50:52  campbell
Job: 175
Addressed review issues.

Revision 1.6  2004/06/24 06:12:27  campbell
Job: 175
Changes after review.

Revision 1.5  2004/06/23 08:07:54  campbell
Job: 175
Updated with comments from GBR.
Corrected document title.
Corrected example to include unique id attributes
(metamodel unique id _values_ are suppressed,
not user model unique id attributes).

Revision 1.4  2004/06/22 04:24:17  campbell
Job: 175
Updated with comments from GBR.

Revision 1.3  2004/06/21 13:30:36  campbell
Job: 175
Ready for review.

Revision 1.2  2004/06/21 12:23:01  campbell
Job: 175
Increased detail of requirement. Work required is
outstanding.

Revision 1.1  2004/06/18 04:44:28  campbell
Job: 175
Introduced.
