========================================================================

File:      $RCSfile: i1167.ant,v $
Version:   $Revision: 1.1 $
Modified:  $Date: 2009/09/03 18:28:47 $

(c) Copyright 2005-2009 by Mentor Graphics Corp. All rights reserved.

========================================================================
This document contains information proprietary and confidential to
Mentor Graphics Corp., and is not for external distribution.
========================================================================

Model Compiler Analysis Note
External Entity Import Tool
"Guthrie"

1. Abstract
-----------
This note outlines requirements and analysis for an ease-of-use tool that
simplifies the process of integrating legacy source code.

2. History
----------

3. Document References
----------------------
[1] Bugzilla issue 1167
[2] Eclipse C/C++ view picture, 
	http://phoenix.projtech.com/bugzilla/attachment.cgi?id=41&action=view
[3] Eclipse file import dialog picture, 
	http://phoenix.projtech.com/bugzilla/attachment.cgi?id=42&action=view
[4] Source Navigator interface picture, 
	http://phoenix.projtech.com/bugzilla/attachment.cgi?id=43&action=view

4. Background
-------------
Nearly every customer who decides to start modeling their software has some code
that they do not desire to, or simply cannot, model.  This may be legacy 
software, device drivers, etc.  We do not want the need to use this software to 
be a hindrance to modeling other system components.  In fact, we want to make 
using this code as simple and straightforward as possible.   Currently, 
BridgePoint allows customers to “hook in” this software via External Entities 
(EEs).  External entities are simply subsystems in which the tool allows the 
user to create interface functions only.  These interface functions are created 
by hand by the user for every interface they need into the pre-existing software
module.

5. Analysis
-----------
5.1		Ease of use of the EDGE tool has been identified as a short-term 
		priority by management.  Due to the large amount of hand-crafted code 
		being integrated with modeled code, this project presents an immediate 
		impact to a large base of users.  It also provides impact in one of the 
		first places new users will go when using the tool.
		
5.2		In the continuing effort to make xtUML tools fun and easy to use, we 
		will explore an "EE Importer".  

5.3		Generally, the "EE Importer" will:
5.3.1	Provide a GUI for what is currently done manually
5.3.2	Be intuitive to use
5.3.3	Be available in the xtUML Modeling perspective
5.3.4	Integrate seamlessly into the EDGE UI
5.3.5	Be able to remove unneeded interfaces

5.4		From a functional perspective, the "EE Importer" will:
5.4.1	Discover external interfaces of existing/legacy/realized C/C++ code
5.4.2	Present the list of discovered interfaces conveniently to the user
5.4.3	Provide a mechanism for the user to select which interfaces need to be 
		bridged to in the EE
5.4.4	Selected interfaces will automatically be built into an EE with bridge 
		operations
5.4.5	Provide a mechanism for adding new bridges to an existing EE or defining
		a new EE
5.4.6	Provide a mechanism for resolving parameter type incompatabilities 
		between xtUML and hand-craft code
5.4.7	Provide help documentation about using the new feature

5.5		Possibilities
5.5.1	Eclipse provides a special navigation view [2] for working with C/C++ 
		files. This is a tree view where each file in the project has leaf nodes 
		underneath that show the includes, #defines, types, etc.  It would be 
		possible for us to create a similar view where the leaf nodes of each 
		file would be contained functions.  Each leaf node would likely have a 
		corresponding checkbox where the user would select the functions to 
		include in the EE.
5.5.2	With the Eclipse “Import” dialog [3] the user can import files outside 
		of the current project into the project.  The "EE Import" dialog could 
		be similar to this.  The tree on the left could show file names and the 
		tree on the right show the functions with checkboxes, much like the 
		File Import dialog.  The “Into folder” edit box would be changed to be a
		selection of the External Entity to use/create.  Use of a dialog such as
		this would integrate very nicely into the eclipse environment.
5.5.3	The are other GUIs that use source browsing capabilities.  One such 
		program is Source Navigator by RedHat [4].  This program asks you to 
		select a group of files, and then parses all of the files locating the 
		types, functions, parameters, etc.  The functions are then presented in 
		a list with all of the discovered information.  Our import dialog will 
		have to	do much the same.
5.5.4	The functionality could be integrated into an existing BridgePoint 
		plugin, or be provided in its own plugin.

5.6		Going Forward
5.6.1	The implementation possibility presented in 5.5.2 seems to fit our 
		desired functionality most closely.
5.6.2	Eclipse provides an extension point "org.eclipse.ui.importWizards" for
		creating new import wizards.
5.6.2.1	This extension point allows the developer to define, layout, and 
		implement custom wizards for importing data.
		
6. Work Required
----------------
6.1		Flesh out the design
6.1.1	Storyboard the dialogs
6.1.2	Research Eclipse ImportWizard extension
6.1.3	Describe how the Eclipse ImportWizard will be extended
6.1.3.1	Describe how the storyboards will be implemented
6.1.3.2	Describe how the interfaces will be discovered from the source files
6.1.3.3	Describe how the bridges will be created
6.1.3.4	Describe how the EE will be selected or created
6.1.4	Write full testing plan
6.1.5	Size the effort required to implement the design

6.2		Implement the design in code
6.2.1	Add main import dialog hook
6.2.2	Build EE Import dialog
6.2.2.1	Create a project that extends ImportWizard extension point
6.2.2.2	Layout dialog components
6.2.2.3	Hook "Browse..." for files into populating left pane
6.2.2.4	Populate interface list (right pane) on file select
6.2.2.4.1	Precheckmark bridges already existing
6.2.2.4.2	Allow uncheck to delete an existing bridge
6.2.2.5	Hook interface check
6.2.2.5.1	Handle unknown parameter types
6.2.2.6	Hook "New..." EE button
6.2.2.6.1	Layout dialog
6.2.2.6.2	Check for name collisions
6.2.2.7	Hook "Finish" button
6.2.2.7.1	Insert into/create new EE and bridges in model
6.2.2.7.2	Insert into/create files on disk

6.3		Run the tests
6.3.1	Run unit tests
6.3.2	Run BP system integration tests

6.4		Record the implementation

6.5		Write the help documentation

7. Acceptance Test
------------------
7.1		Unit Testing
7.1.1	The EE Importer will be tested for the functionality outlined in
		sections 5.3 and 5.4 above.  Namely, that it allows simple creation of 
		External Entities by browsing existing code.
		
7.2		System Testing
7.2.1	The BridgePoint team has an extensive set of regression tests that
		verify new functionality does not break old functionality.  This test
		suite will be run.
		
End
---

$Log: i1167.ant,v $
Revision 1.1  2009/09/03 18:28:47  rmulvey
job:dts0100616734
Archive documentation and other development notes following the R3_0_0 release.  These are being archived under Documentation/internal/technical/archive/20090903

Revision 1.5  2009/01/01 23:14:09  rmulvey
Job:4060
Batch promotion of copyright changes from Review-i4060 and Review-i4060-01.

Revision 1.4.30.1  2008/12/31 16:11:25  rmulvey
Job:4060
This is a batch commit of 2009 copyright changes to branch Review-i4060.  This includes the
report that outlines all changes made (before/after for each line changed).  This report is found here: <cvs>/Documentation/internal/test_results/R2_1_2/i4060/update-copyright-results.txt.

Revision 1.4  2005/09/15 18:04:00  kbrown
Job:1167
More updates to the work required.

Revision 1.3  2005/09/13 15:56:54  kbrown
Job:1167
Added references to screenshots which are contained in the bugzilla item.

Revision 1.2  2005/09/13 15:42:13  kbrown
Job:1167
Minor update.

Revision 1.1  2005/09/09 22:26:37  kbrown
Job:1167
Moved analysis note from MC-Documentation to Documentation because it is Tiger related.

Revision 1.2  2005/09/09 20:17:08  kbrown
Job:1167
Checking in completed analysis note.

Revision 1.1  2005/08/16 16:28:40  cstarret
Job:1167
Introduced Wasson (EE Importer) ant.

