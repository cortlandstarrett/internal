========================================================================

File:      $RCSfile: dedicated_text_editor.ant,v $
Version:   $Revision: 1.1 $
Modified:  $Date: 2009/09/03 18:24:29 $

(c) Copyright 2003-2009 Mentor Graphics Corporation All rights reserved.

========================================================================
This document contains information proprietary and confidential to
Project Technology, Inc. and is not for external distribution.
========================================================================

Tiger Project Analysis Note
Dedicated Text Editor

Abstract
--------
This document defines how Tiger supports editng Description
and Action_Semantics fields.

History
-------

Document References
-------------------
[1] org.eclipse.ui.editors.text.TextEditor
[2] com.projtech.bp.core/doc/internal/Action_Semantics/invoking_parser.ant [TBD]

Background
----------
The Dedicated Text Editor allows the user to edit Description and
Action_Semantics fields. The editor may be invoked from the Model
Explorer or from a marker (bookmark, task marker, or problem marker).

Analysis
--------
A specialized text editor is provided in two flavors. The first is
the Description field editor which is analogous to the Eclipse text
editor, except the text is read/written from the Model instead of
from a file. The second flavor is the Action_Semantics field editor
which, like the Description field editor, reads/writes the data from
the Model. The second editor has the additional function of parsing the
Action_Semantics text to validate the Object Action Language (OAL).

Both editors call on the basic Eclipse text editor support with the
following features:

 - presentation and user modification of text 
 - standard text editing operations such as cut/copy/paste, find/replace 
 - context and pulldown menus 
 - visual presentation of text annotations in rulers and as squigglies
   in the text
 - automatic update of annotations as the user edits text
 - presentation of additional information such as line numbers
 - hover support over rulers and text 

Both editors support Eclipse Bookmarks and Task Markers
in a manner indistinguishable from the built-in Eclipse
text editor. All markers and annotations have hover text shown on
both the left hand markers and annotations in the right hand overview
ruler.

The Action_Semantics editor parsing capability supports syntax
and semantic checking of the OAL as in BridgePoint Model Builder
version 6.1. OAL parsing provides the following capabilities for the
user, in the same manner as provided in the Eclipse JDT Java Editor:

 - parsing is done continuously as the user edits the text,
   giving immediate error feedback.
 - parse errors are highlighted in the text and shown as annotations
 - when the user saves, parse errors are added to the task list
 - changes in the model are not reflected in the text in Drop 1.
   For example, renaming a key letter using the Model Explorer
   will not change the Action_Semantics text which references
   the key letter.  The user must manually make
   the corresponding changes.
 - parsing is performed in a different thread from the one in which
   the editor runs.
   
A model listener is installed to watch for changes to the model. When
changes are detected, the Action_Sematics is reparsed.
 
Basic Eclipse text editor features which are not implemented in the
two editors (for Drop 1) include:

 - syntax highlighting (keywords one color, variables another, etc.)
 - content-assisted editing. If activated from a valid line of code
   in an editor, a scrollable list of available code completions is
   presented. 
 - text outlining pages that show the hierarchical structure of the
   text. Outlining pages doesn't make sense for the text editors nor
   for OAL. 
 - context sensitive help in the form of infopops
 - auto-indenting (if-then-else, for-end for, etc.)
 - hover text (where you hover over a piece of text and balloon
   help appears) is usually providing (in the case of the Java editor)
   via the appropriate javadoc for the thing hovered over. The Description
   editor shows no hover text. The Action Semantics editor shows
   a description of the text. For example, hovering over a key letters
   item shows the class description corresponding to the key letters.
 - editor preference handling. The Description and Action Semantic
   editors inherit preferences from the standard Eclipse text
   editor.
 - special key bindings. There are no special key bindings for the
   Description and Action Semantic editors. They inherit key
   bindings from the standard Eclipse text editor.

The editor implements the notion of read-only by honoring the readonly
attribute of the model sql file. If the sql file is readonly, the user
cannot make any changes to the text.

The text data is obtained via classes corresponding to the different
model elements. For example, the Description and Action_Semantics
fields for a Function are obtained using the class Synchronous_Service_c.
Such classes are populated and available only after the Model
Explorer has been opened.

If an editor is opened from the Model Explorer, a handle which
leads to the data is available from the Model Explorer instance.
If the editor is opened from a marker (double-click or GoTo), there
is no way to cause the model to be loaded (in Drop 1). Therefore,
opening an editor in this manner can only be done if the model has
already been loaded.

In order to implement markers in Eclipse, it is necessary to tie
them to a real file, called the editor resource file. When an
editor is opened, such a file is created (if it does not already exist)
in the same folder in which the .sql file resides. The file contains
information required to locate the pertinent instance in the model.
The file type (filename suffix) of the file determines whether
Description (.dsc) or Action_Semantics (.oal) is accessed.
An editor resource file is removed when the editor is closed, provided there
are no outstanding task, book, or problem markers related to the resource.
Note that the user may delete the file manually; doing so automatically
removes all associated task, book, and problem markers.

This implementation uses the class Ooaofooa to locate the containing
folder, and thus requires that the user first load the model
before editing Description or Action_Semantics fields.

Work Required
-------------
DTE1 Implement the basic text editor.

DTE1.1 Provide a mechanism for accessing objects in the model.

DTE1.1.1 Provide a mechanism for obtaining the text from the model.

DTE1.1.2 Provide a mechanism for saving text to the model.
In the case of Action_Semantics text, the text is saved as is,
not in "relocatables string" format. 

DTE1.2 Provide the ability to edit Description and Action_Semantics
fields via the Model Explorer.

DTE1.3 Provide the ability to add Task Markers and Bookmarks to any
list of text.

DTE1.4 Provide the ability to traverse from a marker to an existing
editor session, or open a new edit session if one is not already open.

DTE1.5 Provide the ability to open the editor from the associated
resource file.

DTE1.6 Provide hover text on all annotations and markers.

DTE2.1 Provide the ability to parse the OAL text [2].

DTE2.2 Show parse errors as annotations in the text with hover
text describing the error.

DTE2.3 Show parse errors as problem markers in the left-hand ruler
and as tasks in the task list, when the text is saved.

End
---
$Log: dedicated_text_editor.ant,v $
Revision 1.1  2009/09/03 18:24:29  rmulvey
job:dts0100616734
Archive documentation and other development notes following the R3_0_0 release.  These are being archived under Documentation/internal/technical/archive/20090903

Revision 1.10  2009/01/01 23:13:41  rmulvey
Job:4060
Batch promotion of copyright changes from Review-i4060 and Review-i4060-01.

Revision 1.9.168.1  2008/12/31 16:10:55  rmulvey
Job:4060
This is a batch commit of 2009 copyright changes to branch Review-i4060.  This includes the
report that outlines all changes made (before/after for each line changed).  This report is found here: <cvs>/Documentation/internal/test_results/R2_1_2/i4060/update-copyright-results.txt.

Revision 1.9  2003/08/19 23:52:16  dougf
job: 59
working editor updated document per RVM

Revision 1.8  2003/08/08 14:26:43  dougf
job: 59
working editor without parsing

Revision 1.7  2003/08/06 19:25:37  dougf
job: 59
working editor without parsing

Revision 1.6  2003/08/05 18:10:03  dougf
job: 59
working editor without parsing

Revision 1.5  2003/08/05 16:04:23  dougf
job: 59
working editor without parsing

Revision 1.4  2003/07/30 23:44:53  dougf
job: 59
working editor without parsing

Revision 1.3  2003/07/30 22:27:52  dougf
job: 59
working editor without parsing

Revision 1.2  2003/07/30 21:50:10  dougf
job: 59
working editor without parsing

Revision 1.1  2003/07/25 16:46:49  dougf
job: 59
working editor without parsing

