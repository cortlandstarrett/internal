========================================================================

File:      $RCSfile: i359.dnt,v $
Version:   $Revision: 1.1 $
Modified:  $Date: 2009/09/03 18:24:28 $

(c) Copyright 2004-2009 by Mentor Graphics Corp. All rights reserved.

========================================================================
This document contains information proprietary and confidential to
Mentor Graphics Corp., and is not for external distribution.
========================================================================

Tiger Project Design Note
Add support for derived attribute activity editor

Abstract
--------
This note describes the changes needed to open the activity editor
for a derived attribute.

History
-------
final i359-011405-01.rvm

Document References
-------------------
Issue 359

Background
----------
The derived attribute editor does not work correctly, as documented in the
issue.

Design
------

1. Open editor with correct class instance

When the activity editor is opened, the ShowActivityAction.run() method checks
if the current instance is an Attribute instance.  If it is, then the code 
changes the current instance to be the Derived Attribute instance.  This is 
incorrect. The activity editor expects an Attribute instance, so this special 
case code is removed.

2. Add support for editing DerivedBaseAttribute class directly

When the Action semantics field is opened from the Properties editor the
class of the instance being edited is DerivedBaseAttribute_c (from the Model
Explorer tree it's Attribute_c).  

2.1 A case for DerivedBaseAttribute_c is added to the following methods:

AllActivityModifier.parseAction()
AllActivityModifier.updateSuc_Pars()
TextParser.action()

2.2  The following archetypes are changed to add the DerivedBaseAttribute_c
class to the list of classes code is generated for:

create_editorlistenerdata_java.arc
create_modeladapter_java.arc

3.  Add attribute names to instance identifier class

The class EditorModelId is a general purpose class for holding the identifier
of an instance.  The class currently assumes that the order of identifying
attributes supplied to the class is always supplied in the same order.
The Attribute and Derived Base Attribute classes, while having the same
identifying attributes, supply them in a different order.  To workaround this,
the EditorModelId class is changed to use the attribute name to lookup the
identifying attribute value.

3.1 The operation EditorModelId.getId1Attr() currently takes an int argument
that is the index of the attribute.  The argument is changed to String, and
the method changed to search for an entry that is prefixed with the argument.
If there is a match, the return value is the entry minus the prefix (argument).
If there is no match, the empty string is returned.  The function is also 
renamed to getIdAttr(), to reduce confusion.

3.2 Invocations of getIdAttr() (generated by create_modeladapter_java.arc)
are changed to pass the attribute name instead of the index.

3.3 The generated adapter method getIdValue() is changed to prepend the
attribute name to the attribute value that is passed to the EditorModelId.add()
method.  For example, "Attr_ID: " + String.valueOf(Attr_id) would be used for
an identifying attribute named Attr_ID.

4.  Context menu changes

The issue states: 

The default editor for attributes should be the description editor unless the 
attribute is derived, in which case the default should be the activity editor.

This work is deferred to a later design, as it would require research to
determine how to change an object contribution's default at run time.

5. Suc_Pars initial value

The initial value for all Suc_Pars attributes is changed to be 
'Parse on apply set but never been parsed', instead of the current default 
'Do not Parse'.

Work Required
-------------

1. Open editor with correct class instance

The change is made to ShowActivityAction.java.

2. Add support for editing DerivedBaseAttribute class directly

2.1 A case for DerivedBaseAttribute_c is added to AllActivityModifier.java
and TextParser.java.

2.2  The following archetypes are changed as described in the design:

create_editorlistenerdata_java.arc
create_modeladapter_java.arc

3.  Add attribute names to instance identifier class

3.1 The class EditorModelId.java is changed as described in the design.

3.2 The file create_modeladapter_java.arc is changed as described in the design.

3.3 The file create_modeladapter_java.arc is changed as described in the design.

4.  Context menu changes

The issue is opened.

5. Suc_Pars initial value

The changes are made to ooaofooa.mdl (and .bak)

5.1  The enumeration 'ParseStatus' is created with the following enumerators:

doNotParse        - Value: 0
parseSuccessful   - Value: 1
parseUnsuccessful - Value: 2
parseInitial      - Value: 3

5.2  The Suc_Pars attributes are changed to have the type ParseStatus for all
classes that have a Suc_Pars attribute.

5.3  The initialize() operation has 
'self.Suc_Pars = ParseStatus::parseInitial;' added to it for the following
classes:  

Bridge
Function
Operation

The StateMachineState.initialize() operation has 
'act.Suc_Pars = ParseStatus::parseInitial;' added after the act instance is
created.

The Attribute.migrateBaseToDerived() operation has 
'dbattr.Suc_Pars = ParseStatus::parseInitial;' added after the dbattr instance 
is created.

5.4  The literal numbers are changed to the ParseStatus enum values in 
State Machine State.get_compartment_text().

5.5  The literal numbers are changed to the ParseStatus enum values in 
handwritten code in the classes ParseAllInDomain.java and 
AllActivityModifier.java.

5.6  The literal number is changed to the ParseStatus enum value in 
the function Assignment_expr_end() in function_import.sql.

Unit Test
---------

- Add an attribute named x to a class
- Change attribute to derived
- Select Open With>Activity Editor
R Activity Editor opens
- Type 'test = 1;' in editor
R Syntax error
- Hover over left error marker
R 'You must assign a value to the derived attribute self.x' appears
- Hover over right overview marker
R 'You must assign a value to the derived attribute self.x' appears
- Type 'self.x = test;' in editor
R Error marker turns to gray
- Select attribute x in Model Explorer
- Double click
R Description Editor opens
- Type 'This is a test' in Description
- Save description

- Select attribute x in Model Explorer
- Select Set as Base Attribute
R Activity Editor closes
R Description Editor remains open, with correct contents

- Select attribute x in Model Explorer
- Select Set as Derived Attribute
R Description Editor remains open, with correct contents

- Open Properties view
- Select 'Show Advanced Properties'
- Open Derived Base Attribute
R Successful Parse Indicator value is 'Parse on apply set but never been parsed'
- Select Action Semantics, open editor from property
R Activity Editor opens
R Activity Editor is empty
- Type 'self.x = 1;' in editor
- Save activity
- Select attribute x in Model Explorer
R Successful Parse Indicator value is 'Parse successful'

- Change 1 to true
R Error appears 
- Save activity
R 3 Errors appear in problem list
- Select attribute x in Model Explorer
R Successful Parse Indicator value is 'Parse unsuccessful'
- Close activity
- Double click 'Data types are not assignable...' error in problem list
R Attribute activity editor opens
- Change true to 1
R Error grays
R Errors remain in problem list
- Select attribute x in Model Explorer
R Successful Parse Indicator value is 'Parse unsuccessful'
- Save activity
R Error disappears
R Errors are removed from problem list
- Select attribute x in Model Explorer
R Successful Parse Indicator value is 'Parse successful'

- Create a Function
R Successful Parse Indicator value is 'Parse on apply set but never been parsed'

- Create a Bridge
R Successful Parse Indicator value is 'Parse on apply set but never been parsed'

- Create an Operation
R Successful Parse Indicator value is 'Parse on apply set but never been parsed'

- Add a new state to a state machine on a canvas
- Select 'Show Advanced Properties'
R Successful Parse Indicator value is 'Parse on apply set but never been parsed'
R State is empty
- Change property to 'Parse successful'
R State has 'entry/' added to it on the canvas
- Change property to 'Parse unsuccessful'
R State has '*** PARSE ERROR(S) ***' added to it on the canvas

The above tests are executed manually.  Automated Attribute activity tests 
similar to those already existing in ui.text.test are added as well.

End
---

$Log: i359.dnt,v $
Revision 1.1  2009/09/03 18:24:28  rmulvey
job:dts0100616734
Archive documentation and other development notes following the R3_0_0 release.  These are being archived under Documentation/internal/technical/archive/20090903

Revision 1.8  2009/01/01 23:13:41  rmulvey
Job:4060
Batch promotion of copyright changes from Review-i4060 and Review-i4060-01.

Revision 1.7.44.1  2008/12/31 16:10:55  rmulvey
Job:4060
This is a batch commit of 2009 copyright changes to branch Review-i4060.  This includes the
report that outlines all changes made (before/after for each line changed).  This report is found here: <cvs>/Documentation/internal/test_results/R2_1_2/i4060/update-copyright-results.txt.

Revision 1.7  2005/03/10 20:58:05  greg
Job: 359
Update unit test

Revision 1.6  2005/01/14 17:30:38  greg
Job: 359
Addressed review observations

Revision 1.5  2005/01/13 23:24:19  greg
Job: 359
Fix typo

Revision 1.4  2005/01/13 22:40:26  greg
Job: 359
Add automated test discussion

Revision 1.3  2005/01/13 22:22:50  greg
Job: 359
Add changes in function_import.sql to use enum

Revision 1.2  2005/01/13 21:43:27  greg
Job: 359
Add changes in hand written code to use enum

Revision 1.1  2005/01/13 21:16:50  greg
Job: 359
Introduced

