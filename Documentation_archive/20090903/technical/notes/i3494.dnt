========================================================================

File:      $RCSfile: i3494.dnt,v $
Version:   $Revision: 1.1 $
Modified:  $Date: 2009/09/03 18:21:08 $

(c) Copyright 2007-2009 by Mentor Graphics Corp. All rights reserved.

========================================================================
This document contains information proprietary and confidential to
Mentor Graphics Corp., and is not for external distribution.
========================================================================

BridgePoint Project Design Note
Support flat view element chooser

1. Abstract
-----------
This note describes the design for supporting a flat view dialog containing a
list of elements available for choosing.  Moreover it describes the design for
using this dialog to choose types.

2. History
----------

3. Document References
----------------------
[1] Bugzilla item 3494
    http://tucson.wv.mentorg.com/bugzilla/show_bug.cgi?id=3494
[2] cvs://Documentation/internal/technical/notes/i3494.ant
[3] Bugzilla item 3595
    http://tucson.wv.mentorg.com/bugzilla/show_bug.cgi?id=3595

4. Background
-------------
See section 4 of [2].

6. Design
---------
6.1 SWT dialog

All classes which are added, described below, are added to the cvs file list in
the ant script.

6.1.1 Selection dialog

A new class is introduced, ElementSelectionDialog.java.  This class supports
the container which will hold the flat view list for choosing elements.  Later
when the tree view is added, it will be extended to allow switching between the
flat view and tree view.  The selection dialog contains two buttons, OK and
Cancel.  The OK button is enabled based on a valid selection.

6.1.2 Flat view

A new class is introduced, ElementSelectionFlatView.java.  This class supports
displaying a composite with a search field, table, and a label.

6.1.2.1 Search field

The search field supports user input which filters the list of elements shown in
the table.  There will be two check boxes, one for case sensitivity and the
other for use of regular expressions.  When regular expressions are not used,
the default, the * character matches any string and the ? character matches any
single character.  The \ character is an escape character for the ? and *
characters.  When the filtering uses regular expressions the java pattern
compiler is used.  Pattern syntax errors are caught and displayed for the user.
When nothing is entered into the search field the text, "Enter text to shorten
the list...", will appear.  This text is removed when the field is entered.  The
field's value is always assumed to contain a * at the end of the text.

6.1.2.2 Table

The table contains two columns at this point.  The element, by name, and the
element's path.  The two columns have headers, Element and Element Path
respectively.  Both columns are left justified.  When these headers are pressed
the order is sorted alphabetically in ascending or descending order.  The
AlphaSorter.java class is modified to allow ascending and descending ordering.  
The list of elements that will show is passed in as an argument to the
constructor.  The table can show any element type.

getPath operations are added such that the path of a data type may be
determined.  Some of these operations were already present in the model, but the
patterns are changed such that the element which holds the operation may have
it's name excluded from the path.  The operations are also written such that the
path is built along the call chain, passing the current string value of the
path.  For S_IRDT instances the path is determined by the O_OBJ associated, not
the S_DT.

6.1.2.3 Label

The label area is positioned at the end of the view.  This label is used to show
the existing element association.  For example, in the data type case it will
show the current type.

6.2 Context menu entries

The decision was made to only allow access to the dialog created above through a
context menu.  The reason behind the decision was to prevent the need to teach
users a new method for type setting.  Another reason for the decision was that
we do not want to enhance the properties view any further, rather we'd like to
move away from the view.  Given this decision, context menu entries are added
for all elements which require type selection.

The context_menu.pei.sql file is extended to add the following entries:

C_IO_SetReturnType
C_PP_SetType
S_BPARM_SetType
S_BRG_SetReturnType
S_SYNC_SetReturnType
S_SPARM_SetType
S_MBR_SetType
SM_EVTDI_SetType
O_TPARM_SetType
O_TFR_SetReturnType
O_ATTR_SetType
S_UDT_SetType

Each of these entries use a new attribute, which is added to the Context Menu
Entry class, UsesSelectionDialog.  This boolean indicates whether or not the
code generation will create an action which makes use of the new selection
dialog.

Corresponding functions are added to the Context Menu Entry Functions package.
These functions are written to select the element which is selected in the UI,
then select the existing association with that element.  In order to allow
access to the existing associated element in the dialog, a new bridge is added.
Use of this bridge, USER::selectExisting, is looked for during code generation.
If it is found the selected value is passed to the selection dialog so that the
label described in 6.1.2.3 can be populated correctly.  The next bit of OAL in
these functions selects the element selected in the dialog.  The archetypes will
generate code that selects all elements of the expected selection type in the
model and pass this set to the selection dialog.  This set is what is shown in
the table described in 6.1.2.2.  Additionally this OAL is translated to get the
element selection returned by the selection dialog.  The final bit of OAL
actually unrelates the element from the existing associated element and then
relates the element to the newly selected element.

For the type case we must filter what types may be selected.  This is done by
making a call to a new operation in the selections where clause.  Each class
which requires the context menu entry has the operation added.  These operations
conform to the same set of rules which the properties code follows.  They are
named canUseDataType.

In order to achieve code generation for entries which have the
UsesSelectionDialog attribute set to true a new archetype is added.  This
archetype, create_selection_dialog_action.inc, simply creates the action for the
entry.  The archetype uses function_body.inc to generate the actions run body.
The function_body.inc archetype is modified to generate code as described in the
paragraph above (5th paragraph in this section).

The archetype which generates the plugin definitions for these actions is
changed to append ellipses after the CME name.  This indicate that a dialog will
be displayed when running the action.

6.3 Make background transparent for core type icon

The core data type icon did not have a transparent background.  This did not
look good in the label for an existing type.  The icons background is changed to
be transparent.

6.4 Copy user data type description during paste

The paste infrastructure always creates a new S_DT instance for copied user data
types, see [3].  The name of the copied S_DT was being transferred to the new
element, but the description was not.  The OAL in Data Type
Package.pasteUserDataType is changed to transfer the description data as well.

7. Design Comments
------------------

8. Work Required
----------------
All work required is described in the design section.

9. Unit Test
------------
_- Select an interface operation
_- Right click
_R The Set Return Type... entry is available
_- Click the entry
_R The selection dialog is shown
_R The label in the selection dialog correctly shows the existing type
_R If dimensions are used, the void data type is excluded
_R All other system level data types show in the table
_- Select one of the types
_R That type is associated with the interface operation

_- Select a property parameter
_- Right click
_R The Set Type... entry is available
_- Click the entry
_R The selection dialog is shown
_R The label in the selection dialog correctly shows the existing type
_R The void data type is excluded
_R All other system level data types show in the table
_- Select one of the types
_R That type is associated with the property parameter

- For all other elements repeat the following
  
  - For parameters, and user data type
  
  _- Select the element in a standalone domain
  _- Right click
  _R The Set Type... entry is available
  _- Click the entry
  _R The selection dialog is shown
  _R The label in the selection dialog correctly shows the existing type
  _R The void data type is excluded
  _R All other data types in the domain show in the table
  _- Select one of the types
  _R That type is associated with the element

  _- Select the element in a formal component
  _- Right click
  _R The Set Type... entry is available
  _- Click the entry
  _R The selection dialog is shown
  _R The label in the selection dialog correctly shows the existing type
  _R The void data type is excluded
  _R All other data types in the system and component show in the table
  _- Select one of the types
  _R That type is associated with the element
  
  - For actions
  
  _- Select the element in a standalone domain
  _- Right click
  _R The Set Return Type... entry is available
  _- Click the entry
  _R The selection dialog is shown
  _R The label in the selection dialog correctly shows the existing type
  _R If dimensions are used, the void data type is excluded
  _R All other data types in the domain show in the table
  _- Select one of the types
  _R That type is associated with the element
    
  _- Select the element in a formal component
  _- Right click
  _R The Set Type... entry is available
  _- Click the entry
  _R The selection dialog is shown
  _R The label in the selection dialog correctly shows the existing type
  _R If dimensions are used, the void data type is excluded
  _R All other data types in the system and component show in the table
  _- Select one of the types
  _R That type is associated with the element

_- Open the selection dialog
_- Click in the search field
_R The existing default text is removed
_- Click into the table
_R The default text is replaced

_- Put a letter into the search field
_- Click in the table
_- Click back into the search field
_R The default text is not entered

_- Enter a letter into the search field
_R Only types beginning with that letter are shown in the table
_- Enter a unique name into the field
_R Only that type is shown

_- Check the Case Sensitive check box
_- Enter an upper case letter
_R Only names including an upper case of that letter are displayed

_- Check the Use Regular Expressions check box
_R The info text below the search field is removed
_- Enter * into the search field
_R Red text displays the following compilation error:
   "Dangling meta character '*' near index 0"
_- Uncheck the check box
_R The info text is replaced, the error is removed

_- Check the Case Sensitive and Use Regular Expression check boxes
_- Hit Cancel
_- Reopen the selection dialog
_R Both boxes remain checked

_- Enter into the search field a value which displays only one element
_R The OK button is enabled
_- Cancel the dialog
_- Reopen the dialog
_R The same element is shown
_R The OK button is enabled

_- Select an element in the selection dialog table
_R The OK button is enabled
_- Deselect the element
_R The OK button is not enabled

_- Enter a value into the search field
_- Close the dialog
_- Reopen the dialog
_R The search value is still present

End
---

$Log: i3494.dnt,v $
Revision 1.1  2009/09/03 18:21:08  rmulvey
job:dts0100616734
Archive documentation and other development notes following the R3_0_0 release.  These are being archived under Documentation/internal/technical/archive/20090903

Revision 1.3  2009/01/01 23:13:07  rmulvey
Job:4060
Batch promotion of copyright changes from Review-i4060 and Review-i4060-01.

Revision 1.2.4.1  2008/12/31 16:10:11  rmulvey
Job:4060
This is a batch commit of 2009 copyright changes to branch Review-i4060.  This includes the
report that outlines all changes made (before/after for each line changed).  This report is found here: <cvs>/Documentation/internal/test_results/R2_1_2/i4060/update-copyright-results.txt.

Revision 1.2  2008/06/27 21:30:15  tlondon
Job: 3494

Address review observations

Revision 1.1  2008/06/26 17:01:33  tlondon
Job: 3494

Introduce

