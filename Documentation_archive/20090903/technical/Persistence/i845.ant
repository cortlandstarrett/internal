========================================================================

File:      $RCSfile: i845.ant,v $
Version:   $Revision: 1.1 $
Modified:  $Date: 2009/09/03 18:22:28 $

(c) Copyright 2005-2009 by Mentor Graphics Corp. All rights reserved.

========================================================================
This document contains information proprietary and confidential to
Mentor Graphics Corp., and is not for external distribution.
========================================================================

Tiger Project Analysis Note
Multi file model persistence

Abstract
--------
This document describes the requirements for persisting models across multiple
file resources.

History
-------

Document References
-------------------
[1] Bugzilla issue 845
[2] Bugzilla issue 597

Background
----------
R1.0 of the BridgePoint tool stores models in a single monolithic file. This
solution is unacceptable for many customers, because it hampers team working.
This document describes the required characteristics and behavior associated
with storing models across multiple files.

Analysis
--------
The release 1.0 behavior is an acceptable starting point for this work. At the
highest level of abstraction, the multiple file persistence behavior shall be
identical to that shown by the existing persistence mechanism, except that the
model is no longer held in a single file. Of course, this simple statement
confers much additional complexity on the solution, the required behavior for
which is specified here.

Additional complexity is covered by three main topics; Repository Structure,
Dangling References and Mapping Existing Behavior.

1. Repository Structure
The file structure for the system after these changes have been applied is as
follows:

+-+ projectname Project 
  |
  +-+ models
    |
    + projectname.xtuml(system data)
    |
    +-+ domain1
    | |
    | + domain1.xtuml (data for domain 1) 
    | |
    | +-+ subsystem1
    |   |
    |   + subsystem1.xtuml (data for subsystem 1)
    |   |
    |   +-+ statemachine1
    |     |
    |     + statemachine1.xtuml (data for state machine 1)
    |
    +-+ domain2
    | |
    | + domain2.xtuml (data for domain 2)
    |
    etc.
    
Each component kind has its own folder in the resource structure. This allows
name scoping rules to be met without having to expose the user to numbered post-
fixes to filenames.

Note that this analysis note does not address the actual requirements for break-
down of the model into file components, that specification work shall be done
elsewhere. The breakdown specified above is for example only. The hierarchy, for
the purposes of this analysis, is restated abstractly thus:

+-+ projectname Project 
  |
  +-+ models
    |
    + projectname.xtuml(system data)
    |
    +-+ component1
    | |
    | + component1.xtuml (data for component 1) 
    | |
    | +-+ component2
    |   |
    |   + component2.xtuml (data for component 2)
    |   |
    |   +-+ component3
    |     |
    |     + component3.xtuml (data for component 3)
    |
    +-+ component4
    | |
    | + component4.xtuml (data for component 4)
    |
    etc.

Notice that, once inside the initial fixed 'models' folder, the data structure
is completely regular, regardless of the component contents or position within
the hierarchy.

It is a new requirement that there be a system data file. Currently, system data
is special cased and inferred from the project name. This policy has changed.
Note that it is likely that additional data shall be stored in this file beyond
the S_SYS instance as requirements for R1.0 become clear.

2. Dangling Reference handling
Once model storage is spread across multiple files, it is possible for parts of
the model storage to be deleted outside of the tool. The resource listener
behavior shall function as it did before to detect such changes (see 3.2 below).
If at any time in the normal performance of the tool an attempt is made to
access data in an instance that was in a since-deleted resource, the tool shall
handle this gracefully by displaying the message, 'The selected element is no
longer in the workspace' in the bottom status bar line. This architectural
feature shall ensure that the user always gets some feedback about why something
they expected to work, didn't.

Additional User Interface behaviors shall be added by other work (this work
focuses on providing the architectural support for multi file persistence).
These behaviors will prevent the above fallback behavior being seen and give the
user better cues as to what is wrong. Examples of such enhanced behavior are
showing an error marker in the Model Explorer and Resource navigator trees, or
displaying an error icon on a diagram symbol that represents a dangling
reference.

It shall be possible to delete a diagram element that represents a dangling
reference. This shall be treated as a change to the enclosing component, just
like any other change. Removal of a dangling diagam element shall therefore
cause the Team interface to expect a new revision etc.

An 'Orphaned' name is unacceptable at all times, so naming information for
potentially dangling components shall always be cached where required. Displayed
cached values for dangling references to model elements shall always be
readonly.

Instances and instance sets obtained when traversing dangling references shall
return an empty instance or set. It shall be up to the analyst to ensure that
suitable handling is in place for all places in the OAL where this can happen.
A new requirement is placed on the dangling reference test tool[2] to reliably
detect failure to do this.

3. Mapping Existing Behavior onto multiple files
3.1 The renaming behavior present in the current release shall be retained and
    shall be responsible for keeping the component name, component data file
    name and the enclosing folder name synchronized at all times, whether
    changed from inside or outside the tool.

3.2 Resource change listeners shall behave as they did for the first version of
    the tool, but shall listen for changes individually for each component.
    Deletion shall be handled by removing the deleted component from the model.
    When a resource changes on disk, the component (not the whole model) shall
    be reloaded and syntax checked as is currently done. In all cases, the
    resource listener shall trigger update of the problems list for dangling
    references caused or removed by the detected resource change.

3.3 Lazy loading behavior shall be unchanged from release 1.0, except of course
    that it applies to all files. i.e. the data for a component is loaded only
    when needed. Multiple file storage introduces the possibility that a
    subordinate component can be loaded before its parent. Lazy loading policy
    applies equally in this case, the data for the parent is not loaded unless
    needed. Notice that in many cases immediate loading of parent data will
    always be triggered. For example, a class diagram shows the type of its
    attributes and so unless there are no attributes to display, the
    corresponding domain data must be loaded.
    
3.4 Model compare functionality shall work as expected for individual file
    components. That is, the compare function shall handle cases where the
    passed model file is not a complete model. Where the comparison is being
    done against a tree (whether the component is the root of the tree or not),
    compare shall show all differences for the whole model. Where only component
    information is available, only the component data shall be compared. This
    latter situation exists when comparing two revisions of a component in the
    resource history. In this case, the component could have been combined with
    any revision of its child components. Since it cannot be known which child
    component revision is the correct one to compare with, it makes no sense to
    attempt to compare more than the component data.

3.5 Parsing behavior shall be as for the current tool, except that its behavior
    shall be robust for components that have been removed by Resource Navigator
    or Team operations. Since dangling reference problems are reported
    immediately by a requirement stated elsewhere, existing parser error
    messages are adequate and no additional error messages are anticipated. In
    the presence of a dangling reference, the parser shall behave as if it found
    a reference to something that does not exist.

3.6 The MC-3020 plugin shall do whatever additional work is required to work
    with multiple model components. This work shall be done under a separate
    issue.
     
Work Required
-------------
In this section, break out the consequential work (as a numbered list) needed 
to meet the requirements specified in the Analysis section.

Acceptance Test
---------------
For an _arbitrary_ selected component hierarchy of:

  - System > Domain > Subsystem > State Machine
                    > Data Type Package > Data Type Package
                    > External Entity Package > External Entity Package

The tool shall function as it does today, except:

  - Resource Navigator entries shall be present (in nested folders as specified
    above) for all the component kinds above.
  - Team decorations shall be shown against all the component kinds above. 
  - Delete, Rename and Team operations shall be available on all the component
    kinds listed above in the Model Explorer.
  - Delete, Rename and Team operations shall be handled as expected by Bridge-
    Point.
  - Problems introduced by components being removed or introduced by Team or
    Resource Navigator operations shall be listed in a timely manner.
  - Attempted navigation to elements in components that have been removed are
    all handled gracefully.
  - Changes using the Team and Resource History interfaces shall be reflected in
    the model state in a timely manner.
  
Use cases
---------

The following scenarios will have the following behavior:

TODO:  clarify proxy behavior

1. Rename model element that is a component from Model Explorer

    Precondition:  Model Element exists in Model Explorer
    Action:  User changes name of model element
       Variation 1: Using Model Explorer
       Variation 2: Using Properties view
    Postcondition:
       - Model Element name changes in BridgePoint perspective
       - Component file and folder for model element are renamed
       - Model Element naming data is updated in <component>.xtuml file       

2. Rename component file

    Precondition:  Model component file exists in Resource Navigator
    Action:  User changes name of file
       Variation 1: Component data is loaded in Model Explorer
       Variation 2: Component data is not loaded in Model Explorer
    Postcondition:
       - Component file and folder are renamed
       - Model Element name changes in BridgePoint perspective
       - Model Element naming data is updated in <component>.xtuml file       

3. Rename component folder

    Precondition:  Model component folder exists in Resource Navigator
    Action:  User changes name of folder
       Variation 1: Component data is loaded in Model Explorer
       Variation 2: Component data is not loaded in Model Explorer
    Postcondition:
       - Component file and folder are renamed
       - Model Element name changes in BridgePoint perspective
       - Model Element naming data is updated in <component>.xtuml file       

4. Delete model element that is a component from Model Explorer

    Precondition:  Model Element exists in Model Explorer
    Action:  User selects 'Delete' for model element
    Postcondition:
       - Model Element no longer appears in BridgePoint perspective
       - Component file and folder for model element are deleted
           (all child folders and files deleted as well)
       - Model Element graphical data (if present) deleted from file.
       
5. Delete component file

    Precondition:  Model component file exists in Resource Navigator
    Action:  User deletes file
       Variation 1: Component data is loaded in Model Explorer
       Variation 2: Component data is not loaded in Model Explorer
    Postcondition:
       - Component file and folder are removed
       - Model Element is removed from BridgePoint perspective

6. Delete component folder

    Precondition:  Model component folder exists in Resource Navigator
    Action:  User deletes folder
       Variation 1: Component data is loaded in Model Explorer
       Variation 2: Component data is not loaded in Model Explorer
    Postcondition:
       - Component file and folder are removed
       - Model Element is removed from BridgePoint perspective

7. Replace component from Model Explorer

    Precondition:  Model Element with changes exists in Model Explorer.
    Action:  User selects 'Replace with Latest...'
       Variation 1: Changes are only in Model Element
       Variation 2: Change is a sub-component added to Model Element
    Postcondition:
       - Component file is replaced with latest version

8. Replace component file

    Precondition:  Model component file exists in Resource Navigator with 
       changes.
    Action:  User selects 'Replace with Latest...'
       Variation 1: Changes are only in Model Element
       Variation 2: Change is a sub-component added to Model Element
    Postcondition:  ???

9. Restore deleted component file

    Precondition:  Model component file was deleted from Resource Naviator
       Variation 1: File was deleted by use case 4
       Variation 2: File was deleted by use case 5
       Variation 3: File was deleted by use case 6
    Action:  User selects 'Restore from Local History...', and selects 
        deleted file
    Postcondition:  ???


End
---

$Log: i845.ant,v $
Revision 1.1  2009/09/03 18:22:28  rmulvey
job:dts0100616734
Archive documentation and other development notes following the R3_0_0 release.  These are being archived under Documentation/internal/technical/archive/20090903

Revision 1.4  2009/01/01 23:13:09  rmulvey
Job:4060
Batch promotion of copyright changes from Review-i4060 and Review-i4060-01.

Revision 1.3.30.1  2008/12/31 16:10:13  rmulvey
Job:4060
This is a batch commit of 2009 copyright changes to branch Review-i4060.  This includes the
report that outlines all changes made (before/after for each line changed).  This report is found here: <cvs>/Documentation/internal/test_results/R2_1_2/i4060/update-copyright-results.txt.

Revision 1.3  2005/09/20 14:49:20  greg
Job: 845
Add (incomplete) use cases

Revision 1.2  2005/06/27 19:58:13  campbell
Job: 845
Clarified that only fallback feedback is given to the user in the presence
of dangling references. Specified that attempting to traverse a dangling
reference shall return an empty result.

Revision 1.1  2005/06/23 22:37:22  campbell
Job: 845
Introduced.

