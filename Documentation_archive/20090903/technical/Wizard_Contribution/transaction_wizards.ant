========================================================================

File:      $RCSfile: transaction_wizards.ant,v $
Version:   $Revision: 1.1 $
Modified:  $Date: 2009/09/03 18:30:54 $

(c) Copyright 2003-2009 Mentor Graphics Corporation All rights reserved.

========================================================================
This document contains information proprietary and confidential to
Project Technology, Inc. and is not for external distribution.
========================================================================

Tiger Project Analysis Note
Transaction Wizards

Abstract
--------
This document defines how the wizards used to obtain data from the user 
are defined.

History
-------
  final - transaction_wizards-061303-01.rvm

Document References
-------------------
[1] bp.core/doc/internal/technical/drop_1.ant
[2] bp.core/doc/internal/technical/prototype_1.tnt
[3] bp.core/doc/internal/technical/Object_Contribution/
                                                 object_contribution.ant

Background
----------
When the user chooses a menu entry, Eclipse invokes the 'run' method on
an implementor of 'IAction' generated by the Tiger project. Code is
generated for all the action language in the client model that specifies
what is to happen when a given menu entry is selected. For many trans-
actions, such as create and delete, the code generated as specified under
object contributions[3] is sufficient. However, in many other cases, the
transaction requires additional data from the user. This document
describes how this additional data is specified by the analyst and how
the required data is collected and used.

Analysis
--------
For transactions that require additional information from the user, the
data is collected using Eclipse Wizards.

The solution adopted for the prototype[2] was deficient in a number of
ways:

 - The Wizard dialogs generated had mostly only a single widget per page,
   this was seen as poor user interface design.
 - Only a subset (dropdown list and get string) were implemented.
 - No defaulting behavior was implemented.
 - The drop down list entries were unsorted.
 - The page title and widget labels were derived from the function
   and instance handle names respectively. The names were thus 
   unfriendly.
 - The Wizards showed the default large Eclipse icon on the top right
   and the default purple small eclipse icon in the top left.

For the production tool, all additional widgets are placed on a
single page and are enabled and disabled in groups as needed. Human
readable title and widget labels are defined in coloring and new
large and small icons will be created for the dialogs.

Invocation Method
As described in [3], each transaction is defined by a XtUML function.
Functions that require additional user interface to be generated and 
executed on demand, use the following action language constructions
to indicate to the UI architecture that UI elements are needed:

 - USER::getString maps to a Text field.
 - USER::selectOne maps to a single selection dropdown list.

Additional USER bridges will be added at subsequent drops as required by
the interface for the drop.

Default instance handles are indicated to the UI architecture using the following
action language construction:

 - select [any|many] <instanceHandle> related by 
                 <startInstanceHandle>
                 <relationshipChain> where
                 (USER::[Single|Multiple]Default(id:selected.<identifier>))
for example:

 - select any dt related by self->S_DT[R114] 
                             where (USER::SingleDefault(id:selected.DT_ID))

Because of the asynchronous nature of user interactions, all action
language inside a function that uses the above constructions must be side
effect free. That is, no action statement may alter the state of the
client model. Thus, select statements are good, relate statements are
not. Side effect free 'if' tests are permissible and are honored by the
user interface by disabling widgets derived from statements inside an if
block where the controlling statement fails ('elseif' and 'else' are
similarly honored). Note that the asynchronous nature of the user inter-
face allows the user to go back and change selections, whereupon
previously disabled widgets are re-enabled.

Note that the side effect restrictions apply only to functions colored
as invoked from a menu entry and which require additional user interface.
The UI architecture prints errors for action language that violates these
rules.


Work Required
-------------
TW1.1   - Create a model to abstract and serve as a schema for storing
          information about user interactions.
TW1.2   - Create archetypes to scan client model function action
          language, identify the additional user interface needed and
          populate the model.
TW1.3   - Create archetypes that define a Wizard using this information
          and place all widgets on one dialog page.
TW1.4   - Create archetypes to implement all required widgets.
TW1.5   - Create archetypes to obtain the default value and set the 
          widget accordingly.

End
---
$Log: transaction_wizards.ant,v $
Revision 1.1  2009/09/03 18:30:54  rmulvey
job:dts0100616734
Archive documentation and other development notes following the R3_0_0 release.  These are being archived under Documentation/internal/technical/archive/20090903

Revision 1.4  2009/01/01 23:13:21  rmulvey
Job:4060
Batch promotion of copyright changes from Review-i4060 and Review-i4060-01.

Revision 1.3.170.1  2008/12/31 16:10:29  rmulvey
Job:4060
This is a batch commit of 2009 copyright changes to branch Review-i4060.  This includes the
report that outlines all changes made (before/after for each line changed).  This report is found here: <cvs>/Documentation/internal/test_results/R2_1_2/i4060/update-copyright-results.txt.

Revision 1.3  2003/06/16 18:02:19  campbell
Job: 20
Update for review observations.

Revision 1.2  2003/06/12 21:07:04  campbell
Job: 20
Update for typos.

Revision 1.1  2003/06/12 16:13:46  campbell
Job: 20
First Introduction
