========================================================================

File:      $RCSfile: transaction_wizards.dnt,v $
Version:   $Revision: 1.1 $
Modified:  $Date: 2009/09/03 18:30:54 $

(c) Copyright 2003-2009 Mentor Graphics Corporation All rights reserved.

========================================================================
This document contains information proprietary and confidential to
Project Technology, Inc. and is not for external distribution.
========================================================================

Tiger Project Design Note - Eclipse to Metamodel Bridge

Abstract
--------
This document identifies the infrastructure needed to get Eclipse to
invoke methods generated from the ooa of ooa model.

History
-------

Document References
-------------------
[1] bp.core/doc/internal/technical/Wizard_Contribution/
                                                 transaction_wizards.ant
[2] bp.core/mdl/context_menu.bak
[3] bp.core/doc/Object_Contribution/object_contribution.dnt

Design Comments
---------------
The specified format of the select statements allowed for ambiguity of
the required cardinality. For example:

select any car from instances of C where USER::selectMany(id:selected.Car_ID);

is inconsistent, the 'any' modifier conflicts with the 'selectMany'
bridge call. This cannot be detected by the syntax analyser. The syntax
is simplified to:

select any car from instances of C where USER::select(id:selected.Car_ID);

or, for multiple items,

select many cars from instances of C where USER::select(id:selected.Car_ID);

the cardinality of the select statement is now always used to determine
how many instances the analyst required. Similarly defaulting is
simplified to:

select any car from instances of C where USER::default(id:selected.Car_ID);

note that the default and selection navigations are tied together by the
use of the same instance handle, so:

select many cars related by buyer->C[R1] where USER::default(id:selected.Car_ID);
select many cars related by seller->[R2] where USER::select(id:selected.Car_ID);

will present a single list of all the cars related to the seller across
R2, but the list will contain preselections of the cars related to the
buyer across R1. This works for single selections too:

select any car related by buyer->C[R1] where USER::default(id:selected.Car_ID);
select any car related by seller->[R2] where USER::select(id:selected.Car_ID);

will present a drop list (since we can make only one choice) containing
the same set of cars as in the previous example (the 'any' modifier is
ignored for the purposes of loading the widget with choices). The
default value will be one of the cars related to the buyer across R1.

Design
------
TW1.1   - The context menu model is extended to capture entities for 
          storing information about user interactions.

          Two new entities are added to the model:
          - The entity, Step is related to Workflow to abstract the 
            fact that the user may need to perform zero or more
            distinct operations to complete a given workflow. This
            entity was not necessary for the Object Contributions[3]
            because all the user actions supported by that work were
            selected because they do not need additional user 
            interaction (in other words, the relationship between
            W_WOF and W_STEP yields zero instances of Step). A Step
            (W_STEP) is a set of user interactions that are enabled and
            disabled together (they originated from the same action
            language block and are therefore controlled by the same
            logic). A step has an Id and a reference to the workflow in
            which it exists. Just like the blocks from which they are
            derived, Steps are enabled sequentially and are also
            hierarchical. There are reflexive relationships to capture
            this information.
          - A Field (W_FLD) is a piece of information to be obtained.
            It is mappped by the design presented here to a widget that
            gathers the data. Each Step is made up of one or more
            Fields.

          A new association between Workflow and Context Menu Entry is
          introduced to capture the fact that a given context menu entry
          initiates a given workflow.
          
          For full details, see the context_menu model itself[2].

TW1.2   - Create archetypes to scan client model function action
          language, identify the additional user interface needed and
          populate the model described above.

          The action language scanner wfl_pop.arc, introduced by the
          Object Contributions work[3] is modified to pass the context
          menu instance to create workflow. This enables the archetype
          function to establish the new relationship Context Menu
          'initiates' Workflow. A new step is now created by this
          archetype to serve as the outer step for the interaction
          (Non wizard interactions as introduced by [3] will now have a
          step, but the step will contain no fields).
          
          The archetype function wfl_pop_blck_xlate has the workflow
          argument removed and the newly created step instance passed
          in its place. This allows wfl_pop_blck_xlate to be called
          recursively with a new step argument for each block. This
          change is made to the outer call to wfl_pop_blck_xlate in
          wfl_pop.arc.
          
          The archetype function wfl_blck_xlate in wfl_processing.inc
          is modified to introduce a major new section to create field
          instances. This block is entered if the following navigation
          yields a 'not empty' result:
          
          .select any srw_stmt related by statement->ACT_SEL[R603]
                                                       ->ACT_SRW[R664]
          
          Thus 'select from instances of' statements are converted to
          context item instances (by [3]) and 'select related by'
          statements are converted to field instances (by this work).
          Note that 'from instances of' statements require no 
          processing 'history' within the action language (unless they
          posess a where clause). A 'related by' selection by contrast
          relies on the results of some previous selection. Hence,
          'related by' statements require some additional user input
          based on some previous user input and a field (realized in the
          implementation as a widget) is therefore required on the 
          wizard to gather the information.
          
          A second introduced block, immediately below the first one
          detects 'simple' USER bridge calls and converts them into field
          instances. Simple bridge calls are those used to collect simple
          data values such as strings (implemented as text fields) and
          booleans (implemented as check boxes).

          Minor other adjustments are made to this archetype to reduce
          the maintenance required when new USER bridge calls are added.

TW1.3   - Create archetypes that define a Wizard using this information
          and place all widgets on one dialog page.
          
          A new archetype, wizard.arc is introduced. This archetype is
          analogous to the create_context_menus archetype introduced by
          [3]. It first populates the generation database with processing
          subsystem instances and then iterates over the workflow, step
          and field instances that were created by the task above[TW1.2]
          (these are loaded into the generation database by the build
          script before running this archetype). If a workflow is found
          to have no fields, it is ignored, because no wizard is needed.
          If a workflow does have fields, then wizard.arc calls two
          functions, create_wizard (defined in wizard.inc) and 
          create_page (defined in page.inc). The first function creates
          the wizard that will be shown when the specified context menu
          entry is selected by the user. The second function (create_page)
          creates the page on which the required fields will be placed
          and is described in detail in the section below[TW1.4].

          The simpler of the two functions is create_wizard. create_
          wizard declares a class that extends the Eclipse JFace utility
          class 'Wizard'. The name is derived from the Specialism, Label
          and Key_Lett attributes of the workflow with the word 'Wizard'
          appended. Within the class it declares instance variables
          for each context item in the workflow. It also declares
          instance handles for all fields within the workflow.
          
          A simple constructor is declared and the following functions
          required to implement a working wizard:
          
          - addPages      Creates and adds the wizard page that must be
                          shown by the wizard.
          - init          Sets up the context item instances from the
                          current selection.
          - canFinish     Performs the action language processing (from
                          the function body[3,OC1.3]) substituting null
                          tests on the user selection caches to determine
                          if the user has supplied all the required
                          information and the dialog can have its
                          'Finish' button enabled.
          - performFinish Executes the action language needed to carry
                          out the transaction on the core instances as
                          specified in the function.
                          
          The functions, 'canFinish' and 'performFinish' require further
          explanation.

          canFinish
          ---------
          The archetype block that supplies the body for this function
          consists of two parts. This first section iterates over the
          field instances and places the appropriate null test in its
          buffer. The second section invokes the archetype function,
          wfl_blck_xlate passing the outer block instance of the
          action from which the current workflow was derived (see the
          previous task[TW1.2]).
          
          The function wfl_blck_xlate is a modified version of the
          blck_xlate function found in MC-Java (in block.inc). The
          modifications are as follows:
          
          - the block translator checks each statement to see whether
            it is passive. That is, it does not have any effect on the
            state of the system. If the statement is not passive, no
            output is made for that statement. This enforces a
            requirement specified in the analysis note[1].
          
          Note that what is defined as passive is quite crude at this
          time. For example, an operation call is considered non_passive,
          even if its body contains only passive statements. Also, an
          assignment to transient is considered passive, even though the
          rval of that assignment may be a call that affects the system
          state in some way. These limitations are seen as acceptable
          given the simple structure the function bodies should have.
            
          - the block translator checks each statement to see whether
            there is a corresponding field. If there is, it outputs
            what is found in the field buffer, not what is found in the
            statement buffer. This allows statements that have 
            corresponding fields to have their output augmented or
            (in the case of 'canFinish' above) completely replaced.

          This capability is also used to initialize and obtain data
          from widgets in several places below.

          performFinish
          -------------
          This function uses a similar archetype to that described
          above. However, in this case, we do wish the generated code
          to affecvt the state of the system. In this case, we want
          all action language to be translated normally, except for
          the select statements because their values have already been
          provided by user selections and cached by the wizard page
          declared instances. ui_blck_xlate (introduced by [3]) is used
          here for this purpose. Minor changes are made to this
          archetype function to add a check for fields as well as 
          context items. If either of these are found, code emission
          is suppressed as before.

TW1.4   - Create archetypes to implement all required widgets.
          For drop 1, the drop down list(or Combo), simple scrolling
          list, text entry and check box widgets are required.

          The widgets are all declared and maintained by the Wizard
          Page class associated with the wizard described above. The
          WizardPage class is generated by the create_page archetype
          function.
          
          The function declares a class that extends the Eclipse JFace
          utility class 'WizardPage'. The class name is derived from the
          Specialism, Label and Key_Lett attributes of the workflow with
          the word 'WizardPage' appended. It declares all the widgets
          that are to be shown on the page. It also declares caches for
          each of the user choices that must be made. In addition to
          some simple constructors, the following methods are generated:
          
          - init          Sets up the description and title. Initializes
                          each of the widgets. It then enables those
                          fields that the action language logic dictates
                          should be enabled.
                 
          It does these things by adding extra code after the MC-Java
          selection code using the technique described above[TW1.3,
          wfl_blck_xlate]. In this case, the statement code is retained
          because we want the results of the select to use in populating
          the widgets.

          - createControl Creates the required widgets and makes them 
                          visible.
                          
          The wizard banner description and the widget labels are found
          using the parse for keyword technique. The data is placed in
          the function description. The description is identified with
          the keyword 'UIDescription'. The labels are identified with
          the keywords 'UILabel', 'UILabel1' through 'UILabel9'. This
          simple mechanism allows the user to specify up to ten labels
          for each function/wizard page. The labels are allocated to the
          widgets in the order the fields are found in the action
          language. If a label is not found for a widget, a warning is
          printed at translation time and the fields instance handle
          name is used.
          
          - addListeners  Sets the method 'handleEvent' to listen to
                          user changes to all widgets.
          - handleEvent   Determines which widget got changed and loads
                          the new value into the cache. For each field
                          it works out whether a user action has caused
                          the field to need reloading. It does this by
                          comparing the cached set with the instances
                          currently shown in the widget. If they differ,
                          they need to be reloaded. Finally, it tells
                          the wizard to update its buttons based on the
                          last entry.

TW1.5   - Create archetypes to obtain the default value and set the 
          widget accordingly.

          In the Wizard Page init method, the cache values are set up
          to the values of any default select statements found.
          
          In the Wizard Page init and handle Event methods, code is
          generated to check the existing cache value. If this is a
          valid value, the code selects the appropriate instance (or
          instances) in the widget.

TW1.6   - Miscellaneous changes made to support wizards.

        cme_names is modified to add the utility functions:
          - get_wizard_name
          - get_page_name and,
          - get_label

        create_object_action is modified to add the imports needed if
        the action is to create and launch a wizard.

        function_body.inc is changed to determine if a wizard is
        required by checking for the existence of fields. If a wizard
        is required, it constructs and launches the wizard instead of
        generating the action language for the transaction.

        ui_ident.inc is introduced to return the accessor to call to
        obtain the identifier attribute value for a given instance.
          
Work Required
-------------

End
---
$Log: transaction_wizards.dnt,v $
Revision 1.1  2009/09/03 18:30:54  rmulvey
job:dts0100616734
Archive documentation and other development notes following the R3_0_0 release.  These are being archived under Documentation/internal/technical/archive/20090903

Revision 1.4  2009/01/01 23:13:21  rmulvey
Job:4060
Batch promotion of copyright changes from Review-i4060 and Review-i4060-01.

Revision 1.3.166.1  2008/12/31 16:10:29  rmulvey
Job:4060
This is a batch commit of 2009 copyright changes to branch Review-i4060.  This includes the
report that outlines all changes made (before/after for each line changed).  This report is found here: <cvs>/Documentation/internal/test_results/R2_1_2/i4060/update-copyright-results.txt.

Revision 1.3  2003/09/05 23:01:30  campbell
Bug: 89
Much Expanded Design section.

Revision 1.2  2003/09/02 18:26:07  campbell
Job: 86
Fully working wizards.

Revision 1.1  2003/06/12 16:13:46  campbell
Job: 20
First Introduction










