========================================================================

File:      $RCSfile: i1000.dnt,v $
Version:   $Revision: 1.1 $
Modified:  $Date: 2009/09/03 18:28:17 $

(c) Copyright 2005-2009 by Mentor Graphics Corp. All rights reserved.

========================================================================
This document contains information proprietary and confidential to
Mentor Graphics Corp., and is not for external distribution.
========================================================================

Tiger Project Design Note

Properties Tests

Abstract
--------
This note presents the processes necessary to implement a test on the 
Properties section of the Nucleus BridgePoint Program.

History
-------

Document References
-------------------
[1] Issue 1000
[2] Doc:/Test/i1000.ant

Background
----------
At this point in time the only tests that exist for the Properties menu are ones
utilizing junit.  To accurately test all accessible user inputs a WinRunner test
shall be used to confirm that the properties' inputs work properly.

Analysis
--------
See i1000.ant

Design
------
1. Test the Properties Section of Nucleus Bridgepoint through the use of a 
	WinRunner test script.
	
Before the test could be created a sample model, containing one of everything
Nucleus Bridgepoint has listed properties for, had to be made.  This was done
using the existing testProp model and making sure that all applicable parts were
in the model.

A large amount of the tests performed would utilize the text from the properties
window.  To do this a function was created that gathered all the text present
in the properties window and returned it in a long string.  This allowed for the
rest of the test to easily store it in a single variable for later comparison.  

To execute the actual comparison another function was made that took in two 
strings and produced a result based on a string comparison function.  This
function, provided by WinRunner, was used to tell the user if the test had
passed.  A passing and failing tl_step command (also provided by WinRunner) was
used to notify the user of the result after the comparison.  This command will
output a negative or positive response depending on what the result of the
earlier string comparison is.

The test also uses a series of bitmap checkpoints to make sure that if a part of
a UML diagram was supposed to change with respect to a property changing, that
it in fact changed.  In addition to this the test must search the Model Explorer
tree to confirm properties, such as names, have changed there after the change
has been made in the properties view.

The test itself changes the individual property, checks to make sure that the
change occurred, through the use of the string compare function, and then
returns the property to its original value to help facilitate a rerunning of the
test.

2. Create archetype to generate available properties

An archetype is created according to the design section in [2].  The following
special cases were made for generating the list:

Suc_Pars - This attribute has four possible values: Do not Parse, Parse on apply
           set but never been parsed, Parse Successful, Parse Unsuccessful.

The output from the archetype is constructed so that the first two values are to
be changed and the latter two verified.

Pfx_Mode - This attribute has three possible values: No Prefix, Prefix, Referred
           To Prefix
           
The output from the archetype is constructed to note that the Referred To Prefix
value is only available if the attribute is referential.

Return Type - This entry in the properties is derived from the available
datatypes in a model.
 			  
The output from the archetype is constructed so that the possible values are:
All core datatypes in the model, one user defined datatype, and one enumeration
datatype.

Any attribute which has the impl_detail coloring is placed under the Advanced
section of the properties list as they are only visible in the Advanced section
of Tiger's properties.

Design Comments
---------------

Work Required
-------------
1.
A test model must be created and later a WinRunner test based off of that model.

2. Create archetype to generate available properties

The archetype is placed under the properties test folder found in the WinRunner
test location.  An ant build script is created which will run the archetype and
produce the needed output.

Unit Test
---------
To make sure that the test is working correctly it can be intentionally stopped 
before a change, skip that change, and then the string comparison function is
run.  This should give the comparison function two strings that are exactly the
same signifying that no change has been made and that there may be a problem
with the properties view.
 
End
---

$Log: i1000.dnt,v $
Revision 1.1  2009/09/03 18:28:17  rmulvey
job:dts0100616734
Archive documentation and other development notes following the R3_0_0 release.  These are being archived under Documentation/internal/technical/archive/20090903

Revision 1.5  2009/01/01 23:13:39  rmulvey
Job:4060
Batch promotion of copyright changes from Review-i4060 and Review-i4060-01.

Revision 1.4.30.1  2008/12/31 16:10:53  rmulvey
Job:4060
This is a batch commit of 2009 copyright changes to branch Review-i4060.  This includes the
report that outlines all changes made (before/after for each line changed).  This report is found here: <cvs>/Documentation/internal/test_results/R2_1_2/i4060/update-copyright-results.txt.

Revision 1.4  2005/06/10 17:52:46  asteele
Job: 1000
fully fixed note

Revision 1.3  2005/06/10 17:37:52  tlondon
Job: 1000

partially fixed note

Revision 1.2  2005/06/09 20:35:29  tlondon
Job: 1000

Added archetype section

Revision 1.1  2005/06/08 19:34:39  asteele
Job:1000
Intial Design Note
