========================================================================

File:      $RCSfile: i1587.dnt,v $
Version:   $Revision: 1.1 $
Modified:  $Date: 2009/09/03 18:18:57 $

(c) Copyright 2006-2009 by Mentor Graphics Corp. All rights reserved.

========================================================================
This document contains information proprietary and confidential to
Mentor Graphics Corp., and is not for external distribution.
========================================================================

Tiger Project Design Note
Sequence support in metamodel

Abstract
--------
This note describes the changes required to the metamodel for supporting
sequence diagrams.

History
-------

Document References
-------------------
[1] Issue 1587
[2] Documentation/technical/Canvas/i475-sequence_diagram.ant

Background
----------
Currently there is no support in the metamodel for sequence diagrams.

See [2] for definition of informal/formal modeling with the sequence diagram.

Design
------
1. Add required metamodel elements

1.1 Add Sequence subsystem

A new subsystem is added, Sequence, which contains all of the participating
elements in a sequence diagram.  In order to keep the subsystem to a decent
size, elements that relate to messages are captured in another subsystem.

1.2 Add Sequence class

A new class, Sequence, is added.  This class has three associations which define
where a sequence can be shown.  The three associated classes, those which can
show a sequence, are Domain, Subsystem, and Sequence in Sequence.

1.3 Add Sequence Participant classes

Each participant added below has an attribute added to capture it's name.  In
the case of a Class Instance Participant another attribute, InformalClassName,
is added.  This name will be used during the time the participant is informal to
capture the name of the class that the instance represents.

A sequence can have many participants, i.e, an instance or lifespan.  A new
supertype class, Sequence Participant, is added which captures this fact.  There
are six subtypes which are participants of a sequence.  The seven classes
added to define these subtypes are: External Entity Participant,
Function Package Participant, Class Participant, Class Instance Participant,
Lifespan, and Actor Participant.  To handle informal modeling of Class
Participants, a new class is added.  The new class, Informal Attribute,
represents informal attributes that may be added to an informal Class
Participant.

The Class Participant Attribute class has both a name attribute and a type
attribute added.  The type attribute is used to display the type of the
attribute when informal.

Two subtypes of Class Participant Attribute are added.  These classes are used
to support showing only one of the formal/non-formal attributes in model
explorer at a time.  The two classes are Formal Attribute and Informal
Attribute.

In a sequence the classes, External Entity Participant, Function Package
Participant, and Class Participant exist in order to show invocations of
operations/events belonging to these classes.  To support formal modeling of
sequence diagrams, associations to formal External Entities, Function Packages,
and Classes are added.

A Class Instance Participant represents an instance of a class in a model.  In
order to support formal modeling of instances an association is added to the
ModelClass element.  A Class Instance Participant may have
Instance Attribute Values, which capture an attribute and a given value for that
attribute.  The class, Instance Attribute Value, is added to support this fact.  
In order to support formal modeling an association is added between the
Instance Attribute Value class and the Attribute class.

The Instance Attribute Value class has two attributes added, Name and Value.
The Value attribute is used to display a given value for the attribute.

Two subtypes of Instance Attribute Value are added.  These classes are used to
support showing only one of the formal/non-formal attribute values in model
explorer at a time.  The two classes are Formal Attribute Value and Informal
Attribute Value.

A class is added to represent an Actor in a sequence.  The class,
Actor Participant, has a name attribute and a description attribute.

A Lifespan defines the life of a Class Instance Participant or an Actor
Participant.  Associations are added between a Lifespan and the two classes for
which it defines the life.  A Lifespan may also have timing marks added to it,
these marks identify a certain length of time.  A new class, Timing Mark, is
added to handle these marks.

Two Timing Marks may have a span between them which can describe the time
between the two marks.  A new class, Time Span, is added to support spans
between Timing Marks.

Each of the classes, Timing Mark and Time Span, have an attribute added to
capture the labels for these classes.

1.4 Add Message subsystem

A new subsystem, Message, is added.  This subsystem defines a message's
interaction with a sequence diagram and the rest of the model.

1.5 Add Message class

A new class, Message, is added which defines a message.  This class has two
associations with the Sequence Participant class.  The first association
captures the destination Sequence Participant of the message, the second
captures the source Sequence Participant of the message.

The Message class added above is the supertype of the following new classes:

Asynchronous Message
Synchronous Message
Return Message

The Message class must be subtyped this way as an Asynchronous Message has
different attributes than that of the Return and Synchronous Messages.

Each message type has an informal naming attribute.

The Synchronous Message class has the following attributes added:

GuardCondition - Used to display a guard condition on a message.
ResultTarget - Used to name the variable which contains the message's result.
ReturnValue - Used to display the value that the message returns.

The Synchronous Message class has four subtypes:

Informal Synchronous Message
Function Message
Bridge Message
Operation Message

The Asynchronous Message has the following attributes added:

GuardCondition - Used to display a guard condition on a message.
DurationObservation - Used to display an observation of the message's duration.
DurationConstraint - Used to display the constraint on a message's duration.

The Asynchronous Message class has two subtypes, Informal Asynchronous Message
and Event Message.

The message classes, Event Message, Function Message, Operation Message, and
Bridge Message are required to support formal modeling.  They each have an
association added that associates them with a formal model element.

The Return Message has the same attributes added as the Synchronous Message
class.

Messages may have arguments.  A new class, Message Argument, is added to support
message arguments.  There are two associations added between a Message and a
Message Argument, the first defines all informal arguments which belong to a
Message.  The second association defines all formal arguments which belong to a
Message.

The Message Argument class has two attributes added, Name and Value.
The Value attribute is used to display a given value for the argument.

The Message Argument class added above is the supertype of the following new
classes:

Bridge Argument
Operation Argument
Function Argument
Event Argument

Each subtype added is required to support formal modeling.  They each have an
association added that associates them with a formal model element.

Design Comments
---------------

Work Required
-------------
1. Add required metamodel elements

The changes are made to ooaofooa.xtuml according to the design.

Unit Test
---------
(Note: behavior will be tested with subsequent design work.)

_- Run existing tests
_R All tests pass

End
---

$Log: i1587.dnt,v $
Revision 1.1  2009/09/03 18:18:57  rmulvey
job:dts0100616734
Archive documentation and other development notes following the R3_0_0 release.  These are being archived under Documentation/internal/technical/archive/20090903

Revision 1.7  2009/01/01 23:13:05  rmulvey
Job:4060
Batch promotion of copyright changes from Review-i4060 and Review-i4060-01.

Revision 1.6.24.1  2008/12/31 16:10:08  rmulvey
Job:4060
This is a batch commit of 2009 copyright changes to branch Review-i4060.  This includes the
report that outlines all changes made (before/after for each line changed).  This report is found here: <cvs>/Documentation/internal/test_results/R2_1_2/i4060/update-copyright-results.txt.

Revision 1.6  2006/03/30 21:02:34  tlondon
Job: 1587

Fixed according to review minutes

Revision 1.5  2006/03/28 20:41:47  tlondon
Job: 1587

Update with synch/asynch message subtyping.
Fixed according to review.

Revision 1.4  2006/03/20 21:30:22  tlondon
Job: 1587

Update wording for new Class Participant Attribute class.

Revision 1.3  2006/03/20 17:39:29  tlondon
Job: 1587

Remove references to states

Revision 1.2  2006/02/28 16:00:59  tlondon
Job: 1587

Add state and actor classes

Revision 1.1  2006/02/14 22:46:05  tlondon
Job: 1587

Initial

