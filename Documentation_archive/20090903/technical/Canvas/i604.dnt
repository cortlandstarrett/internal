========================================================================

File:      $RCSfile: i604.dnt,v $
Version:   $Revision: 1.1 $
Modified:  $Date: 2009/09/03 18:18:56 $

(c) Copyright 2006-2009 by Mentor Graphics Corp. All rights reserved.

========================================================================
This document contains information proprietary and confidential to
Mentor Graphics Corp., and is not for external distribution.
========================================================================

Tiger Project Design Note
Provide support for communication diagrams

Abstract
--------
This note describes the changes required for supporting communication diagrams
in BridgePoint.

History
-------

Document References
-------------------
[1] Issue 604
[2] Marketing_Documentation/internal/requirements/MRDs/MRD123.doc
[3] Issue 475
[4] Documentation/internal/technical/Canvas/i475-sequence_diagram.ant

Background
----------
Currently there is no support for communication diagrams in BridgePoint.

Analysis
--------
The tool shall support modeling communication diagrams which may be formal,
informal or mixed (formal and informal).

The formality rules shall be the same, for all common elements, as the rules
created in [3] and described in [4], with the exception that messages in the
communication diagram are free floating.  The tool shall require the user to
select a message along with its destination to provide formalization support.

The common elements are listed below:

Actor
Instance
Imported Class
Imported Function Package
Imported External Entity
Synchronous Message
Asynchronous Message
Return Message

The one element that the work in [3] did not provide is a communication link.
A communication link may be formalized with any association that is between two
classes that are represented by the interaction participants that the link is
between.

Communication links shall have text adornments for both text phrases and the
association number.  Once formalized, the adornments shall have the same text
values as the element being formalized against.

Communication links show visability rules by adding an open arrow adornment to
the end for which messages may be sent, the associations may be adorned by two
open arrows to show bi-directional visibility.  No arrow adornments on a
communication link has the same meaning as two open arrows.

A link shall be allowed between all elements that are displayed on a
communication diagram.

The only additional requirement for messages that was not supported in the work
for [3] is an additional label part which represents a sequence number.  This
means that message labels in sequence diagrams can also have a sequence number.

Changes to the formal model part of any communication association shall be
reflected in the communication diagram.

Design
------
1. Extend metamodel to support communication diagrams

The metamodel shall be extended so that the common elements listed in the
analysis section may be associated with a communication.

It shall also be extended to allow drawing communication diagrams in the
following locations:

Domain, Subsystem, Communication

In order to support communication links the metamodel shall be extended so that
a communication link may be associated with any of the common elements listed
in the analysis section.

All messages shall have an attribute added to capture a sequence number.

2. Extend trees

The following trees shall be extended to include communication diagram support:

ooaofooa_hierarchy
UITree
file_io

In all cases the common elements listed in the analysis section shall be
configured as children of the communication.

The communication link shall be configured as a child of any of the common
elements listed in the analysis section, except in the case of the UITree as
they will not be displayed in the explorer tree.

A communication shall be configured as a child to either of the following:

Domain, Subsystem, Communication

3. Define graphical symbols

Symbol definitions for communications and communication links shall be added to
the canvas plugin.

A communication shall be configured as a diagram in the plugin.

In order to support messages on a communication diagram a new symbol definition,
specific to a communication diagram, must be added for synchronous messages,
asynchronous messages, and return messages.  This change is required as the
termination specifications are different on a communication diagram (each one
may only start and end on whitespace).  In order for this to work correctly a
new identifier shall be added to the editor schema for the validSymbol element.
This identifier shall be the OOAType of the symbol.  This allows for defining
multiple symbols for the same class with different termination specifications.

4. Add operations required by graphical client

In order to create symbols on the communication diagram operations shall be
added which create the symbol's element and relates it to the communication.

The communication link class shall have operations added which display the
correct text adornments, and display the correct style when visibility is
changed.

5. Allow moving connectors starting and ending on whitespace

Currently, when a connector is moved a waypoint is created.  This is because
connectors have always had at least one element at an end that performed the
necessary connector movement.  Now that a connector may start and end on
whitespace the tool must be changed to move such a connector instead of add a
waypoint.

Due to the "low hanging fruit" approach of this work waypoints shall not be
allowed on connectors which start and end on whitespace.  Waypoints shall be
allowed once the tool has support for adding/removing waypoints in the context
menu.

6. Add context menu actions

A delete and rename context menu action shall be added for the communication as
well as the communication link.

The communication link shall have a wizard definition added which shall allow
the user to choose an appropriate association to formalize against.  An action
filter shall be added which will only allow formalization when two instances or
imported classes are formal and have at least one association between them.  The
action which performs the formalization shall be written so that it associates
the communication link with the choosen association.

In order to support formalizing messages on a communication diagram, new actions
shall be written for messages on a communication diagram.  The new actions must
be global to allow for the multiple selection rule (that is that the destination
participant must be selected as well).  The wizard shall allow formalizing
against any operation/event that belongs to the destination participant.  An
action filter shall be written so that the menu entry will not be available if
either no operations/events exist or the destination is not selected.

7. Support reflection between communication link and association

In order to support updating information in a communication link when an
association is deleted, the dispose operation shall be modified to unformalize
a related communication link when called.

All other changes will be reflected as the displayed values will be derived from
the association directly.

Design Comments
---------------

Work Required
-------------
1. Extend metamodel to support communication diagrams

Extend the metamodel to support the following elements:

Communication, Communication in Communication, Communication Link.

2. Extend trees

Extend the io.mdl persistence tree to load and save the new elements.
Extend the explorer tree to show the communication and child elements.
Extend the hierarchy tree to include the communication and its children.

3. Define graphical symbols

Define the following symbols and connect them with their metamodel counterparts:

Communication, Communication Link and Communication Messages (starting and
ending on whitespace).

4. Add operations required by graphical client

Add the operations described in the corresponding design section.

5. Allow moving connectors starting and ending on whitespace

Change the connector move behavior as described in the corresponding design
section.

6. Add context menu actions

Add delete and rename context menu entries for communications and communication
links.

Add a formalize and unformalize context menu entry for communication links.

Add a formalize menu entry for synchronous and asynchronous messages on a
communication diagram.

Adjust the unformalize actions for messages to work with messages on a
communication diagram.

7. Support reflection between communication link and association

Add oal in Association.dispose() to unformalize a link that is formalized with
the association.

Unit Test
---------

- Test formalization/unformalization of communication links

_- Select a communication link which is between two formal instances 
	(where there is also an association between their classes)
_- Select the formalize menu entry
_R All associations between the two classes are listed in the wizard page
_- Select any association and click finish
_R The connector text for that association's start and end text is displayed
_R The association number for that association is displayed

_- Repeat the above for each type of association

_- Select a communication link which is between two informal instances
_- Right click on the link
_R The Formalize menu entry is not present

_- Select the same link between two formal instances as above
_- Select the Unformalize menu entry
_R The original informal text and association number is used

- Test formalization of messages
  - Perform the test listed below with both an operation and an event

_- Select a message on a communication diagram
_- Select a formal Interaction Participant with an operation/event that can be
   formalized against
_- Right click and select the formalize menu entry
_R The wizard page contains a list of operations/events to formalize with
_- Select any operation/event
_R The message is formalized

_- Right click on an unformalized synchronous message
_R The Formalize (No Target Selected) menu entry is present
_- Select that menu entry
_R An explanatory dialog appears

_- Right click on an unformalized asynchronous message
_R The Formalize (No Target Selected) menu entry is present
_- Select that menu entry
_R An explanatory dialog appears

- Test connector movement when starting and ending whitespace

_- Select a message on the communication diagram
_- Drag the mouse to move the message
_R The message is moved and no waypoint is created

- Test communication drawing

_- Draw a communication diagram with all possible situations
_R All symbols are drawn correctly

_- Run all existing tests
_R All tests pass

End
---

$Log: i604.dnt,v $
Revision 1.1  2009/09/03 18:18:56  rmulvey
job:dts0100616734
Archive documentation and other development notes following the R3_0_0 release.  These are being archived under Documentation/internal/technical/archive/20090903

Revision 1.4  2009/01/01 23:13:06  rmulvey
Job:4060
Batch promotion of copyright changes from Review-i4060 and Review-i4060-01.

Revision 1.3.16.1  2008/12/31 16:10:09  rmulvey
Job:4060
This is a batch commit of 2009 copyright changes to branch Review-i4060.  This includes the
report that outlines all changes made (before/after for each line changed).  This report is found here: <cvs>/Documentation/internal/test_results/R2_1_2/i4060/update-copyright-results.txt.

Revision 1.3  2006/05/17 19:57:29  jmather
Job: 604
Corrected and added some unit tests.

Revision 1.2  2006/04/18 19:41:53  tlondon
Job: 604

Fixed according to review minutes

Revision 1.1  2006/04/17 18:12:01  tlondon
Job: 604

Initial

