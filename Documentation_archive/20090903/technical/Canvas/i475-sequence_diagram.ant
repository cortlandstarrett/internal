========================================================================

File:      $RCSfile: i475-sequence_diagram.ant,v $
Version:   $Revision: 1.1 $
Modified:  $Date: 2009/09/03 18:18:57 $

(c) Copyright 2006-2009 by Mentor Graphics Corp. All rights reserved.

========================================================================
This document contains information proprietary and confidential to
Mentor Graphics Corp., and is not for external distribution.
========================================================================

Tiger Project Analysis Note
Create Sequence Diagram Support

Abstract
--------
This notes captures the detailed requirements for BridgePoint UML 2.0 Sequence
Diagram.

History
-------
  update - i475-020206-01.rvm
  final  - i475-070206-01.rvm

Document References
-------------------
[1] Bugzilla issue 475
[2] The Unified Modeling Language Reference Manual ISBN 0-321-24562-8

Background
----------
We need BridgePoint to support a wider range of UML diagrams than currently. The
Sequence Diagram is the highest priority diagram identified by marketing.

Analysis
--------
Note that the UML term for an invocation is a Message (see [2]). This document
uses the formal UML term throughout.

The sequence diagram must support both formal modeling and 'sequence diagram
first' development processes. The typical use case for this second requirement
is as follows:

  - The user creates a new empty sequence diagram.
  - The user adds artifacts that are informal i.e. they do not reference any
    existing modeled artifact.
  - The user refers to the completed sequence diagram while they create other
    model artifacts such as formal class diagrams.
  - The user may or may not return to the sequence diagram and replace artifacts
    on it with their formal counterparts.
 
In this use case, there is no strong requirement for propagating changes to the
formal models (class/state machine) from the informal models (sequence diagram).
In other words, a user shall be able to create informal instances and messages
that do not require a corresponding class/event/operation in the formal model.
When the sequence diagram is complete, knowledge captured by it is then
transcribed by hand into the formal model. Once in the formal model, the
informal instance/message etc. may be assigned to the formal model class/
operation/event etc. When this is done, the informal parts are overridden by the
formal model data and changes to the formal model are automatically propagated
into the informal diagrams.

The user shall be able to draw a Sequence Diagram Package on the Domain Package
Diagram, a Subsystem Diagram or on a Sequence Diagram. Allowing the drawing of
a Sequence Diagram Package on a Sequence Diagram permits nested Sequence
Diagrams. Opening a Sequence Diagram Package shall show the user a Sequence
Diagram.  The BridgePoint Sequence Diagram shall support the following shapes
and connectors:

  - Instance
  - Class
  - Lifeline (Inactive only)
  - Message (Synchronous and Asynchronous)
  - Return
  - Timings
  - Deletion
  - Sequence Package
  - External Entity
  - Function Package

The following Sequence Diagram artifacts will not be supported at this time:

  - Actor and associated lifeline
  - Fragments (alternate, iteration etc.)
  - Activation and 'stacked' Activation

The Sequence Diagram shall be namable from the Model Explorer and from the
containing diagram.

The Model Explorer shall show the following entries:

  - Sequence Diagram
    - Instance
      - Attribute Value
    - Message
      - Argument Value
    - Timing Mark
      - Time Span
    - Participating Class
    - Participating EE
    - Participating Function Package

The message tree entry shall show the full text as displayed on the diagram.
Argument and Attribute values shall show in the tree as:

  <Element Name> = <Value>

Instance
An Instance shall be locatable anywhere on a sequence diagram. It shall show as
specified in [2] page 401 under Instance Specification.Notation. The Instance
name shall take the form:

  <Instance Name>:<Class Name>

The Instance name is optional. The Instance symbol shall have a single 
compartment in addition to the name compartment, where its Attribute Values
shall be shown in the form:

  <Attribute Name> = <Attribute Value>

Since the diagram is not executable, the Attribute Value shall be a plain
string, no type checking on the value shall be performed. This is done so that
the user can provide informal values such as "farthest vertex from origin". The
user shall be able to shrink the symbol so that only the name compartment is
visible.

When first created, Instances are 'informal' i.e. the tool does not consider
them to be associated with any Class. The context menu shall have an
'Formalize on Class...' entry. When this is selected, a simple wizard shall
assist the user in finding the Class they wish their Instance to represent.

Prior to assigning an Instance to a Class, Instances may be given an informal
class name. Each Instance is created with the initial informal class name
"Informal Class". The informal class name is changed using the Properties View.

Instances have an 'Add Attribute Value' menu entry. This adds a new
'Informal Attribute' value to the instance. The name of the Attribute shall be
modifiable using the global 'Rename' menu entry or the Properties View. The
Value attribute shall be changeable in the Properties View.

When the 'Formalize on Class...' action is invoked by the user, the Instance is
associated with the chosen Class, new Attribute Value instances are associated
with the corresponding Base Attribute elements. No Attribute Values are created
for Referential Attributes.

After the 'Formalize on Class...' action is complete, the menu entry for
'Add Attribute Value' shall be disabled. The menu entry, 'Unformalize Instance'
shall be enabled. This action shall permit the user to disconnect the Instance
from its Class. When this is done, the Instance reverts to its informal state,
showing its previous informal attributes and showing its previous informal class
name. All Messages (see below) associated with the Instance are also reverted to
their informal state.

The 'Formalize on Class...' action shall remain active on a formalized Instance.
If the user invokes this action a second time, the Instance may be reassigned to
a different Class. When this happens, Attribute Values are once again created
based on the Attributes of the new target Class. Any values entered by the user
for the old Attribute Values are lost.

If a Class to which an Instance refers is deleted, the Instance shall revert to
its informal state. If an Attribute to which an Attribute Value refers is
deleted, the Attribute Value shall be deleted and the value lost.

Class
The symbol for the class shall be identical in form to the existing Class
symbol. Prior to formalization, the class symbol shall derive it's operation
compartment content from the sum of the messages drawn to the class. Duplicate
entries shall be removed. After formalization, the '<<imported>>' stereotype
shall be added to the class symbol, and the operation list shall be as defined
on the class diagram.

Lifeline
A Lifeline shall be drawn from an Instance symbol and shall end on whitespace.
The Lifeline shall be shown in its inactive form, as a broken line with no
annotations, except an optional deletion symbol at the whitespace end (see
below). Although Lifelines are shown in [2] only as straight vertical lines, the
user shall be able to bend a lifeline like any other connector. This offers the
user maximum flexibility with diagram layout. Examples of Lifelines are shown in
Figures 14-248 and 14-249 of [2] (pp 588 and 589).

Message and Return
A Message may be drawn between any of the following symbols; Instance,
Lifeline of an Instance, an Imported Class, an External Entity and a Function
Package. Additionally, Messages may begin on whitespace to signify a scenario
that is started by something outside the system. A Message shall be shown as a
solid line arrow. A Synchronous Message shall be shown with a filled arrow head
and an Asynchronous Message shall be shown with an unfilled ('stick') arrow
head. Examples of synchronous and asynchronous Messages are shown in [2] Figure
14-180 (p 453). Messages drawn to an Instance symbol (as opposed to its
Lifeline) are treated as if they were drawn to the Instance's Class symbol. 

A Return shall be shown as a broken line arrow drawn from the callee to the
caller. Possible start and end points for Returns are the same as specified for
messages above. Return connectors are only associated with synchronous calls
however this is not enforced by the tool, it shall therefore be up to the user
to draw semantically valid combinations of messages and returns. Return shall
bear the same label as other messages ([2] Figure 14-180, p 453), but it shall
be fully optional (i.e. not shown at all) if no data is provided for it by the
user.

Message connectors shall be labeled as follows:

  <Result Target> = <Operation/Event Name/Bridge/Function>
                                             (<Argument List>):<Return Value>

All parts of the above specification are optional except the Operation/Event
Name. Result Target and Return Value shall not be shown in the case of
Asynchronous Messages, since they do not make sense in this case.

The default label shall be "Informal Message". The user shall assign an
operation or event to the invocation by selecting "Formalize on Operation..." or
"Formalize on Event..." from the context menu. Which entry appears shall be
determined by whether the invocation is synchronous or asynchronous. The user
chooses from Operations in the former case, Events in the latter. Operation and
Event Names shall be selected by the user from a list presented in a wizard. The
"Formalize on Event..."/"Formalize on Operation..." menu entries are disabled if
the target instance is itself informal. Similarly, these menus are disabled if
no suitable model elements exist for the user to formalize on.

The list shall contain the instance based Operations or Instance based State
Machine Events already defined on the Class of an Instance target or the class
Operations or Class based State Machine Events if the target is a Class.

For Synchronous Messages directed to the Class or Instance symbol, an additional
'create' message shall be available. For Asynchronous Messages directed to the
Class or Instance symbol, any Creation Events defined for the Instance State
machine shall be added to the list of Class State Machine Events. 

Asynchronous Messages may refer to events defined in a supertype class. In this
case the event need not be polymorphic, this property is conferred by its usage
on formal state machine diagrams, not informal diagrams.

As for Instances, if a model element to which a Message refers is deleted, the
Message shall revert to its informal state. If a model element to which an
Argument refers is deleted, the Argument shall be deleted and the value lost.
An 'Unformalize Message' menu entry shall return the message to the last state
it was in before it was formalized.

Again as for Instances, Messages may be given an informal Operation/Event name
if they have not been assigned to their corresponding classifying model element.
Each message is created with the informal operation name "Informal Operation".
Once the Message has been assigned to its defining model element, the global
'Rename' menu entry shall be disabled.

Informal Messages shall also have an 'Add Argument' menu entry. This adds a
new argument value with the informal parameter name 'Informal Argument'.

The argument list shall be shown as a comma separated list of the form:

  <Argument Value> or
  <Parameter Name> = <Argument Value> or
  - (literal '-', don't care)

Argument values shall be set by the user in the Properties View. These values
shall be plain strings for the same reasons cited above under the
Attribute Value discussion. Arguments may be renamed if their owning element has
not been assigned to an operation/event.

The Result Target shall be set by the user in the Properties View. This value
shall be a plain string for the same reasons cited above.

A Message shall optionally have a Guard Expression associated with the invoker
end of the connector. The Guard Expression shall be a moveable plain string.

Once a message is assigned to an Operation or Event, the global 'Rename' menu
entry shall be disabled for the Message and it's Argument Values. 

Timings
Timing Marks shall be drawn from a Lifeline and end on whitespace. They shall
show as a solid line with a string decoration at the unattached end. The string
is simple text and has no prescribed format. Typically short, the timing mark
may be drawn as long as necessary and may be bent as required by the user for
maximum diagram layout flexibility. Timing Marks may be named and renamed using
the standard methods. The default name is empty.

Time Spans shall be drawn from one Timing Mark to another. Spans shall show as
a solid line with an open arrowhead at each end. The Time Span shall bear a
center text adornment that shows the time between the Timing Marks. The time
shall be a plain string for maximum user flexibility. The default text label
shall be empty and shall be modifiable through the Properties View. If not
empty, the label shall be shown surrounded by braces '{}'. No arthmetic shall be
performed on the strings provided by the user.

Note that the user can draw multiple time spans between timing marks.

Deletion
An instance shall be shown as deleted in a sequence by adorning the end of the
lifeline with a Deletion symbol. The Deletion symbol shall consist of a cross
at the end of the line. The notation shall be enabled by selecting the lifeline
and choosing "Mark Instance Destroyed". The complementary menu entry
"Mark Instance not Destroyed" shall perform the reverse operation.

Sequence Package
A Sequence Package shall be shown as a Package Symbol with the Stereotype
<<sequence>>.

External Entity and Function Package
These symbols shall appear as they do on other diagrams. These symbols shall
also have an informal mode, that shall be limited to the following:

  - The symbol name shall have an initial name of "Informal External Entity" or
    "Informal Function Package". This can be renamed by the user until the
    symbol is formalized.
  - Clicking on the symbol shall enable a "Formalize on External Entity..." or
    "Formalize on Function Package..." menu entry. Selecting this shall enable a
    wizard that shall assist the user in selecting the required target model
    element.
  - An "Unformalize External Entity/Function Package" menu entry shall reverse
    the formalize action and return the symbol to the state prior to
    formalization.
  - As for the Class symbol, Messages connected to the External Entity shall be
    shown in the External Entity Bridge compartment until it is formalized
    (Function Packages do not list the functions they contain).

Note
----
The vertical ordering of messages is not significant to the tool. The user is
free to associate whatever semantics he wishes with vertical ordering. He may
therefore change the vertical order at will and may create sloped or even
bent message connectors if desired.

Work Required
-------------
Extend the metamodel to add the following elements:

  - Instance
  - Lifeline
  - Message
  - Return
  - Timing Mark
  - Timing Span
  - Sequence
  - Sequence in Sequence

Extend the io.mdl persistence tree to load and save the new elements.

Define the following symbols and connect them with their metamodel counterparts:

  - Instance
  - Imported Class (already defined, just requires connection to diagram)
  - Lifeline
  - Synchronous Message
  - Asynchronous Message
  - Return
  - Timing Mark
  - Time Span
  - Sequence Package

Define the Sequence diagram permitting the above listed symbols and connect it
with its metamodel counterpart (Sequence).

Add the Sequence Package symbol to the Domain Package and Subsystem Diagrams.

Create tool button icons for each of the new symbols defined above. The instance
shall be a disk using the same color palette as the class symbol, but shall bear
an upper case 'I'. The imported class shall reuse the same icon as is defined
for it already. The others shall resemble their appearance on the diagram and
generally have the same look and feel as the appearance based tool icons created
for the existing diagrams.

Create new Filled Arrow and Cross line ends.

Acceptance Test
---------------
Since no new diagram behavior is introduced, drawing, bending and resizing
behavior is already fully tested. All that is required here is to show that the
symbols all show the correct data. Therefore, draw a diagram that shows every
symbol described above in every permutation to ensure that the correct data is
shown in all its alternate forms. Also create nested diagrams and diagrams
below the domain and below a subsystem.

End
---

$Log: i475-sequence_diagram.ant,v $
Revision 1.1  2009/09/03 18:18:57  rmulvey
job:dts0100616734
Archive documentation and other development notes following the R3_0_0 release.  These are being archived under Documentation/internal/technical/archive/20090903

Revision 1.9  2009/01/01 23:13:05  rmulvey
Job:4060
Batch promotion of copyright changes from Review-i4060 and Review-i4060-01.

Revision 1.8.28.1  2008/12/31 16:10:08  rmulvey
Job:4060
This is a batch commit of 2009 copyright changes to branch Review-i4060.  This includes the
report that outlines all changes made (before/after for each line changed).  This report is found here: <cvs>/Documentation/internal/test_results/R2_1_2/i4060/update-copyright-results.txt.

Revision 1.8  2006/02/07 18:12:32  campbell
Job: 475
Address review issues.

Revision 1.7  2006/02/07 00:50:18  campbell
Job: 475
Final pass to ensure capitalization policy consistency.

Revision 1.6  2006/02/06 23:32:26  campbell
Job: 475
Final changes to support informal modeling.

Revision 1.5  2006/02/04 00:12:40  campbell
Job: 475
Support informal modeling.

Revision 1.4  2006/02/02 21:16:15  campbell
Job: 475
Specified creation events and the handling of messages to the instance symbol.

Revision 1.3  2006/02/02 19:59:17  campbell
Job: 475
Specify that Rename must be changed to 'Change Value' in places.

Revision 1.2  2006/02/02 18:55:46  campbell
Job: 475
Specified Model Explorer entries and expanded work required section.

Revision 1.1  2006/02/02 18:20:28  campbell
Job: 475
Introduced.

