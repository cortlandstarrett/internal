========================================================================

File:      $RCSfile: factory.ant,v $
Version:   $Revision: 1.1 $
Modified:  $Date: 2009/09/03 18:18:56 $

(c) Copyright 2005-2009 by Mentor Graphics Corp. All rights reserved.

========================================================================
This document contains information proprietary and confidential to
Mentor Graphics Corp., and is not for external distribution.
========================================================================

Tiger Project Analysis Note
UML 2.0 Diagram Support: Symbol Factory 

Abstract
--------
This note describes the requirements for the symbol factory functionality
for UML 2.0 diagram support.

History
-------

final R1_1_0_M3/factory-012006-01.rvm

Document References
-------------------

[1] http://www.omg.org/cgi-bin/apps/doc?ptc/05-06-04.pdf


Background
----------
We need to way to specify and create all the diagram elements that can 
be drawn in any UML diagram.

Analysis
--------

There are many UML diagrams (the count seems to be 13), each of which can
have many different symbols on them.  What is needed is a way to capture
the data for how each symbol is drawn in a data-driven way, so that when
changes are made, we don't have to write a lot (if any) code.

The Diagram Interchange Metamodel (DIM) (ref [1], Figure 3) contains the
information needed to statically describe any diagram defined in UML.  What 
the DIM doesn't provide is the rules for the symbols on a diagram.  In other
words, the DIM can capture the position of each line, square, text string,
etc. in a diagram, but it doesn't provide any guidance to a drawing tool as
to what combination of those lines, squares, text strings, etc. form a 
diagram and its elements as defined by UML.

A drawing tool thus needs specifications for how to draw a symbol (class,
association, actor, state, etc.) on a diagram.  These specifications are 
captured as an extension to the DIM.  This new model generically describes 
a symbol so that the symbol can be created, resized, and moved while 
maintaining the correct appearance of the symbol.  The model is generic so 
that all possible symbols can be described in data, so that adding symbols 
is a matter of defining new instances in the model.

The data for the symbol specifications is stored on the file system, and 
loaded at tool startup.

Each possible symbol that can be drawn has an associated button in the
tool bar.  The configuration of which symbols are allowed on which diagrams
is part of the symbol specification data.

When a button is selected, the user can then draw the selected symbol on 
the diagram.  When the symbol drawing is complete, the tool requests a clone
of the specification's GraphElement instances to create the instances
for the new symbol.  The drawing tool either passes the desired size data 
to the cloning operation, or the clone is created in a default size, and 
then is resized to the desired size by the drawing tool.  The alternative
of the tool first creating the clone, then resizing the clone as the tool
is dragged to the desired size was considered, but this would most likely
entail interaction with the metamodel (once metamodel support is added) to
create dummy instances during the draw procedure, and deleting those 
instances if the draw procedure is cancelled.  

When a symbol is cloned, only the non-optional sub-elements are created.
If the user wishes to add a sub-element, they select the symbol, right click
to get the context menu, and select 'New > <sub-element>'.  The menu code
can query the specification to determine which optional sub-elements are
available, the existing element for which are already present, and construct
the appropriate menu items.  There is a requirement that a class symbol
must have an attribute compartment if the operation compartment exists.
There may be other cases where there is a dependency between optional 
components.  

The data for an association end is initially empty.  In order
for the user to add an optional sub-element to the association end, the
user must open a context menu while hovering over the association's end
handle.  The context menu is populated according to which end the mouse
is hovering over.  All other edges (known to the author) show the same
context menu no matter where the mouse is hovering.

As an aside, deletion of an element should delete all sub-elements. Deletion
is outside the scope of this piece of work.

As mentioned above, this implementation has no metamodel support.  This 
means all text in the model is stored directly in the DIM.  The symbol specs 
should have default values for text in the symbol as needed.

Several symbols have alternate representations (Class, Actor, Package are 
the known instances at present).  The symbol spec must allow for those 
alternate representations.  This implies that there would be separate buttons
on the tool bar for each of these representations, for example, Actor 
(Stick Figure) and Actor (Stereotyped Class).  There is no need seen for 
being able to convert from one representation to another.

Work Required
-------------

1. Create Symbol specification model
    1.1  Create model
    1.2  Define format for data storage
    1.3  Add code to populate model on tool startup
    1.4  Create initial instance population

2. Tool bar buttons
    2.1  Create buttons on diagram editor creation
    2.2  Connect button actions to drawing tools
    2.3  Add cloning operation invocation to drawing tools

3. Create optional element creation menu logic

Acceptance Test
---------------

- All diagrams can be drawn with all required symbols with correct 
   appearance
   
- Tool bar buttons are present for each diagram as specified.

End
---

$Log: factory.ant,v $
Revision 1.1  2009/09/03 18:18:56  rmulvey
job:dts0100616734
Archive documentation and other development notes following the R3_0_0 release.  These are being archived under Documentation/internal/technical/archive/20090903

Revision 1.4  2009/01/01 23:13:06  rmulvey
Job:4060
Batch promotion of copyright changes from Review-i4060 and Review-i4060-01.

Revision 1.3.28.1  2008/12/31 16:10:09  rmulvey
Job:4060
This is a batch commit of 2009 copyright changes to branch Review-i4060.  This includes the
report that outlines all changes made (before/after for each line changed).  This report is found here: <cvs>/Documentation/internal/test_results/R2_1_2/i4060/update-copyright-results.txt.

Revision 1.3  2006/02/02 21:22:57  greg
Job: 1500
Update history

Revision 1.2  2006/02/02 21:20:54  greg
Job: 1500
Address review observations

Revision 1.1  2006/01/18 23:16:51  greg
Job: 1500
Introduce

