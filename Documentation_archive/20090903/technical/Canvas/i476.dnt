========================================================================

File:      $RCSfile: i476.dnt,v $
Version:   $Revision: 1.1 $
Modified:  $Date: 2009/09/03 18:18:56 $

(c) Copyright 2006-2009 by Mentor Graphics Corp. All rights reserved.

========================================================================
This document contains information proprietary and confidential to
Mentor Graphics Corp., and is not for external distribution.
========================================================================

Tiger Project Design Note
Add Use Case Diagrams

Abstract
--------
This note describes the changes required for introducing support for drawing use
case diagrams.

History
-------

Document References
-------------------
[1] Issue 476

Background
----------
Currently there is no support for use case diagrams.

Analysis
--------
Support for drawing use case diagrams shall be added.

A use case diagram consists of the use case symbol (Ellipse), an actor, and four
associations.  The four associations are:

Association (drawn between an actor and a use case symbol)
Generalization (drawn between two use case symbols and two actors)
Include (drawn between two use case symbols)
Extend (drawn between two use case symbols)

Design
------
1. Add Use Case subsystem

A new subsystem, Use Case, is added to the ooaofooa.

In the new subsystem the following classes are added:

Use Case Container

Represents the use case package, stores the name along with a description.

Use Case Association

A supertype for all associations.

Use Case

Represents the use case symbol, stores the name along with a description.

Use Case Participant

A supertype for all participants of the use case diagram.

Interaction Participant in Use Case

A link between an Interaction Participant (Imported) and a Use Case Participant.
Used to allow drawing actors.

Use Case in Use Case

Supports nested use case packaging.

Binary Association

A subtype of Use Case Assocation.  Represents the Association described in the
analysis.

Generalization

A subtype of Use Case Assocation.  Represents the Generalization described in
the analysis.

Include

A subtype of Use Case Assocation.  Represents the Include described in the
analysis.

Extend

A subtype of Use Case Assocation.  Represents the Extend described in the
analysis.

The Use Case Container and Use Case classes have the following operations added
to allow the ui.canvas plugin to draw them:

get_compartments - returns the number of compartments (1 for each)
get_entries - returns the entries in the compartments (1 for each)
get_compartment_text - returns the text for the compartments (the name of each)
get_text_style - returns the style for the text (None for both)
get_style - returns the style of the symbol
						(Folder for the container class and Ellipse for the Use Case)						
get_ooa_id - returns the ooa ids for the classes (UCC_ID and Part_ID)

Each association has the following operations added to allow the ui.canvas
plugin to draw them:

get_style - returns the style for the connector
            Binary Association (Solid)
            Generalization (Triangle at end, Solid otherwise)
            Include (Dashed, Open Arrow at end)
            Extend (Same as Include)
get_ooa_id - returns the ooa ids for the classes (Assoc_ID)
get_connector_text - returns the text adornments for the connector, only the
                     Include and Extends have text (centered).  The text for
                     them is <<Include>> and <<Extend>>

Each class, besides the Use Case in Use Case, has a dispose operation added.
The Use Case in Use Case disposal is handled by the Use Case Container class.

The Use Case Container class has operations added which create each element
contained under it.

2. Extend trees

The following trees are extended:

ooaofooa_hierarchy.pei.sql - Extended to define the following tree structure:

Domain
  Use Case Container
    Use Case Container
    Use Case
    Actor
    Association
    Generalization
    Include
    Extend
Subsystem
  Same tree as above
  
UITree.pei.sql - Extended to define the following tree structure:

Domain
  Use Case Container
    Use Case Container
    Use Case
    Actor
Subsystem
  Same tree as above
      
file_io.pei.sql - Extended to allow importing and exporting all use case
									elements
									
3. Modify Canvas to support use cases

The OOAType Enumeration is extended to include the types for the following
elements:

Use Case Container
Use Case
All four associations

The ModelType Enumeration is extended to include the Use Case Diagram.

The GR bridge is modified to add a bridge operation which draws a filled
ellipse.

Shape.draw() is modified to call the new bridge operation added if the shape
being drawn is an ellipse.

The CL bridge is modified to support getting instances of and the ids for all
of the new elements.

The CanvasEditor class is modified to add both communications and use case
diagrams as elements which have outlines.

New symbol and diagram definitions are added to the canvas plugin.xml file for
all of the symbols shown on a use case diagram.

4. Set default editor to diagram editor

The archetype, create_util.inc of the ui.text plugin, is modified so that use
case diagrams do not have the text editor as its default.

5. Add rename and delete actions

The following classes have rename and delete actions added for them:

Use Case Container
Use Case

All of the subtype assocations have delete actions added for them.

Design Comments
---------------

Work Required
-------------
1. Add Use Case Subsystem

The ooaofoooa.xtuml model is modified according to the design.

2. Extend trees

The changes are made according to the design.

3. Modify Canvas to support use cases

The changes are made to the ooaofgraphics.xtuml model, Gr_c.java, and Cl_c.java
according to the design.

4. Set default editor to diagram editor

The changes are made according to the design.

5. Add rename and delete actions

The actions described in the design are added to the files:
context_menu.pei.sql and cme_functions.sql.

Unit Test
---------
_- Draw a Use Case Package in a domain
_R The symbol is drawn correctly

_- Draw the following symbols in a Use Case diagram
  _- Use Case
  _- Use Case in Use Case
  _- Actor
  _- All four associations, with generalizations between two use cases and two
     actors
_R All symbols are drawn correctly

_- Draw a Use Case Package in a Subsystem
_R The symbol is drawn correctly

End
---

$Log: i476.dnt,v $
Revision 1.1  2009/09/03 18:18:56  rmulvey
job:dts0100616734
Archive documentation and other development notes following the R3_0_0 release.  These are being archived under Documentation/internal/technical/archive/20090903

Revision 1.4  2009/01/01 23:13:05  rmulvey
Job:4060
Batch promotion of copyright changes from Review-i4060 and Review-i4060-01.

Revision 1.3.16.1  2008/12/31 16:10:08  rmulvey
Job:4060
This is a batch commit of 2009 copyright changes to branch Review-i4060.  This includes the
report that outlines all changes made (before/after for each line changed).  This report is found here: <cvs>/Documentation/internal/test_results/R2_1_2/i4060/update-copyright-results.txt.

Revision 1.3  2006/05/25 19:49:40  tlondon
Job: 476

Fixed according to review minutes

Revision 1.2  2006/05/24 22:14:31  tlondon
Job: 476

Initial

