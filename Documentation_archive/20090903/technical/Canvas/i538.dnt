========================================================================

File:      $RCSfile: i538.dnt,v $
Version:   $Revision: 1.1 $
Modified:  $Date: 2009/09/03 18:18:57 $

(c) Copyright 2005-2009 by Mentor Graphics Corp. All rights reserved.

========================================================================
This document contains information proprietary and confidential to
Mentor Graphics Corp., and is not for external distribution.
========================================================================

Tiger Project Design Note
Adding Grip Snap Behavior to the Canvas

Abstract
--------
This note describes the design for adding grid snap behavior to the canvas.

History
-------

Document References
-------------------
[1] Bugzilla issue 538
[2] Requirements specification: Documentation/Specification/Tiger_MB_SRS.doc

Background
----------

Design
------
1.
Changes are made to the ooaofgraphics domain to implement the grid-snap
functionality.

1.1
Functions are added for rounding a real to an int, for rounding a real to the 
nearest grid snap-increment multiple, and for returning the grid snap-increment 
used throughout the canvas code (which is 12 pixels, a value chosen by
experimentation).

1.2
The Shape Tool state Initializing Shape is changed to grid-snap the starting
location of the selection rectangle when creating a shape.

1.3
The Shape Tool state Dragging Shape is changed to grid-snap the extent
of the selection rectangle when creating a shape.

1.4
The Selection Tool state Dragging Symbols is changed to move the selected
symbols the extra distance necessary to equal the total displacement of the 
mouse cursor during the current drag.  (This is instead of moving the symbols
the distance dictated by the mouse-event's deltas, since error is introduced
each time such deltas are grid-snapped.)  To support this, attributes
symbolMoveMouseStartX (and Y) are added to Selection Tool to hold the mouse
position where the drag begins.  The Selection Tool state "Starting Transaction 
for Dragging selected symbols" is changed to store this position in those 
attributes at the beginning of the drag, as well as to create an instance
of a new Graphical Data class, Element In Move, which holds the symbol's
position at the drag start, a value we also need to retain to adjust the
shape's displacement to equal the mouse displacement.  The Selection Tool state 
Saving Symbol Movement is changed to delete the Element In Move instance once 
the drag is finished.

1.5
The Selection Tool state Moving Hotspot is changed to grid-snap the current
waypoint-in-move (if any).

1.6
Connector Tool.finalize() is changed to place the start and end of the newly
created connector at the grid snap-point nearest to the intersection point 
along the shape's edge.  If the shape's edge is not itself snapped to the grid,
then the point will only be a snap-point in one axis.

1.7
Connector Tool.trackMouseWithSegmentEnd() is changed to grid-snap the current 
terminal waypoint of the connector under construction, as it is being 
positioned.

1.8
The Connector Tool state Creating First Segment is changed to grid-snap the 
end of the first segment created for a connector.

1.9
Shape.move() is changed to grid-snap the shape's current position
plus the given delta.  It also adjusts the connecting waypoints of attached
connectors by the shape's displacement, then moves them onto the nearest 
grid snap-point that's along the shape's edge, which is necessary to grid-snap
the end of a connector attached to a shape that is itself being grid-snapped 
for the first time.  An operation Shape.getNearestGridSnapPointOnEdge()
is introduced to return this snap-point.  A Point class is also introduced (in 
the UML 2.0 Diagram Interchange subsystem) to allow a coordinate pair to be 
returned as the result of this operation.

1.10
Shape.moveVertex() is changed to grid-snap the vertex being moved.  
Shape.moveConnectors() is changed to grid-snap the affected ends of connectors 
attached to the shape whose vertex was moved.  

Connector.getDeltaXForCropTo() and getDeltaYForCropTo() are combined into
one getDeltaForCropTo() operation, which is then refactored to eliminate 
redundant code.

1.11
Connector.moveStart() and moveEnd() are changed to take a snapToGrid boolean 
parameter, which is passed on to the Line Segment operations of the same
names, to which (in turn) the same parameter is added.  The Line Segment 
operations grid-snap the relevant segment endpoint, plus the given delta, 
when the snapToGrid parameter is set to true.

1.12 
Operations getStartingSegmentId() and getEndingSegmentId() are added to 
Connector.  They are intended to eliminate the oft-repeated blocks of 
action language present to locate such segments of a connector.

1.13
Line Segment.updateEnd() is changed to grid-snap the segment's ending waypoint.

1.14
Waypoint In Move.finalizeOnShape() is changed to clip the associated
connector such that it is attached to the shape at the grid-snap point on the 
shape's edge that is closest to the intersection point of the connector
and the edge.  

1.15
The Model class is changed to store the current selection rectangle 
in diagram (rather than window) coordinates, to allow for grid-snapping 
the rectangle during its adjustment, when necessary.

The code in ui.canvas.CanvasEditor that supplies the selection rectangle
coordinates to the Model instance is changed to first convert them
to the diagram coordinate space.

2.
Imports for the new Point and Element In Move classes are added to 
ui.canvas.test's gen_testClearDatabaseClass.arc.

3.
A large number of expected results in ui.canvas.test are modified due to 
the addition of the grid-snap behavior.  Some expected results of core.test's
TransactionTest and io.mdl.test's IOMdlNestedTest are also modified, for the
same reason.

In ui.canvas.test's CanvasEditorInteraction, the coordinates of some simulated 
mouse events are adjusted due to the addition of the grid-snap behavior.
In ShapeResizeTest, unnecessary checks are removed that would fail in the 
snap-grid behavior's presence.

4.
ui.canvas.test's StatechartTest and its descendants (which include the classes
whose names end with "SCTest", as well as ConnectorTest) are changed to perform 
their tests on an actual canvas editor, rather than directly on the graphics 
instances involved.  This eliminates the need to manually update the Gr_c
class's notion of where the mouse cursor is currently located before 
simulating mouse movement events, which was previously a very confusing 
aspect of these tests.  It also eliminates having to remember to call 
Activepoller_c.oneShot() every time simulated events need to be fired.

The same tests, as well as CanvasCreationTest, are changed (through an 
option added to CanvasTest's validateOrGenerateResults() method) to run each 
test with the canvas coordinate space altered to match that of the displayed 
model.  There is a problem with all CanvasTest-derived tests in that their 
result validation (or generation) portion potentially modifies the zoom factor 
and viewport position of the canvas (in order to best display the actual 
results), yet the succeeding tests are written as if no such modification has 
taken place.  For example, they reuse constant canvas-coordinate offsets from 
the previous tests, which lose their accuracy if the coordinate space is 
altered.  By (re-)setting the coordinate space to a standard before the 
execution of each test, these offsets remain valid.  

Making the two coordinate spaces coincident helps to simplify the debugging of 
these tests when something goes wrong, because no mental conversion of 
coordinates from one space to another is necessary.

5.
The following utility methods are added to ui.canvas.test's 
CanvasTestUtilities:

getShapeNWCorner
doMousePress
doMouseRelease
doMouseMove
doMouseContextPress
doMousePressRetainSelection
matchCanvasSpaceToModelSpace
getAnyConnectorAttachedToShape
getAssociationConnector
getStartingSegment

Also, handling of MouseDownRetainSelection and MouseContextDown event types 
is added to createMouseEvent().

6.
In bp.test.TestUtil, manual dispatching of the model-events generated by 
copyTestDomainIntoProject() is added, as they weren't getting reported 
immediately, since the calling test runs on the dispatching thread.  
This was causing ExplorerTest.testDomainDelete() to fail.

Design Comments
---------------

Unit Test
---------
- open an existing class diagram

- drag a class a distance that's greater than the amount necessary for it to 
	change grid snap-points 
R the top left corner of the class is grid-snapped, then moves in grid 
	snap-increments, and finishes grid-snapped
R the near ends of attached connectors are grid-snapped

- resize a different class
R the sides of the class's rectangle that are adjacent to the resize vertex 
	are grid-snapped, then are enlarged or reduced in grid snap-increments, 
	and finish grid-snapped
R the near ends of attached connectors are grid-snapped
	
- select the new-class tool
- drag the mouse to define the class's rectangle
R the selection rectangle origin is grid-snapped
R the selection rectangle is enlarged or reduced in grid snap-increments
R the resulting class is grid-snapped 

- select an existing, multi-segment connector
- move one of the connector's interior waypoints
R the movement occurs in grid snap-increments, and the waypoint finishes
	grid-snapped
- select an end of the connector, drag it within its attached class
R the connector end is clipped such that it is grid-snapped along the class's 
	edge 
	
- create a new multi-segment connector between two classes
R the starting endpoint of the first segment is clipped such that it is 
	grid-snapped along the source class's edge 
R the ending endpoint of each segment is grid-snapped while it is being
	dragged, and finishes grid-snapped
R the ending endpoint of the last segment is clipped such that it is 
	grid-snapped along the destination class's edge 
	
- drag a class a distance that's less than the amount necessary for it
	to change grid snap-points 
R the class does not move

[all tests are automated within ui.canvas.test.GridSnapTest, which is added
to the CanvasTestSuite]	
	
End
---

$Log: i538.dnt,v $
Revision 1.1  2009/09/03 18:18:57  rmulvey
job:dts0100616734
Archive documentation and other development notes following the R3_0_0 release.  These are being archived under Documentation/internal/technical/archive/20090903

Revision 1.6  2009/01/01 23:13:05  rmulvey
Job:4060
Batch promotion of copyright changes from Review-i4060 and Review-i4060-01.

Revision 1.5.30.1  2008/12/31 16:10:08  rmulvey
Job:4060
This is a batch commit of 2009 copyright changes to branch Review-i4060.  This includes the
report that outlines all changes made (before/after for each line changed).  This report is found here: <cvs>/Documentation/internal/test_results/R2_1_2/i4060/update-copyright-results.txt.

Revision 1.5  2005/08/29 23:16:11  jmather
Job: 538
Addressed review comments.

Revision 1.4  2005/08/26 19:50:31  jmather
Job: 538
Added a design point.

Revision 1.3  2005/08/25 22:10:33  jmather
Job: 538
Updated after unit tests written and existing tests updated to jibe with addition of grid-snap behavior.

Revision 1.2  2005/08/10 17:16:48  jmather
Job: 538
Added unit tests.

Revision 1.1  2005/08/10 00:22:25  jmather
Job: 538
Introduced.

