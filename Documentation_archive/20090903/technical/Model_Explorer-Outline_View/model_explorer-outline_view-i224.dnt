========================================================================

File:      $RCSfile: model_explorer-outline_view-i224.dnt,v $
Version:   $Revision: 1.1 $
Modified:  $Date: 2009/09/03 18:27:08 $

(c) Copyright 2004-2009 by Mentor Graphics Corp. All rights reserved.

========================================================================
This document contains information proprietary and confidential to
Mentor Graphics Corp., and is not for external distribution.
========================================================================

Tiger Project Design Note
Model Explorer and Outline Views Tree Extension


Abstract
--------

This document identifies the modifications to the infrastructure needed to get 
Eclipse to show the extended Model Explorer and Outline View Trees as described
in the application note.

In order to review these design changes the ooaofooa.bak [4] and
cme_functions.sql [6] should be considered as parts of this document and
included in it's review.

History
-------

update - i224-072204-02.rvm

Document References
-------------------

[1] bp.core/doc/external/Specification/Tiger Spec.doc
[2] bp.core/doc/internal/technical/Model_Explorer-Outline_View/
                                     model_explorer-outline_view-i224.ant

[3] bp.core/doc/internal/technical/Model_Explorer-Outline_View/
                                     model_explorer-outline_view.ant/dnt/int
[4] bp.core/mdl/ooaofooa.bak [PRC_sandbox V1.43.2.3]
[5] bp.core/sql/context_menu.pei.sql
[6] bp.core/sql/cme_functions.sql
[7] bp.core/sql/context_menu.pei.sql

Design
------

i224.1  Create the extra entries in the table that specifies the tree
        hierarchy. The analysis note [2] explains what table entries are
        required.
i224.2  Create new icons as required by the specification[1].
i224.3  Create menu entries in context_menu.pei.sql [7] for each required 'New'
        entry.
i224.4  Create OAL functions on the appropriate metamodel entities for
        creating new child entities.
i224.5  Create menu entries in context_menu.pei.sql [7] for each required
        'Delete' entry.
i224.6  Create OAL functions on the appropriate metamodel entities for
        deleting the entity.
i224.7  Create menu entries in context_menu.pei.sql [7] for each required
        'Rename' entry.
i224.8  Create OAL functions on the appropriate metamodel entities for
        renaming the entity.
i224.9  Modify gen_import_java.arc so that the generated code instantiates
        the new packages as described in the analysis.

Work Required
-------------

i224.0      Modify the metamodel to support nested packages
			The following work was discovered during design.  To preserve 
			traceability to the analysis note, and because this work is enabling
			to some of the rest of the work, it is documented here as section
			zero.
i224.0.1    Modify ooaofooa to support new Datatype, Function, and EE Packages
			For each package add a '* Package' class and associate it to the
			domain. Create a '* Package in Package' class.  Associate
			'* Package' to itself through the '* Package in Package' class.
			Create a '* in Package' class and use that as an associator to
			create a one-to-many association between '* Package' and '*'. 
i224.0.2    Modify ooaofooa to support Subsystem packages in Subsystem packages
            Create a 'Subsystem in Domain' package and use that as an associator
            to associate top level Subsystem packages to the Domain.  Create a
            'Subsystem in Subsystem' associator and use that to associate parent
            SS packages to child SS packages. 
i224.1      Create the extra entries in UITree.pei.sql
            Most entries are straightforward.  One that is not intuitive is the
            one for 'Event Data Item Package'.  There is no underlying metamodel
            class for it.  Instead a node named 'Event Data Item Package' is
            created on metamodel class SM_SM.  This is explained further in the
            design of SM_SM_NewDataItem, paragraph i224.4.3.  
i224.2      Create new icons as required by the specification [1]
i224.2.1    Create 16X16 pixel icons
i224.2.2    Create production icons
            Submit icons created in 2.1 to Graphics Department along with [1] to
            use as guides to create production versions.  Campbell McCausland
            should be cc'ed on this request.
i224.3      Create menu entries for each required 'New'
            Edit context_menu.pei.sql to create menu entries for each tree node
            that requires 'New' functionality.
i224.4      Create OAL functions in cme_functions.sql on the appropriate
            metamodel entities for creating new child entities
            Many functions are simple, an example is presented in i224.4.1.  A
            complete list of non-trivial functions follows:

            - O_OBJ_NewClassStatechart
            - O_OBJ_NewInstanceStatechart
            - SM_SM_NewDataItem
            - SM_ASM_NewEvent and SM_ISM_NewEvent
            - SM_ASM_NewState and SM_ISM_NewState
            - SM_LEVT_NewDataItem
            - S_DOM_NewSubsystem           
            - S_DPK_NewDatatypePackage
            - S_EEPK_NewExternalEntityPackage
            - S_FPK_NewFunctionPackage
            - S_SS_NewSubsystem

			Their behavior is described in succeeding sections
			(i224.4.2 and onward).
i224.4.1    O_OBJ_NewAttribute
            This function consists of selecting the instance of the class that
            will contain the new attribute, creating the new attribute,
            associating the attribute to the class and calling attribute's
            initialization operation.
i224.4.2    O_OBJ_NewClassStatechart and O_OBJ_NewInstanceStatechart
            These functions include checks for existing SCs.  If they exist, the
            functions return immediately.
i224.4.3    SM_SM_NewDataItem
            This function calls newly written operation SM_SM.newDataItem.  As
            per the analysis note [2] a new data item is created but not
            associated to any States or Events via an SM_SUPDT.
i224.4.4    SM_ASM_NewEvent and SM_ISM_NewEvent
            These functions first navigate to the SM_SM and call the newly
            written operation SM_SM.newEvent which in turn calls
            SM_EVT.initialize.  The initialize function assures that the new
            event is related to the empty SUPDT.
i224.4.5    SM_ASM_NewState and SM_ISM_NewState
            These functions first navigate to the SM_SM and call the newly
            written operation SM_SM.newState which in turn calls
            SM_STATE.initialize.  The initialize function assures that the new
            state is related to the empty SM_SUPDT.
i224.4.6    SM_LEVT_NewDataItem
            This function navigates to the SM_EVT and calls SM_EVT.newDataItem.
            That operation assures that the new Data Item is created as per the
            analysis note.
i224.4.7    S_DOM_NewSubsystem
            This function associates the new SS to the Domain using a
            'Subsystem in Domain' class, to formalize that the SS is a top level
            domain SS.
i224.4.8    S_DPK_NewDatatypePackage, S_EEPK_NewExternalEntityPackage,
            and S_FPK_NewFunctionPackage
            These functions associate parent and child '* Packages' using the
            '* Package in Package' associator classes.
i224.4.9    S_SS_NewSubsystem
            This function associates parent and child SS packages across the
            'Subsystem in Subsytem' associator class.
i224.5      Create menu entries for each required 'Delete'
            Edit context_menu.pei.sql to create menus entries for each tree node
            that requires 'Delete' functionality.
i224.6      Create OAL functions in cme_functions.sql on the appropriate
            metamodel entities for deleting the entities
            At first glance many of the *Delete functions are simple, calling
            their respective class.dispose operations.  However dispose's may
            have very significant consequences.  For example, when deleting
            a class you must delete all of the attrs, operations, iobjs, and
            associations associated to it.  The general rules are:

            (1) On one-to-many associations the one side selects all of the
            many's and call each many's dispose().
            (2) The many side of a one-to-many selects their 'parent' one side,
            disassociates and deletes itself.
            (3) Super-subtype associations work similiarly to many-to-one
            associations.  Supertypes select the subtype and call the subtype's
            dispose.  Subtypes select and disassociate from the supertype and
            delete themselves.
            (4) In associative associations the associators are selected and
            their dispose functions are called.  Those functions disassociate
            the participant classes and then delete the associator.
            
i224.6.1    R_ASSR
            The R_ASSR (subtype of R_ASSOC) metaclass formalizes associative
            associations.  When deleting an associative class, rather than
            completely disposing of associative associations they are migrated
            to simple unformalized associations via an operation named
            R_ASSOC.migrateToSimple().
i224.6.2    R_RGO
            When a 'Referring Class in Association' (R_RGO) is disposed, all
            it's associated 'Attribute Reference in Object's (O_REF) must be
            cleared.  This is done via an operation named
            R_RGO.clearReferences().  In that operation there is a check for if
            the O_REF is the last one on an O_RATTR.  If so, the O_RATTR is
            disposed along with the O_REF unless it is part of an identifier.
            If it is the O_RATTR is migrated to an O_BATTR (supertype) and
            O_NBATTR (subtype).
i224.7      Create menu entries for each required 'Rename'
            Edit context_menu.pei.sql to create menus entries for each node in
            UITree.pei.sql that needs 'Rename' functionality.
i224.8      Create OAL functions in cme_functions.sql on the appropriate
            metamodel entities for renaming the entities
i224.8.1    The functions to rename entities are simple, selecting the instance
            and then assigning the value of the new_name parameter to the Name
            attribute.  The one exception is in the case of a SM_LEVT where it
            is required to navigate to the associated SM_EVT and assign new_name
            to the Mning attribute.
i224.9      Modify gen_import_java.arc so that the generated code
            instantiates the new packages as described in the analysis note [2]
i224.9.1    Datatype, External Entity, and Function Packages
            For each package type check to see if the model being imported
            contains entities to be added to the package. If so, create the top
            level package class and for each entity create a class to contain it
            and the associator class.  Relate the entity class to the top level
            package using the associator.
i224.9.2    Subsystem Packages
            Make existing Subsystem packages top level packages.  For each
            subsystem in the imported model, create a 'Subsystem in Domain'
            class and relate the Subsystem to the Domain using the 'Subsystem in
            Domain' class as the associator.
i224.10     Repair bp.core/generate.xml
            Repair a name-clash in bp.core/generate.xml that prevents CME
            skeleton functions from being generated.
i224.11     Repair ActivityEditor.java
            While researching this design it was discovered that disposing a
            function while it's Activity Editor is open would cause a NPE.  This
            was traced down to line 261 in ActivityEditor.java.  A check for if
            mrmam is null is inserted.  If it is null a for loop is not entered
            and the open activity file is deleted.  
i224.12     Repair association R824
            This is incidental work found while researching the design for this
            issue.  Association R824 in the Value subsystem between S_ENUM and
            V_LEN should be 1-to-many rather than 1-to-(0,1).  

Design Comments
---------------

Work Required Section i224.0
            In order for an entity to be displayed in the Explorer tree, an
            underlying metamodel class must exist.  Therefore since Package
            classes must be created, it was decided to proceed and include the
            extra work to implement nested packages. 

Work Required Section i224.10
            Rebuilding core causes cme_import.sql to be generated.  This file
            contains the metamodel domain functions and is meant to be imported
            into the ooaofooa model when the domain functions need to be
            modified.  A name clash in bp.core/generate.xml was preventing
            generation of function skeletons for new entries defined in
            cme_functions.pei.sql.  

End
---

$Log: model_explorer-outline_view-i224.dnt,v $
Revision 1.1  2009/09/03 18:27:08  rmulvey
job:dts0100616734
Archive documentation and other development notes following the R3_0_0 release.  These are being archived under Documentation/internal/technical/archive/20090903

Revision 1.9  2009/01/01 23:13:26  rmulvey
Job:4060
Batch promotion of copyright changes from Review-i4060 and Review-i4060-01.

Revision 1.8.156.1  2008/12/31 16:10:35  rmulvey
Job:4060
This is a batch commit of 2009 copyright changes to branch Review-i4060.  This includes the
report that outlines all changes made (before/after for each line changed).  This report is found here: <cvs>/Documentation/internal/test_results/R2_1_2/i4060/update-copyright-results.txt.

Revision 1.8  2004/07/23 22:40:05  pablo
Job: 224
Update per review minutes i224-072204-02.rvm

Revision 1.7  2004/07/21 21:58:10  pablo
Job: 224
Update ooaofooa version

Revision 1.6  2004/07/21 19:13:29  pablo
Job: 224
Move notice to include ooaofooa in review to
Abstract

Revision 1.5  2004/07/21 18:57:30  pablo
Job: 224
Modified per suggestions from GBR

Revision 1.4  2004/07/21 18:09:20  pablo
Job: 224
Adjust the margins

Revision 1.3  2004/07/21 16:21:24  pablo
Job: 224
Added explanation that ooaofooa should be included
as part of the review.

Revision 1.2  2004/07/21 15:56:04  pablo
Job: 224
Modify per comments from CDM and GBR

Revision 1.1  2004/07/20 21:48:28  pablo
Job: 224
Initial Introduction

