========================================================================

File:      $RCSfile: i1698.dnt,v $
Version:   $Revision: 1.1 $
Modified:  $Date: 2009/09/03 18:20:47 $

(c) Copyright 2006-2009 by Mentor Graphics Corp. All rights reserved.

========================================================================
This document contains information proprietary and confidential to
Mentor Graphics Corp., and is not for external distribution.
========================================================================

Tiger Project Design Note
MV: Engine, Model Wiring

Abstract
--------
This note describes an approach for implementing automatic model wiring during
a model verifier session.

History
-------

Document References
-------------------
[1] BZ 1698
[2] Analysis note: Documentation/internal/technical/Verifier-Debugger/i1698.ant

Background
----------
See analysis note, ref [2]

Analysis
--------
See analysis note, ref [2]

Design
------
1.	Add support for automatic wiring when executing bridge invocations
	(bridges with void return type). 

Adding model wiring to the verifier will involve automatic searching through 
other domains in the system for domain functions that match the prototype of the
bridge being executed. This searching will occur each time a bridge without any
OAL statements is executed. When a match is found, the match can be stored to 
improve the speed of future searches. An attribute will be added to the domain
class which indicates if the domain is involved in a verifer session. Only 
domains marked as being in a verifier session will be searched. The verifier 
launcher will eventually be responsible for setting the value of this attribute. 

The first step is to check for any previous domain function that was wired to 
the bridge. If one isn't found, the search will begin by attemting to find a
domain in the system with the same name as the EE of the bridge. If a domain is 
found its attibute indicating whether or not it is involved in a verifier 
session is checked. If this is true, the name of each function in every function 
package of the domain is compared to the name of the bridge. Then the parameter 
names and types of each function with the same name as the bridge are compared 
to the parameters of the bridge. If more than one function matches the bridge an
error is reported and the first function found is used for the automatic wiring.
If the search finds at least one function that matches the bridge, the
relationship between domain function and bridge is established so the match can 
be found quicker the next time the bridge is called.
 
2.	Add support for automatic wiring when executing bridge values(bridges with 
	return values).
	
The design for this is the same as in #1 above. The work required for this item
will only be slightly different from #1. The differences will be in the location
of the work and handling of return values.

3. Add special case for S_SYS->S_DOM[R28] relationship navigation in the MC-Java
model compiler.

During my initial implementation of changes for this issue I noticed that the
S_SYS->S_DOM[R28] relationship navigation was not working correctly in the code 
generated by the MC-Java model compiler. A temporary fix will need to be added 
to the file referring.inc. The introduction of PLCM should fix this issue as
well, which is why this is being marked as a temporary fix.

Design Comments
---------------
	
Work Required
-------------
1.	Add support for automatic wiring when executing bridge invocations
	(bridges with void return type). 
	
An attibute, IsBeingVerified, is added to the Domain class. The verifier
launcher will eventually be responsible for setting the correct value of 
this attribute.
	
Code will be added to Bridge Invocation.execute() that will search for a 
domain function that matches the bridge if the bridge body doesn't contain
any OAL statements. This search is the search as described in the design 
section with the exception of attempting to match the parameters. If any 
matching function is found a new stack and stack frame is added to the other
system for the found domain function to run under. Then a new operation
named setupWiredFunctionParameters() is called. This operation performs 
the full search if needed and sets the values for the parameters of the 
domain function about to be executed. If any matching domain function is found
then it is executed. Then the created stack and stack frame are deleted. The 
operations to create and delete stacks and stack frames for the bridge need
to be added to the Body class. 
	
The work to cache matching bridge invocations to domain functions requires
changes in few different places in the ooaofooa model. An associative 
relationship will be added to the domain subsytem that connects the bridge
class to the function class.  A new class, S_AW, will be added and used as
the link class. The relationship is conditional one(function) to conditional 
many(bridge). The Execution Engine.reset() operation will be updated to 
remove any of these relationships in the system. Bridge.dispose and
Function.dispose will need to be updated to remove the relationships as 
needed. 

2.	Add support for automatic wiring when executing bridge values(bridges with 
	return values).
	
This is the same work as described in #1 above except it will be added to 
the Bridge Value class and its getValue() operation. Also, the value 
returned by the domain function invocation will also need to be used as the
return value for the getValue() operation.
	
3.	Add special case for S_SYS->S_DOM[R28] relationship navigation in the
	MC-Java	model compiler.

Special casing will be added to the referring.inc file in the MC-Java
project. The special cases will be added to 3 of the functions that the file
can generate and the enclosing code should only be used to generate code 
when the model root = "Ooaofooa" and the relationship number is 28.	The 
system model class(S_SYS) has a native function, getChildren(),  which
returns a list of all domains and domain proxies related to the S_SYS. Any
domain proxies in the list can be converted to domains and then the list is 
searched as needed, which corrects the issue.

Unit Test
---------
- We need to test that automatic wiring does occur correctly. Test 1 should 
test this.
- We need to test that if any OAL statements are contained in a bridge that
they are executed and not any domain function that would have been automatically
wired for execution. Test 2 should test this.
- We need to test that only domains marked as being verifed are searched when 
attempting to automatically wire bridges to domain functions during a verifier
session. Test 3 should test this.

Definition of the test model. The model should contain:
1.	Two domains. Domain_1 should have an EE with
	4 bridges. Bridge_1 has multiple parameters and a void return type. Bridge_2
	has the same prototype as Bridge_1 with the exception of an added boolean
	return type. No OAL statements should be added to the action semantics for 
	these bridges.
	
	Bridge_3 and Bridge_4 should be similar to Bridge_1 and Bridge_2 but with 
	slightly different names. Bridge_3 and Bridge_4 should contain an 
	OAL statement in the action semantics field that logs a test success.
	
2.	Domain_2 should be named the same as Domain_1's EE. It should contain domain
	functions with the same prototypes as the bridges in Domain_1's EE.	The
	domain function matching Bridge_1 should log the arguments passed to
	it. The domain function matching Bridge_2 should return true if the argument
	values do equal some predetermined value, false otherwise. The domain 
	functions matching bridges 3 and 4 should log a failure. 
	
3.	For each bridge in Domain_1, add a domain function to Domain_1 that executes
	it. If the bridge returns a boolean, use this value to log a success if it 
	is true. If the return value is false log a failure.

Test 1.
	Load the wiring model and set the IsBeingVerified attribute for all domains
	to true. Execute the domain function that executes Bridge_1. Do the same for
	the domain function that executes Bridge_2. Compare the results to the 
	expected results.	

Test 2.
	Load the wiring model and set the IsBeingVerified attribute for all domains
	to true. Execute the domain function that executes Bridge_3. Do the same for
	the domain function that executes Bridge_4. The domain functions in Domain_2 
	should not be executed because bridges 3 and 4 contain OAL statments. Compare
	the results to the expected results.	

Test 3.
	Load the wiring model and set the IsBeingVerified attribute for all domains
	to false. Execute the domain functions that execute bridges 1 and 2. No 
	additional information should be logged because the wiring should not 
	happen. Compare the results to the expected	results.	

End
---

$Log: i1698.dnt,v $
Revision 1.1  2009/09/03 18:20:47  rmulvey
job:dts0100616734
Archive documentation and other development notes following the R3_0_0 release.  These are being archived under Documentation/internal/technical/archive/20090903

Revision 1.4  2009/01/01 23:13:14  rmulvey
Job:4060
Batch promotion of copyright changes from Review-i4060 and Review-i4060-01.

Revision 1.3.16.1  2008/12/31 16:10:21  rmulvey
Job:4060
This is a batch commit of 2009 copyright changes to branch Review-i4060.  This includes the
report that outlines all changes made (before/after for each line changed).  This report is found here: <cvs>/Documentation/internal/test_results/R2_1_2/i4060/update-copyright-results.txt.

Revision 1.3  2006/05/10 13:54:17  jluebker
Job: 1698
Updated per review minutes

Revision 1.2  2006/05/09 15:18:01  jluebker
Job: 1698
Corrected simple grammar errors in design note

Revision 1.1  2006/05/08 20:43:16  jluebker
Job: 1698
Introduced

