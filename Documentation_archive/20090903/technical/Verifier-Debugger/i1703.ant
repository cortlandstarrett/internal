========================================================================

File:      $RCSfile: i1703.ant,v $
Version:   $Revision: 1.1 $
Modified:  $Date: 2009/09/03 18:20:48 $

(c) Copyright 2006-2009 by Mentor Graphics Corp. All rights reserved.

========================================================================
This document contains information proprietary and confidential to
Mentor Graphics Corp., and is not for external distribution.
========================================================================

Tiger Project Analysis Note
Breakpoints


Abstract
--------
This note describes the requirements for breakpoints in Verifier

History
-------

Document References
-------------------
[1] BZ issue 1703
[2] BZ issue 1704

Background
----------
Breakpoint functionality relies on the capability to halt execution. Halting
execution was implemented with Execution Control in issue 1704 (ref[1]). 

Breakpoints will have to be implemented for the following: 

1. OAL statements
2. Event 
	- Enqueue
	- Dequeue
	- Can't Happen
	- Ignored
3. Attribute
	- Read 
	- Write
	- Read & Write
	- Uninitialized access
4. Association 
	- Creation
	- Deletion
5. Instance
	- Creation
	- Deletion
	- Empty access
		* relate
		* unrelate
		* generate
6. State 
	- Transition in
	- Transition out

OAL breakpoints are promoted with issue 1704 for testing purposes. Because of 
this, OAL breakpoints will not be re-implemented with this issue. However, 
OAL breakpoints will be more extensively tested in this issue.  

Analysis
--------
We will use the Java Development Toolkit (JDT) as our model for halting 
execution on breakpoints. The following specifies the halting point for 
each breakpoint based on JDT: 

   Breakpoint Type		Halting Point
-----------------------------------------------------------------------------
1. OAL					On OAL statement with a breakpoint
2. Event				
	- Enqueue			Prior to enqueing or dequing any other events			
	- Dequeue			On first statement of action
	- Can't Happen		Prior to enqueing or dequing any other events		
	- Ignored			Prior to enqueing or dequing any other events	
3. Association
	- Creation			On statement that creates association
	- Deletion			On statement that deletes association
4. Attribute
	- Read				On statement where read occurs 
	- Write				On statement where write occurs
	- Uninitialized		On statement that accesses uninitialized attribute
5. Instance
	- Creation			On statement that creates instance
	- Deletion			On statement that deletes instance
	- Empty Access
		- relate		On statement that relates the empty instance
		- unrelate		On statement that unrelates the empty instance 
		- generate		On statement that generates event to empty instance
6. State
	- Transition in		On first statement of action
	- Transition out	On first statement of following action

The various breakpoint types will be modeled. After modeling breakpoints, we 
will make use of execution halting, implemented in issue 1704, to implement
breakpoint functionality. We will continuously perform checks to determine if 
a breakpoint has been encountered. If a breakpoint has been encountered, we 
will halt execution. 


Work Required
-------------
1. Model Breakpoints

There are 6 different breakpoint types that we will modeled: 

1. OAL breakpoint
2. Event breakpoint
3. Association breakpoint
4. Attribute breakpoint
5. Instance breakpoint
6. State breakpoint

The different breakpoint types have common characteristics. For example, each
breakpoint type can be enabled or disabled. Because of this, we will model a 
breakpoint supertype that will contain information, such as an enabled boolean, 
that is relative to all breakpoint types.   

The different breakpoint types will be modeled as subtypes of the breakpoint
supertype. The subtype will contain information that is specific to a particular
breakpoint. For example, an event breakpoint is the only type of breakpoint that
can halt when dequeued. Hence, the event breakpoint subtype will contain
a boolean, BreakOnDequeue, that will signify that the breakpoint will
halt execution when dequeued. 

The breakpoint subtypes will be associated with the classes that the 
breakpoints can be set on. For example, an OAL breakpoint subtype will
be associated with the Statement class.  

2. Implement Breakpoint Checks

We must be able to halt on individual statements. As a result, 
we will check each statement to see if it has an enabled OAL breakpoint set on 
it prior to executing the statement.

Breakpoint checks will be performed by selecting the breakpoint that is
related to the item that we want to check for a breakpoint. If a breakpoint 
exists, we will halt execution. For example, if we wanted to check if 
the next statement has a breakpoint, we will select one OAL breakpoint that 
related to the next statement. If that statement exists, we will halt 
execution prior to executing the next statement.    

Acceptance Test
---------------
We will test each breakpoint type and situation specified in the analysis 
section. The individual tests will ensure that we halt at the correct point
as specified by the analysis section. 

To make sure we halt at the correct point, 
we will create instances before and after the halting point. By examining the 
number of instances, we will be able to determine if we halted correctly at the
halting point. 


End
---

$Log: i1703.ant,v $
Revision 1.1  2009/09/03 18:20:48  rmulvey
job:dts0100616734
Archive documentation and other development notes following the R3_0_0 release.  These are being archived under Documentation/internal/technical/archive/20090903

Revision 1.3  2009/01/01 23:13:15  rmulvey
Job:4060
Batch promotion of copyright changes from Review-i4060 and Review-i4060-01.

Revision 1.2.16.1  2008/12/31 16:10:21  rmulvey
Job:4060
This is a batch commit of 2009 copyright changes to branch Review-i4060.  This includes the
report that outlines all changes made (before/after for each line changed).  This report is found here: <cvs>/Documentation/internal/test_results/R2_1_2/i4060/update-copyright-results.txt.

Revision 1.2  2006/06/02 18:20:51  kurtb
Job: 1703
Re-introduce for Review

Revision 1.1  2006/06/01 21:27:53  kurtb
Job: 1703
Introduced

