========================================================================

File:      $RCSfile: i1704.int,v $
Version:   $Revision: 1.1 $
Modified:  $Date: 2009/09/03 18:20:47 $

(c) Copyright 2006-2009 by Mentor Graphics Corp. All rights reserved.

========================================================================
This document contains information proprietary and confidential to
Mentor Graphics Corp., and is not for external distribution.
========================================================================

Tiger Project Implementation Note
Execution Control

Abstract
--------
This note describes the implementation of execution control.


History
-------


Document References
-------------------
[1]  BZ issue 1704
[2]  Documentation/internal/technical/Verifier-Debugger/i1704.ant
[3]  Documentation/internal/technical/Verifier-Debugger/i1704.dnt

Background
----------
See ref [2]

Design
------
See ref [3]

Implementation Comments
-----------------------
Differing from ref[3], the boolean attribute stepping was not added to the 
stack class. Instead, step return on states is implemented by executing an 
action's body of code once before halting. 

As mentioned in ref [3], an enumerated data type, Run_State, was added to stacks
to allow halting and resuming of execution on a stack. To halt execution on all
stacks, one needs to invoke the halt operation of Execution Engine.  This 
operation sets the Run_State of all stacks to Halted, and forces 
execution to halt on all stacks. 

To resume execution, one needs to call the resume operation of the 
Execution Engine. This operation will set the Run_State of all stacks to 
Resuming and cause execution to resume on all stacks. 

To perform stepping on a particular stack, the stack needs to be in the Halted
state with stack frames present. To step on the stack, one will need to invoke
a stack operation (stepIn(), stepOver(), stepReturn() ) for the stack instance.
For example, one can perform a step in on a desired stack with the following 
statement:desiredStack.stepIn(). 

To perform stepping on an instance's event queue, the stack in which Verifier
executes in will need to be in a Halted state with no stack frames present. 
One can step on an instance's event queue by invoking stepping operations 
(stepIn, stepOver) for the instance. For example, one can perform a step in on
on a desired instance's event queue with the following statement: 
desiredInstance.stepIn(). Once a step in has been performed on an event queue, 
one can step through the code in an action using the stack-based stepping 
operations described in the previous paragraph.

To perform stepping on a class's event queue, the same stepping operations can 
be used as described for instances. 

An extra association (R943) is added between stack and stack frame. This 
relationship was added so that the stack on which a stack frame exists can
easily be determined.   

A boolean, isPollingStack, is added to the stack class to signify whether a
stack instance will poll instances. If isPollingStack is true, the stack will
poll instances. Otherwise, it will not.


Unit Test
---------
JUnit test class: /com.mentor.nucleus.bp.core.test/src/com/mentor/nucleus/bp/
core/test/verifier/ExecutionControlTest.java

The JUnit test class was tested by adding it to the VerifierTestSuite in 
bp.core.test. All JUnit test cases listed in ref [3] were executed 
without failures or errors. 

When halting, resuming, or stepping, it was important to make
sure that the proper number of instances, stack frames, blocks, and block in
stack frames exist. Therefore, a JUnit method called checkState is created to 
check the number of instances, stack frames, blocks, and block in stack frames. 
checkState is invoked multiple times during each test case to ensure that 
the correct number of instances, stack frames, etc. exist.  


Code Changes
------------

Created:
/com.mentor.nucleus.bp.core.test/src/com/mentor/nucleus/bp/core/test/verifier/ExecutionControlTest.java

Modified:
/com.mentor.nucleus.bp.core/models/ooaofooa.xtuml
/com.mentor.nucleus.bp.core/src/com/mentor/nucleus/bp/core/ui/ExecuteAction.java
/com.mentor.nucleus.bp.core.test/models/Verifier Test.xtuml
/com.mentor.nucleus.bp.core.test/src/VerifierTestSuite.java
/com.mentor.nucleus.bp.core.test/src/com/mentor/nucleus/bp/core/test/verifier/VerifierTest.java

End
---

$Log: i1704.int,v $
Revision 1.1  2009/09/03 18:20:47  rmulvey
job:dts0100616734
Archive documentation and other development notes following the R3_0_0 release.  These are being archived under Documentation/internal/technical/archive/20090903

Revision 1.8  2009/01/01 23:13:15  rmulvey
Job:4060
Batch promotion of copyright changes from Review-i4060 and Review-i4060-01.

Revision 1.7.16.1  2008/12/31 16:10:21  rmulvey
Job:4060
This is a batch commit of 2009 copyright changes to branch Review-i4060.  This includes the
report that outlines all changes made (before/after for each line changed).  This report is found here: <cvs>/Documentation/internal/test_results/R2_1_2/i4060/update-copyright-results.txt.

Revision 1.7  2006/05/30 18:55:20  kurtb
Job: 1704
Addressed Observation

Revision 1.6  2006/05/30 16:01:26  kurtb
Job: 1704
Addressed Observations

Revision 1.5  2006/05/30 07:07:04  kurtb
Job: 1704
Re-introduce for Review

Revision 1.4  2006/05/16 21:23:53  kurtb
Job: 1704
Introduce for Review

Revision 1.3  2006/04/19 05:34:29  kurtb
Job: 1704
Re-introduce for Review

Revision 1.2  2006/04/14 16:04:51  kurtb
Job: 1704
Re-introduce for Review

Revision 1.1  2006/04/14 15:02:26  kurtb
Job: 1704
Introduce for Review
