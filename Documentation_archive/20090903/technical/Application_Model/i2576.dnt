========================================================================

File:      $RCSfile: i2576.dnt,v $
Version:   $Revision: 1.1 $
Modified:  $Date: 2009/09/03 18:21:19 $

(c) Copyright 2006-2009 by Mentor Graphics Corp. All rights reserved.

========================================================================
This document contains information proprietary and confidential to
Mentor Graphics Corp., and is not for external distribution.
========================================================================

Tiger Project Design Note
Implement Graphics Only Component Diagrams

Abstract
--------
This note describes the changes required to support drawing graphically
component diagrams.

History
-------

Document References
-------------------
[1] Issue 1687
[2] Issue 2576
[3] 1687.ant
[4] Issue 2614
[5] UML 2.0 port work (Issues with keyword UML20), specific project:
		com.mentor.edge.bp.ui.diagrams

Background
----------
A graphics only version of the component diagrams was promised to our customers
for release 1.4.1.

The work described in this note will provide this.

Design
------
1. Extend ooaofooa to include new component elements

1.1 Add new metamodel elements

The following new elements are added to ooaofooa:

Component - SS
  Component - Class
  Requirement - Class
  Provision - Class
  Satisfaction - Class
  Interface - Class
  Executable Property - Class
  Property Parameter - Class
  Interface Signal - Class
  Interface Operation - Class
  Data Type - Imported Class (from: Domain SS)
Component Diagram - SS
  Component Diagram - Class
  Component Diagram in Component Diagram - Class
  Component Diagram Element - Class
  Component In Diagram - Class
  Component - Imported Class (from: Component SS)
  Used Component - Class
  Interface In Diagram - Class
  Provision - Imported Class (from: Component SS)
  Requirement - Imported Class (from: Component SS)
  System Model - Imported Class (from: Domain SS)
Interface Diagram - SS
  Interface Diagram - Class
  Interface Diagram in Interface Diagram - Class
  Interface - Imported Class (from: Component SS)
  System Model - Imported Class (from: Domain SS)
System Level Datatypes - SS
  System Datatype Package - Class
  System Datatype in Package - Class
  Data Type Package - Imported Class (from: Domain SS)
  Data Type - Imported Class (from: Domain SS)
  System Model - Imported Class (from: Domain SS)

The component subsystem contains the classes necessary to capture the data
required for modeling components.

A Component is related to an Interface through two different link classes,
Requirement and Provision.  The links are setup when either the Provision or
Requirement is formalized against an interface that is defined in an Interface
Diagram.  Provisions and Requirements are used to represent provided and
required interfaces on a Component Diagram.  The formalization is handled by
adding the necessary Formalize menu entries.  They are also accompanied by the
opposite menu entry Unformalize.  The rules for when these are shown are
described later.

A Satisfaction is a link class between a Requirement and a Provision.  These are
created when a provided interface is connected to a required interface.

An Interface is related to an Executable Property, which is a supertype of the
Interface Signal and Interface Operation classes.  An Executable Property is
related to a Property Parameter as both the subtypes of an Executable Property
may have parameters.  The Property Parameter is related to a Data Type to define
the parameter type.  An Interface Operation is related to a Data Type to capture
the return type of the operation.

The Component Diagram subsystem contains classes specific to the symbols that
may be shown on a Component Diagram.  The Component Diagram in Component Diagram
class is used to handle nesting.  The Component Diagram Element class is a
supertype which represents all elements that may show on a Component Diagram.
It has two subtypes, Component In Diagram and Interface In Diagram.  The
Interface In Diagram class has two subtypes, Provision and Requirement which as
stated above represent provided and required interfaces.  The Component In
Diagram class has two subtypes, Component and Used Component.  These two classes
represent components and used components on the diagram.  A Component is related
to a Used Component to capture the fact that it represents the Used Component.
A Component In Diagram is related to the Interface In Diagram class to capture
the connection of a provided interface and required interface to either a
Component or a Used Component.

The Interface Diagram subsystem is used to capture the nesting behavior as well
as the fact that the Interface class is shown on an Interface Diagram.

The System Level Datatypes subsystem is used to prevent modifying the structure
of the currect Data Type Package class as well as the current Data Type class.

The Domain subsystem was modified to change R14 from a 1 S_DOM to many S_DT
to many S_DOM to many S_DT because a Data Type may now be contained at the
system level.  A system level data type may also be shown in many domains.

All elements created have the necessary dispose operations added.

All elements which are represented as persistable model components have the
required convertToInstance operations added.

1.2 Provision and Requirement Formalization Rules

An actionFilter operation is added to both the Provision and Requirement
classes.  This filter is used to adhere to the rules following:

Connected to a Component
  1. Allow if no satisfaction is made and there is at least one defined
  	 Interface that is not already used to formalize
  2. Allow if a satisfaction is made and the satisfying Requirement or
		 Provision can be formalized
Connected to a Used Component
  1. Allow if the assigned Component has at least one Provision or Requirement
     that is formalized against an Interace
  2. Allow if a satisfaction is made with a Requirement or Provision that can be
     formalized

1.3 Used Component assignment

The Used Component class has a context menu entry added which is used to assign
a Used Component to a Component.  It also has a menu entry added which is used
to unassign the Used Component.  Along with these context menu entries, an
actionFilter operation is added which will prevent the Assign menu entry from
showing when there is no Components available for assignment.  It will also
prevent the Unassign menu entry from showing when the Used Component is not yet
assigned.

2. Architectual changes

2.1 Changes to MC-Java

2.1.1 Update ooa_schema to include new elements and associations

The metamodel schema is updated to include definitions for all new model
elements as well include the necessary ROPs for all new associations.

2.1.2 Update archetypes which traverse R14 to use new link class.

A new link class was added between S_DOM and S_DT which is used to handle the
many to many association between domains and data types.  This was done because
a data type may be defined at the system level, and can be related to many
different domains.

A search was done on all files under MC-Java for 'R14'.  No matches were found
therefore no traversals must be updated.

2.1.3 Change code generation such that all model change events are fired under
			the default root
			
With the addition of multiple system level elements, there were a lot of
problems occuring with respect to event notification across different model
roots.  This was resolved by changing the tool so that any event created is sent
to the default model root.

All model change listeners are now added to the default root for notifications.

Calls to the coloring function, getPackage, were added to all archetypes which
generate code that fires an event.  This function was responsible for marking
classes as component roots as well as marking containment associations.  This is
changed so that that functionality is handled in a new function and called when
necessary.  This allows for archetype which only requires the getPackage
function to run quicker.

With this change transaction managers must be contained at the system level 
instead of at the model root level.  Otherwise delta's that are collected on the
default root will be ignored.  This change is made and all places which need the
transaction manager are updated to get them from the system.

2.1.4 Change createProxy code generation to use the correct model root

As with 2.1.3 above, the introduction of multiple system level elements
introduced issues with creating proxies under the correct model root.

The archetype which generates the createProxy methods, is changed to call a new
function findModelRoot.  The new function is implemented in the ModelRoot class.

The function takes the proxy path as well as the path of the element referencing
the proxy and determines the model root for which the proxy should be created
under.

2.1.5 Search all model roots when trying to batch relate an element

Again the problem stated in 2.1.3 caused issues with relating elements during
calls to batchRelate.  The incorrect model root is used to search for the
element to relate with.

Archetype is added to search all model roots known at the time for the correct
instance.

This change requires that all hand written model root base classes must have a
method getInstances.  This method previously existed for OoaofooaBase.  The
classes OoaofgraphicsBase and ConsistencyBase are updated to include these
methods.

2.1.6 Add new system level elements to those which need their model root ids
			updated when renamed
			
Archetype existed for handling renames of domains so that the domain's model
root id was updated to reflect the name change.

Support for all new system level elements is added.

2.2 Changes to MC2020 and MC3020

2.2.1 Update schemas to include new elements

The MC2020 and MC3020 metamodel schemas are updated to include the new S_DID and
R14 ROPs.  The other elements will be added at a later time [2].

2.2.2 Update archetypes which traverse R14

All places in the MC2020 and MC3020 archetypes which traverse R14 are updated to
include the new link class.

2.3 Modify MC2020 and MC3020 plugins to account for new system level elements

The plugins currently assume the only folders that exist at the system level 
are domains.  This is no longer true. The plugins will be modified to examine 
the folders at the system level to find the domains and ignore the other 
system-level folders.

3. Add support to ooaofooa_hierarchy to handle return type and type generation
   for those elements using system level data types
   
Again similar to the problem in 2.1.3, interface operation return types can be
related to core data types which are contained within a different model-root.
The same is true for interface operation and interface signal parameters.

This is handled perfectly in the oal that traverses the new associations between
a system and it's system level data types.  The problem is when the properties
view is searching the model root of the signal or operation for all core data
types in order to populate the list of choices.

Three new attributes are added to the Tree_Parenthood_Specification class of
ooaofooa_hierarchy.  These attributes are listed below:

CrossModelRootBoundary - boolean indicating that the resultant class(es) are
												 contained in a different model-root
ModelRootType					 - Used to determine the type of component that the
											   resultant class(es) are contained in
ExcludedModelRootType  - Used to exlude a certain model root type, in this case
												 any domain model root

The archetype which generates the properties view code is changed to test for
these attributes.  If it finds them a call to a new method,
ModelRoot.getModelRoots, is made.  This new method returns all model roots
matching the passed in parameters, which are the ModelRootType attribute value
and the ExcludedModelRootType attribute value.

Once a component is set for the particular root element of that component, it's
model root is added to a map stored in ModelRoot.  The key for the model root is
the component type.

The same problem exists for user defined data types under a system level data
type package.  Only the problem is slightly different in that a user data type
under a domain will only work as the code was generated originally.  To handle
this issue a new class is added to the CompTree subsystem of ooaofooa_hierarchy.
This class is related to the T_TPS class, and is used to define an alternate
child of a given T_TNS instance.  The class has the same three attributes added
above.

As with the other attributes the archetype used to generate the properties view
code is modified to search for instances of this class related to the current
T_TPS that it is working with.  If it finds any it generates code identical to
the code generated for the T_TPS attributes above.

4. Extend canvas to allow drawing new elements

4.1 Define new canvas elements for the new diagrams

The following new diagrams and diagram elements are added as part of this work:

System Model Package
 - Component Diagrams [shape]
 - Data Type Packages [shape]
 - Interface Diagrams [shape]
System Level Data Type Packages [shape]
Interface Diagrams
 - Interface Diagrams [shape]
 - Interfaces [shape]
Component Diagrams [shape]
 - Component Diagrams [shape]
 - Components [shape]
 - Used Components [shape]
 - Provided Interfaces [connector]
 - Required Interfaces [connector]

The canvas plugin.xml file is updated to include definitions for the new
diagrams and diagram elements.

All new elements have the necessary entries added to support the
Getinstancefromooa_id method in Cl_c.java.

An override of the above method was created, which takes a SystemModel_c
instance as a parameter.  This method signature is used when a diagram element
is shown on the system package, traversing the relationship between the
representing model element and the system.  This handles cross model root
boundary lookups.

Provided interfaces and required interfaces can start and end on each other.
This is the first time that the tool has supported this.  The code in
CanvasPlugin.java which reads the xml definitions will setup the terminations
such that the provided interface must be drawn first.  This is due to the fact
that the ElementSpecification for the latter defined element will not exist
during the setup of the TerminalSpecification classes.  The code is changed to
iterate the definitions a second time, after all ElementSpecifications have been
created then setup the required TerminalSpecification classes.

4.2 Define and extend operations for drawing new element styles

All new diagram elements listed in section 4.1 that are appended with the text
[shape] have the following operations added to their metamodel elements in
ooaofooa:

get_compartment_text
get_compartments
get_entries
get_style
get_text_style

All elements represented as shapes have their symbols display the data described
in [3].

All elements above that are the diagram or package have the necessary new*
operations added which are used to create the necessary child elements.

The Used Component element is shown with a path to the component for which it
represents, this path is obtained through a chain of operations named getPath.
The path shown in the symbol is elided at the start to allow displaying the
actual component name.

The following elements have a getPath operation added:

Used Component, Component, Component Diagram.

All new diagram elements listed in section 4.1 that are appended with the text
[connector] have the following operations added to their metamodel elements in
ooaofooa:

get_connector_text
get_style

All elements represented as connectors have their symbols display the data
described in [3].

In Gr_c.java and GCDelegate.java code is added to draw arcs.  This code is
called when drawing the semi-circle style in the Connector.draw() operation.
The semi-circle style is used to represent the cup of a required interface.

In the operation, Shape.draw(), oal is added to support the following:

- Elided text at the start of a used component name
- Mini component symbol on components

Functions are added which determine the intersection point of a line or segment
with an ellipse.  These functions, which were ported from the work Jeff Mather
was doing [5] to create a new graphics infrastructure based on UML 2.0, are used
to crop the connector line of required interfaces and provided interfaces to the
edge of the semi-circle or circle.  Since these functions were introduced calls
were added to give the same behavior to connectors which end on the Use Case
symbol.

4.3 Modify CanvasModelListener to handle system level elements

Due to the design of the tool, elements are created under the model-root for
which the representing diagram is under.  This poses a problem when creating an
element on a system package as the new element is stored in the default
model-root.  Code which later expects the element to exist in the actual
model-root of that element will fail.

This is handled by creating the required model root when the newly created
element has it's persistable model component set.  The model root's id is
generated from the component's file path.  At this point the newly created
element is removed from the default root's instance list and placed in the new
model root's instance list.  A new model change message is required to notify
the canvas of these changes so that the diagram element may be placed into the
same model root.  The CanvasModelListener class is updated to handle this new
message.

When deleting an element shown on the system package the only message received
is specific to the model-root of the deleted element.  This causes the graphical
elements to remain on the system package.  To handle this problem the graphical
element which represents the deleted element is searched for in the default
root.  If it is found the graphical element is deleted as well.

4.4 Allow system package diagram to be reopend upon restart

In CanvasFactory.java, there is a call to load the component from the path of
the underlying file that the canvas represents.  This returns true if it was
loaded and false otherwise.  The problem with the system package is that the
system will already be loaded, causing the method to return false.  There was
a test for this which would cause the editor input to not be created in this
case.  Since the call is made only to guarantee that the component is loaded,
the test for it's return value is removed.

There was also a test in CanvasEditor.java which checked to see if the input
was of the type FileEditorInput and if so would check to see if the file was
represented by a component type of SystemModel_c.  This was needed when there
was no diagram from the SystemModel_c instance, since there is now a diagram
this test is removed.

4.5 Fix Line Segment dispose

The operation Line Segment.dispose() was updated to unrelate itself from any
connected connectors instead of delete them.  This was causing a required
interface to be deleted when deleting a provided interface and visa-versa.

4.6 Correctly clear partial connectors

When a connector cannot be completly drawn the tool cleans up the already
created segment.  It does not unrelate the starting and ending elements from the
connector tool.  This causes a problem when trying to draw a new connector to
whitespace as the connector tool is already related to an element, therefore it
doesn't treat it as whitespace.

The operation Connector Tool.clearPartialConnector() is updated to unrelate
these associations.

5. Unrelate compare elements after compare

Duplicate entries were showing under model explorer for system level elements.
This was due to the fact that compare was relating these elements to the system
but never unrelating them.  The code is changed to call batchUnrelate on the
element being compared after the compare completes.

6. Unit test changes

The archetype, create_action_test.arc, was updated to special case the following
elements for the rename test as there name is set using the InformalName
attribute:

Provision
Requirement

The method, createDataTypePackage_c, generated by create_dispose_test.arc was
modified to create the necessary link classes between data types and domains.
The same was done for the setup method generation in create_action_test.arc.

In TestUtil.createMockDefaultDataTypes() the necessary links classes are added
between data types and domains.

7. IO changes

All new elements added for component diagrams have entries added to the pei data
for import/export code generation.

7.1 Export changes

The export code is changed to output the Dom_ID value from the new link class
into the the data type tables when exporting to a 6.1 sql file.

The archetype function, gen_proxy_export, was generating code with incorrect
case for association traversals.  The generation statement was changed to make
all parts of the key letters upper case which is what MC-Java does.

Due to the fact that proxies are to be contained in the referring class certain
pei entries for the export data were duplicated under the parent as well as the
actual child.  The entry under the child is the one that would be persisted,
allowing for the entry and proxy to be written in the child's file.  This
presents a problem when code that is generated for finding an element's
component is based off of these entries.  The duplicate entry under the actual
parent returns the parent component as it's component when in fact the second
entry should be the component.

A new attribute is added to the Export Ordering class of the file_io model.  The
attribute is ignoreParent.  All entries which use this duplication have the
ignoreParent attribute set to true for the first pei entry.

A method, isDomainIdUnique, in CoreImport.java get's all of a system's children.
Checking the id of each to see if the id is unique among the domain children.  A
check is added to see if the child is actually a domain as a system may now have
multiple types of children.

There was some special casing for SystemModel_c instances in the creation of the
external link evaluator.  The special casing was added because it was thought
that the traversals to a system's children would not work.  This was not true so
the special casing was removed.  The same type of special casing was used
throughout the tool and was therefore removed in all places.

In create_persistence_meta_data.arc, it was assumed that if a class had existed
between two elements that were persistable component elements, the association
had to have a cardinality of many.  This is not true and therefore the archetype
is changed to check the cardinality of each class between the two persistable
components.  This allowed for the correct traversal code to be generated in all
cases.

7.2 Import changes

Now that system level data types must exist, older models must be updated.  Also
due to the addition of the link class between data types and domains older
domains must be updated.

To do this two new methods were added to ImportHelper.java.  These methods check
to see if the necessary elements exist, creating them if not.  These changes
must also be persisted, therefore a call to persist the new element's components
is made within a workspace job.  Making these calls within a workspace job
prevents file modification collisions.

8. Set default editor for new diagram elements

In ui.text/arc/create_util.inc, there is some archetype which is used to set an
element's default editor to the Canvas Editor if one exists.  This allows for
the Canvas Editor to be used when an element which has both a Canvas Editor and
Description Editor is double-clicked.

9. Extend ui trees

9.1  Extend model explorer tree

In UITree.pei.sql of ui.explorer, entries are added for all of the new elements.

They are added such that the tree resembles the following:

System
  Data Type Package
  Interface Diagram
    Interface Diagram
    Interface
      Interface Operation
				Parameter
			Interface Signal
			  Parameter
  Component Diagram
    Component Diagram
    Component
      Provided Interface
        Interface Operation
	  			Parameter
		  	Interface Signal
			    Parameter        
			Required Interface
        Interface Operation
	  			Parameter
		  	Interface Signal
			    Parameter        
    Used Component
      Provided Interface
        Interface Operation
	  			Parameter
		  	Interface Signal
			    Parameter        
			Required Interface
        Interface Operation
	  			Parameter
		  	Interface Signal
			    Parameter          

9.2 Extend properties and compare trees

The ooaofooa_hierarchy.pei.sql file is updated to include all new elements.  The
tree is extended to resemble the tree structure defined above.

Design Comments
---------------

Work Required
-------------

All work required is described in the design section.

Unit Test
---------
_- Draw one of each of the new elements
_R All elements are displayed correctly

_- Delete an element on the system package
_R The element's graphics are removed

- Formalization tests

_- Create an interface
_- Create a component with a provided interface
_- Right click on the provided interface
_R The Formalize... menu entry is available
_- Click the Formalize... menu entry
_R The Formalize wizard is displayed
_R A list of interface diagrams is shown
_- Choose the interface diagram that the interface above was created in
_- Click Next
_R A list of interfaces is shown
_- Choose the interface created above
_- Click Finish
_R The name of the Interface is shown on the component diagram
_- Right click on the provided interface
_R The Unformalize menu entry is shown

_- Create an interface
_- Draw a provided interface and a required interface so they connect
	 (connected to a component)
_- Right click on the provided interface
_R The Formalize... menu entry is available
_- Right click on the required interface
_R The Formalize... menu entry is available
_- Select the Formalize... entry
_R The Formalize wizard is shown
_- Choose the interface created above
_- Click Finish
_R Both the provided and required interfaces are formalized
_R The interface name is shown attached to the provided interface
_- Right click on the required interface
_R The Unformalize menu entry is shown
_- Select the Unformalize menu entry
_R The original name of the provided interface is shown
_R Both the provided interface and required interfaces are unformalized

_- Create an interface
_- Create two components
_- Create a provided interface on one of the components
_- Create a required interface on the other component
_- Formalize both interfaces
_- Create two used components in a separate component diagram
_- Assign the used components to each of the components created above
_- Draw a provided interface and a required interface between the two used
   components
_- Right click on the provided interface
_R The Formalize... menu item is shown
_- Select the menu entry
_R The Formalize wizard is shown
_R A list is shown which contains the interface that the assigned to component's
   interface is formalized against
_- Click Finish
_R The provided interface and required interface are formalized

_- Create two interfaces
_- Create two components
_- Create a provided interface on one of the components
_- Create a required interface on the other component
_- Formalize the provided interface with one of the interfaces
_- Formalize the required interface with the other interface
_- Create two used components in a separate component diagram
_- Assign the used components to each of the components created above
_- Draw a provided interface and a required interface between the two used
   components (making the provided interface come from used component which is
   assigned to the component which has a provided interface)
_- Right click on the provided interface
_R The Formalize... menu item is not shown
_- Delete the required interface
_R The provided interface is not deleted
_- Right click on the provided interface
_R The Formalize... menu item is shown
_- Formalize the provided interface 
_- Redraw the required interface, connecting it to the provided interface
_R The required interface was not drawn
_- Draw the required interface to whitespace
_R The required interface was drawn
_- Right click on the required interface
_R The Formalize... menu item is shown
_- Select the menu entry
_R The Formalize wizard is shown
_R A list is shown with the interface that the assigned to component's required
   interface is formalized against
_- Cancel the wizard

_- Create three interfaces (A, B, C)
_- Create three components (A, B, C)
_- Create a provided interface on component A
_- Formalize the provided interface with interface A
_- Create a required interface on components B and C
_- Formalize the requirement from component B with interface C
_- Formalize the requirement from component C with interface A
_- Create three used components in a separate component diagram
_- Assign the used components to each of the components created above
_- Draw a provided interface from the used component which represents component
   A
_- Right click on the provided interface
_R The Formalize... menu item is shown
_- Select the menu entry
_R The Formalize wizard is shown
_R A list is shown with the interface that the assigned to component's required
   interface is formalized against
_- Click Finish
_R The provided interface is formalized
_- Draw a required interface from the used component representing component C
   to the provided interface connected to the used component representing
   component A
_R The required interface is drawn correctly
_- Right click on the required interface
_R The Unformalize menu entry is available
_- Draw a required interface to the provided interface to
   the used component representing component B
_R The required interface is not drawn
_- Right click on the provided interface and select Unformalize
_R The provided and required interfaces are unformalized
_- Draw a required interface to the provided interface to
   the used component representing component B
_R The required interface is drawn
_- Right click on the required interface
_R The Formalize menu entry is not available
_- Right click on the provided interface
_R The Formalize menu entry is not available
_- Delete the required interface coming from the used component which represents
   component B
_- Create a new component (D)
_- Draw a required interface from component D to the provided interface
_R The required interface is drawn correctly
_- Right click on the new requirement
_R The Formalize... menu entry is available
_- Select the menu entry
_R The Formalize wizard is shown
_- Select the interface package, and click Next
_R The possible interface is shown in the list, interface A
_- Click Cancel
_- Draw a required interface from the used component representing component B to
   the provided interface
_- Right click the required interface from component D
_R The Formalize... menu entry is not available
_- Draw a provided interface from the new component (D)
_- Formalize the provided interface with interface B
_- Draw a requirement from the used component representing component C to
   the new provided interface
_R The required interface is not drawn
_- Unformalize the provided interface
_- Redraw the required interface
_R The required interface is drawn

_- Rename a provided interface that is connected to a required interface such
   that the names are unique
_R Both names are displayed
_- Rename them such that they are the same
_R Only the provided interface's name is displayed

_- Create an interface operation w/a parameter
_- Select the operation in model explorer
_- Expand the list in properties for the return type
_R All system level defined data types are listed
_- Select the parameter
_- Expand the list in properties for the return type
_R All system level defined data types are listed

_- Create a UDT at the system level
_- Select the UDT
_- Expand the list in properties for the core type
_R All system level dts are listed

_- Select a UDT under a domain
_- Expand the list in properties for the core type
_R All dts defined in the domain are listed
_R No system level dts are listed

_- Compare a system level child with local history
_- Close the compare
_R There are no duplicate entries in model explorer

_- Run all existing tests
_R All tests pass

- Manual tests

_- Run the getting started
_R The system level data type package is created and persisted
_R The system graphics data is persisted
_- Open the MicrowaveOven domain data types file
_R There are S_DID entries
_- Build the microwave oven
_R The model builds

_- Create one instance of every new element
_- Open a each new diagram
_- Restart the tool
_R All new elements are reloaded correctly
_R All diagrams are displayed correctly

_- Check out the Models project from CVS
_R The system level dt package is created
_R All domains are marked dirty due to S_DID creations
_- Open the system level data type package
_- Open the system package
_- Replace with the latest from the repository
_R The system package is displayed correctly
_R The data type package is closed
_- Move the data type package symbol on the system package
_R The package moves correctly

End
---

$Log: i2576.dnt,v $
Revision 1.1  2009/09/03 18:21:19  rmulvey
job:dts0100616734
Archive documentation and other development notes following the R3_0_0 release.  These are being archived under Documentation/internal/technical/archive/20090903

Revision 1.9  2009/01/01 23:13:13  rmulvey
Job:4060
Batch promotion of copyright changes from Review-i4060 and Review-i4060-01.

Revision 1.8.16.1  2008/12/31 16:10:18  rmulvey
Job:4060
This is a batch commit of 2009 copyright changes to branch Review-i4060.  This includes the
report that outlines all changes made (before/after for each line changed).  This report is found here: <cvs>/Documentation/internal/test_results/R2_1_2/i4060/update-copyright-results.txt.

Revision 1.8  2006/12/08 08:18:52  rmulvey
Job:2576
Added a little more detail to the unit test instructions.

Revision 1.7  2006/12/08 08:15:25  tlondon
Job: 1687

Specify tests correctly

Revision 1.6  2006/12/07 16:02:43  tlondon
Job: 2576

Fix according to review minutes.

Revision 1.5  2006/11/30 22:46:02  tlondon
Job: 2576

Remove incorrrect test result.

Revision 1.4  2006/11/30 22:28:58  tlondon
Job: 2576

Complete design sections.
Add unit tests.

Revision 1.3  2006/11/30 02:37:13  rmulvey
Job:1687
Changed file property from -kk to -kkv

Revision 1.2  2006/11/30 02:30:13  rmulvey
Job:1687
Updated information about MC changes.

Revision 1.1  2006/11/29 22:35:37  tlondon
Job: 2576

Partially completed design note and implementation note.

