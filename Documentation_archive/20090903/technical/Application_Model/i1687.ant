========================================================================

File:      $RCSfile: i1687.ant,v $
Version:   $Revision: 1.1 $
Modified:  $Date: 2009/09/03 18:21:19 $

(c) Copyright 2006-2009 by Mentor Graphics Corp. All rights reserved.

========================================================================
This document contains information proprietary and confidential to
Mentor Graphics Corp., and is not for external distribution.
========================================================================

Tiger Project Analysis Note
Support Component Diagrams

Abstract
--------
This note describes the analysis of the work required to allow BridgePoint to
support component diagrams.

History
-------

Document References
-------------------
[1] Issue 1687
[2] The Unified Modeling Language Reference Manual, Second Edition
		ISBN 0-321-24562-8
		
Background
----------
The tool requires the ability to support drawing component diagrams, wiring
components using interfaces, and generating code from these diagrams.  The tool
must also support the use of these interfaces in action language, but this work
shall be done under a separate task.

Analysis
--------
The tool shall support creating new component diagrams.  A component diagram
shall consist of component and interface reference symbols.

A new System Package diagram shall be opened by double clicking the System Model
node in the tree.  On this diagram, the following package symbols will show:

Interfaces - The top level interface diagram, under which shall be defined all
             interfaces in a system.
Datatypes  - The top level datatype diagram, under which shall be defined all 
             datatypes for a system.
Components - The top level component diagram, under which shall be defined all
             components and the wiring between them.

All of the above may be separately configuration controlled and may contain
nested, configuration controlled diagrams.

Interface Diagrams
These shall contain symbolic declarations of interfaces. Each interface shall be
represented by a Class-like symbol.

Interfaces shall organize a set of signals.  Two types of signals shall be
supported; synchronous and asynchronous.  Signals shall be added on the
interface diagrams with the standard New > Signal approach.  Interfaces shall be
shown as a box with two compartments, the top containing the interface
stereotype and the interface name.  The bottom containing a list of synchronous
and asynchronous signals.

Datatype Diagrams
These diagrams are unchanged in appearance from their current presentation in
BridgePoint, except that they can now appear at the system level.  Scoping shall
be as expected; data types declared at the system level are visible to all
domains, data types declared at the domain level are private to the domain.
 
Component Diagrams
These diagrams show component symbols and the connections between them.
Components shall appear as a simple rectangle bearing the name of the component
and a UML standard icon identifying the symbol as a component.

The tool shall provide the ability to add new components to a diagram.  A newly
added component shall be informal by default (i.e. there is no underlying domain
representing that component's structure).  There shall be a 'Formalize...' menu
option to formalize a component.  Choosing this shall result in a wizard that
allows the user to choose a pre-existing domain model under the current project
as the target for formalization.  Only domains not already formalized to 
components shall be available for selection in this wizard.  The chosen domain
model shall then replace the informal component under the parent component
diagram subtree (the domain file hierarchy and tree entries shall be moved as
required).  The domain now defines the structure of that component.

A formalized component can be reformalized to a different domain model or
unformalized. Both functions shall operate in a manner exactly analogous to that
adopted for sequence diagram messages.  Note that, until formalized to a
component, a domain model has no graphical representation (just as it has none
today).  Once formalized, opening a component symbol shall open the domain
package diagram for the model it has been formalized to. Prior to formalization,
opening the component symbol shall open its description.  When a component is
formalized, its description becomes inaccessible and the contents of the
component description shall be appended to the domain description.  Once
formalized, components may be unformalized using the standard 'Unformalize' or
'Formalize..' (reformalize) context menu entries.

Interface references shall be shown as connectors attached to a component. There
shall be two types of interface reference connector:

Provided -    Represented by a line drawn from a component symbol and ending
              with a closed circle.
Required -    Represented by a line coming from a component symbol and ending
              with a semi-circle.

Interface reference connectors shall have a formalize menu option associated
with them.  A formalize wizard shall be shown when this menu option is selected,
allowing the user to choose a declared interface (i.e. one previously drawn on
an interface package diagram somewhere in the system).  Interface declarations
shall have global scope, but the formalize wizard shall assist the user by
presenting the interfaces in a tree form (because as specified above, interface
packages, in common with component and dataype diagrams, may be nested. A tree
based browser is therefore needed).

Interface references (i.e. Provided and Required) shall bear the name of the
interface they represent on the end text of the connector (the free floating
end).

Connections shall be formed by the joining of one provision to many
requirements.  When connected, the label on Required interfaces shall be
suppressed if it is the same as that on the partner Provided interface reference
connector.  Required and Provided interface reference connectors formalized to
different interfaces cannot be joined.  Unformalized interface reference
connectors may be connected freely regardless of whether the interfaces bear the
same name or not. Based on the suppression rule above, informal interface
references whose names do not match continue to show both names.  Formalization
of an already joined pair of connectors shall formalize both connectors to the
same interface.  As in other diagrams, informal names shall be retained and an
unformalize menu option shall be provided that restores the original informal
state of an interface reference.  As for formalization, unformalizing a joined
pair of interface references affects both the provided and required sides.

Declaration of signals and signal parameters on informal interface references is
not supported.

Once formalization of an interface reference is complete, the interface shall
automatically be shown under the component's tree.  The tree format shall
resemble the following:

Component
  Domain
    Interfaces
      Provided
        formalized interface
          signal
      Required
        formalized interface
          signal

Double clicking the formalized interface's signals under the Component tree
shall open an activity editor, allowing the implementation of that signal to be
completed.

An unformalized interface reference shall have no meaning other than for
documentation purposes.  Unformalized interface labels shall be editable.
Formalized interface labels shall be readonly.

Components may be freely imported from other diagrams. The import wizard must be
tree based for the same reasons as those given for the interface formalization
wizard above.

Imported components are readonly.  Components may only be edited on the diagram
on which they were originally declared.  This gives rise to the specification of
a modeling idiom (i.e. this shall not be enforced by the tool):

- A well structured system shall show two component diagram trees at its root;
  one for component declarations and one for component wiring.
- Diagrams in the declarations tree will each have a single component on them.
  They will not have connections between provided and required interface
  references.
- Diagrams in the wiring tree shall exclusively use components imported from
  the declaration tree. Only in the diagrams found under the wiring tree shall
  component wiring be done by making connections between required and provided
  interfaces.
  
The exact tree structure is not critical. Only the separation of declaration
from wiring is important, so the organization of the trees by product or
category etc. may be selected by the customer. Indeed, declarations need not
necessarily be located in the root of the component tree, but can themselves
be organized by some customer selected criterion in the root. So long as the
declarations can be easily found in a search the objective of the idiom is met.

Work Required
-------------

1. Extend metamodel

The metamodel must be extended to add support for creating component diagrams.
A component diagram shall consist of components, which at this time will
represent domains.  The diagram shall also consist of two types of interfaces,
provided and required.  The provided interface shall show as a line with a
closed circle at the end.  The required interface shall show as a line with a
half circle at the end.  Component diagrams shall only exist at the system
level.

The metamodel must be extended to add support for creating interface diagrams.
Interface diagrams shall show at the system level and may be nested.  The
diagram shall show one thing, interfaces.  Interfaces shall have signals which
may be asynchronous or synchronous.  The Interface symbol shall have two
compartments one containing a stereotype of interface and the name of the
interface.  The other showing the signals of the interface.

1.1 Add required oal

The oal required to formalize components to a given domain must be added.  The
domain shall be moved underneath the component at this point.

The oal required to formalize an interface to one defined in an interface
diagram shall be added.

The oal required to draw the symbols shall be added to each element which is
graphically represented.

2. Extend trees

Extend the following trees:

file_io
UITree
ooaofooa_hierarchy

3. Extend graphics model

Add support to allow drawing connectors with circles and semi-circles at their
end.  Add support to draw the connector's line only to the edge of the circles
and semi-circles.

Add support to show component mini-symbol on component symbols.

4. Extend schemas to support new elements

Extend all model compiler schemas to allow for the new elements.

Note that to support system scope data types, we are going to modify R14 to be a
linked association with many to many cardinality. This knowledge will need to be
rolled out to the model compiler team and to the release notes.

Acceptance Test
---------------
Test that components may be formalized with a domain, at which point the domain
is moved under the component in the tree.

Test that interfaces on a component diagram may be formalized against ones
defined in any interface diagram.

Test that datatypes created in a system level diagram are propagated to all
domains in the system.  Also test that those created in a domain are only in
that domain.

Test that segments are drawn only to the edge of the interface connector's
circles and semi-circles.

Show that all symbols show correctly.

End
---

$Log: i1687.ant,v $
Revision 1.1  2009/09/03 18:21:19  rmulvey
job:dts0100616734
Archive documentation and other development notes following the R3_0_0 release.  These are being archived under Documentation/internal/technical/archive/20090903

Revision 1.7  2009/01/01 23:13:13  rmulvey
Job:4060
Batch promotion of copyright changes from Review-i4060 and Review-i4060-01.

Revision 1.6.16.1  2008/12/31 16:10:17  rmulvey
Job:4060
This is a batch commit of 2009 copyright changes to branch Review-i4060.  This includes the
report that outlines all changes made (before/after for each line changed).  This report is found here: <cvs>/Documentation/internal/test_results/R2_1_2/i4060/update-copyright-results.txt.

Revision 1.6  2006/11/27 23:04:36  tlondon
Job: 1687

Make changes according to review minutes.

Revision 1.5  2006/10/30 16:17:53  tlondon
Job: 1687

Add work required and acceptance test section

Revision 1.4  2006/10/26 00:17:38  campbell
Job: 1687
Minor enhancements.

Revision 1.3  2006/10/25 23:10:21  campbell
Job: 1687
2nd rework of Analysis section.

Revision 1.2  2006/10/25 21:37:32  campbell
Job: 1687
Reworked Analysis section.

Revision 1.1  2006/10/25 17:41:48  tlondon
Job: 1687

Initial

