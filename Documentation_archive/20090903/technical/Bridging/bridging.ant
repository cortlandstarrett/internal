========================================================================

File:      $RCSfile: bridging.ant,v $
Version:   $Revision: 1.1 $
Modified:  $Date: 2009/09/03 18:31:37 $

(c) Copyright 2003-2009 Mentor Graphics Corporation All rights reserved.

========================================================================
This document contains information proprietary and confidential to
Project Technology, Inc. and is not for external distribution.
========================================================================

Tiger Project Analysis Note - Improving Tiger Bridging Technology

Abstract
--------
This document captures a conversation between Campbell McCausland and
Steve Mellor on the subject of Bridging.

History
-------

Document References
-------------------

Analysis
--------
Existing bridging techniques have some problems as implemented in the
current Tiger and previous Model Debugger projects. Some examples are:

- A significant amount of the bridging data could have been captured
  as action language.
- The bridging data cannot be automatically checked and can become
  quite complex. Hence maintaining the bridges is error prone.

What would be useful would be the ability to add operations and other
model artifacts directly to the client model purely to support wormhole
logic. Unfortunately, this violates the principle of subject matter
separation. The proposed capability should therefore be provided only
in combination with a powerful filtering mechanism so that analysts
assigned to work on a single domain cannot see the wormhole action and
can therefore work uninfluenced by the bridge wiring artifacts. This
allows the bridging logic to be syntax checked by the tool exactly as
for regular action language. The bridging artifacts must be separately
version controlled from the rest of the model and support must be
provided for translation of the bridging data both separately and in
combination with the client model (the former capability supports the
translation of adapter patterns whilst the second supports a simpler
generation strategy that yields less readable generated code).

One potential pitfall of the proposal is the case where the same
bridging artifacts are required in multiple places in the client model.
Where this is the case, an alternate bridging paradigm must be
developed. A recommended approach for this is to create the artifacts
once and specify a rule (or less ideally, provide a means such as
coloring/annotation whereby the places are marked where the template
artifacts must be deployed).
  
The role base filtering mechanis proposed above for hiding bridge wiring
artifacts is also useful for a number of other purposes:

- Providing a means to show multiple uses of the same data schema. Think
  of the analogy of a building or an aircraft designed on a CAD system.
  The user not only wishes to see the structure but also the plumbing,
  mains wiring, networking, hydraulics, entertainment systems, etc. but
  not all at once. Each category of design artifact must be able to be
  filtered out. Note that in many (but not all) cases, viewing takes
  place against the background og the structure, since wires and pipes
  are constrained to pass through the walls of the structure. The
  schema (or class diagram) has the analogy of the structure and the
  different artifacts are analogs of the different model elements added
  for different uses of the same schema. An example from Tiger is that
  the same schema (the OOA of OOA) may be used for model maintenance,
  model verification, code generation and document generation. This
  capability would also prove useful in a banking environment where many
  different transactions are carried out on a common database. The
  proposed filtering mechanism would allow these different uses to be
  developed and separately version controlled on the same schema. 

- Providing a means to filter a model based on whether its artifacts
  participate in a given Use Case.
  
These two uses may actually only be one, maybe code and document
generation are just two high level use cases of the UML Development
toolsuite that Tiger is designed to deliver.

In the short term, when using the old tool, we mark model artifacts that
are there for wiring purposes only with a unique tag that identifies the
bridge (or bridges) for which the wiring is in place. The tag is then
read by the code generator using the parse for keyword mechanism. When
the models created by the old tool are eventually ported to the new tool,
the markup will be read and used to set up the filter mechanism.

End
---