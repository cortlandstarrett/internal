========================================================================

File:      $RCSfile: i853.ant,v $
Version:   $Revision: 1.1 $
Modified:  $Date: 2009/09/03 18:30:35 $

(c) Copyright 2005-2009 by Mentor Graphics Corp. All rights reserved.

========================================================================
This document contains information proprietary and confidential to
Mentor Graphics Corp., and is not for external distribution.
========================================================================

Tiger Project Analysis Note
Migrating to UML 2.0

Abstract
--------
This note documents and evaluates the alternative strategies available for
migrating Tiger to the UML 2.0 metamodel.

History
-------

Document References
-------------------
[1] The UML 2.0 Specification: http://www.omg.org/cgi-bin/doc?ptc/2004-10-02
[2] com.mentor.nucleus.core/models/ooaofooa.xtuml
[3] Eclipse Modeling Framework:
                          http://download.eclipse.org/tools/emf/scripts/home.php
[4] Eclipse UML2: http://www.eclipse.org/uml2/

Background
----------
We need to move to the full standard UML 2.0 metamodel as soon as possible, but
we must do it without leaving the model compilers behind. We also need to find a
way to do it without requiring a 'Big Bang' development delta. 

Analysis
--------
The model compilers are heavily coupled to the existing metamodel[2]. Tiger
itself is also (less) heavily coupled to the current metamodel.

The current metamodel and the UML 2.0 metamodel could not be more different and
yet still describe the same problem space. Gradual migration is therefore out of
the question.

We also have an emerging requirement to integrate with EMF[3] tools and we must
also compete with the free deliverables of the UML2 Eclipse project[4].

There will come a time when continuing to chase the UML standard from within our
existing metamodel just won't make any economic sense.

Three strategies suggest themselves:

- Mandate that all new additions to the metamodel be modeled in as close a
  manner as possible to the UML 2 model while still integrating with the other
  already existing parts of the current metamodel.
  
- Build an EMF compatible architecture to implement the UML 2.0 metamodel and
  run the two meta-models in parallel until such time as the current model
  compiler products are retired.

- Begin interfacing with UML 2.0 EMF immediately.

The second strategy seems the more risky but is simultaneously a more attractive
alternative, since all new informal modeling support can be realized directly on
the final metamodel. This eliminates a lot of porting work later. The downside
is that we will have to implement a lot of bi-directional mapping code to keep
the two model populations synchronized.

Other advantages for the second solution are:

- Customers can migrate from their existing investment in proprietary model
  compilers at their own pace.
- We get full EMF integration including XMI io support from the outset.
- The same synchronization code would support existing customers model migration
  requirements.

The third option obviates the need to devise complex bi-directional mapping
support in the short term. The disadvantage is that the two tools would not
interoperate, at least in the short term.

EMF has a great deal of attractive modeling infrastructure. The following
features are of particular interest:

- Do/Undo
- Copy/Paste
- Drag/Drop
- Multiple file persistence, including lazy loading.
- Default XMI output
- Multiple, extensible serialization formats

UML 2.0 1.1 does not yet leverage the multiple file persistence. This is because
the EMF team have coupled the notion of modeled containment (by aggregation) and
the persistence infrastructure such that aggregate model groups must be
physically stored together. The required fix to the underlying EMF technology is
scheduled for mid 2006. We can therefore expect multi file UML 2.0 persistence
sometime after this date, unless we decide to participate to accelerate this
work.

Work Required
-------------

Acceptance Test
---------------

End
---

$Log: i853.ant,v $
Revision 1.1  2009/09/03 18:30:35  rmulvey
job:dts0100616734
Archive documentation and other development notes following the R3_0_0 release.  These are being archived under Documentation/internal/technical/archive/20090903

Revision 1.5  2009/01/01 23:13:43  rmulvey
Job:4060
Batch promotion of copyright changes from Review-i4060 and Review-i4060-01.

Revision 1.4.30.1  2008/12/31 16:10:58  rmulvey
Job:4060
This is a batch commit of 2009 copyright changes to branch Review-i4060.  This includes the
report that outlines all changes made (before/after for each line changed).  This report is found here: <cvs>/Documentation/internal/test_results/R2_1_2/i4060/update-copyright-results.txt.

Revision 1.4  2005/07/28 19:55:43  campbell
Job: 853
Incremental check in.

Revision 1.3  2005/04/14 21:00:35  campbell
Job: 853
Added model migration advantage.

Revision 1.2  2005/04/14 19:48:46  campbell
Job: 853
Addressed comment from WGT.

Revision 1.1  2005/04/14 19:38:05  campbell
Job: 853
Introduced.

