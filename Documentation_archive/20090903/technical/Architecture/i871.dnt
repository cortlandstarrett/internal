========================================================================

File:      $RCSfile: i871.dnt,v $
Version:   $Revision: 1.1 $
Modified:  $Date: 2009/09/03 18:20:34 $

(c) Copyright 2005-2009 by Mentor Graphics Corp. All rights reserved.

========================================================================
This document contains information proprietary and confidential to
Mentor Graphics Corp., and is not for external distribution.
========================================================================

Tiger Project Design Note

Common classes/mechanisms for MC-Java

Abstract
--------
This document deals with the design details of gathering common classes  
(generated by MC-Java) under one package and implementing event generation for 
ooaofgraphics.

History
-------
final R1_1_0_M1/i871-050505-01.rvm

Document References
-------------------
[1] Bugzilla issue # 871
[2] Bugzilla issue # 473

Background
----------
There are certain classes generated by MC-Java that are 
- being generated for both ooaofooa and ooaofgraphics.
- purely static and not being generated from any model (i.e. they are pure java 
  code written in MC-Java)
We are required to put these classes under one package that is common and 
accessible to all other packages for use.
In addition, the event generation(firing model change events to listeners) 
framework needs improvement and is required to be placed in the common package, 
usable by both ooaofooa and ooaofgraphics.

Analysis
--------

i871.1      Common Classes

Put the following classes into a separate package and remove the archetype code 
from MC-Java, that generates these classes.

Classes from com.mentor.nucleus.bp.core:

-  ActiveObject_c
-  Activepoller_c
-  ClassQueryInterface_c
-  genericEvent_c
-  ILogger
-  IModelChangeListener
-  IModelChangeProvider
-  InstanceList
-  masterTimer_c 
-  ModelChangedEvent
-  ModelDelta
-  ModelElement 
-  NonRootModelElement 
-  NullLogger
-  SystemLogger
-  Tim_c
-  timerClient_c
-  TraceLogger

Classes from com.mentor.nucleus.bp.ui.canvas that are static and common in both
domains (i.e. Ooaofgraphics and Ooaofooa):

-  NonRootModelElement 
-  ActiveObject_c
-  Activepoller_c
-  masterTimer_c
-  Tim_c
-  genericEvent_c

i871.2      Model Change Event architecture

The existing model change event architecture is general and in case of certain 
types of events, many fields of ModelDelta are not used. Refactoring of Model 
Change Event architecture is done, so that event types are further refined with 
increased level of classification allowing better filtering of events. 
Moreover architecture is brought closer to Eclipse resource notification 
mechanism as they have many analogies. Fields usage is also optimized where 
possible.

The design given below considers these observations and suggests certain 
modifications to the model change event architecture.

Design
------

i871.1      Common Classes

Move the classes that are not being generated using a model in MC-Java listed in 
the corresponding analysis section to a separate package 
'com.mentor.nucleus.bp.core.common' and remove the archetype code (which 
generates these classes) from MC-Java.
Additionally the classes of this package (e.g. ModelChangedEvent,
NonRootModelElement) should use the abstraction of model root (instead of type 
Ooaofooa or Ooaofgraphics) whenever referring to the root of the loaded model, 
so that the classes are usable by both canvas (incase of ooaofgraphics) and core
(incase of ooaofooa).

i871.2    Model Change Event architecture

i871.2.1  Differentiate between event types and delta kinds

Considering the current design (i.e. prior to the implementation of this issue), 
there are certain model change events that:
.  Are simply event notifications and do not imply a change in the model itself.
.  Do not have any model delta which implies that they do not represent undoable 
   actions
Examples of such events are DELETE_ALL, RELOAD_ALL, MODEL_LOADED etc.

On the other hand certain model change events represent a specific change in the 
Model itself, it can be addition of a model element, change of an attribute of a 
model element or its deletion, they all fall under one category of change. All 
such events require a model delta.

Considering the resemblance between the IResource and the ModelElement, the 
ModelChange architecture is modified to look more like the Eclipse's resource
API keeping in mind the specific event filtering requirements of Tiger.

i871.2.1.1  Define enumerations in the Ooaofooa model

A new enumeration data type 'ModelEventNotification' is defined in the Ooaofooa. 
The enumerators that it defines are named such that they depict a notification
in a ModelElement. Previously used constants that had 'ALL' postfix are removed,
keeping in mind the need of similar events in case of multi level controlled 
items. These constants are renamed as follows:

. MASK_NO_EVENTS = 0
. MASK_ALL_EVENTS = 63
  These masks shall be used by the Enablemodelchangelistenersfor() method to 
  provide the required filtering of the event types given below.
 
. UNKNOWN  = 1
. MODEL_ELEMENT_UNLOADED = 2
  (Previous name: DELETE_ALL)

. MODEL_ELEMENT_LOADED = 4;
  (Previous name: MODEL_LOADED)  
  
. MODEL_ELEMENT_PRE_RELOAD = 8;
  (Previous name: PRE_RELOAD_ALL)  
  
. MODEL_ELEMENT_RELOAD = 16;
  (Previous name: RELOAD_ALL)
  
. MODEL_ELEMENT_CHANGED = 32;
  This event defines the type of events that contains a model delta within 
  itself, where delta can be of any of the kinds defined by ModelDelta 
  enumeration data type.
  
i871.2.1.2  Update ModelDelta enumeration data type

The ModelDelta EDT is modified to remove the model event notifications discussed
in the previous section. It defines the following enumerators, the usage of each 
enumerator is discussed later in section i871.2.3.1 

. MASK_NO_DELTAS
. MASK_ALL_DELTAS
. NEW
. DELETE
. ATTRIBUTE_CHANGE
. ELEMENT_RELATED
. ELEMENT_UNRELATED

i871.2.1.3  Update model events filtering mechanism

The following function is modified by adding a new parameter of type 
ModelEventNotification:

- Enablemodelchangelistenersfor(ModelEventNotification eventMask, 
                                                           ModelDelta deltaMask)

  The function shall allow filtering of deltas as well, if the event type is 
  MODEL_ELEMENT_CHANGED. The deltaMask is ignored other wise.

i871.2.2  Update the ModelChangedEvent class

The ModelChangedEvent class is updated to have the following methods:

Two constructors are defined:
public ModelChangedEvent(ModelElement source,  IModelDelta delta) 
public ModelChangedEvent(ModelElement source,  int type, ModelElement element)

- public int getType()
  Returns the type of the ModelChangedEvent, which is one of the constants 
  defined by ModelEventNotification enumeration.

- public ModelElement getModelElement()
  Returns the affected model element or null if not applicable to this type of 
  event. All events other then MODEL_ELEMENT_CHANGED, support this method.

- public IModelDelta getModelDelta()
  Returns the model delta of the change incurred or null if not applicable to 
  this type of event. Events of type MODEL_ELEMENT_CHANGED, support this method.

i871.2.3  Create ModelDelta hierarchy

A new interface IModelDelta is defined. A ModelDelta only exists for a model 
change event of type MODEL_ELEMENT_CHANGED. The interface defines the following 
methods:

- public int getKind();
  Returns the kind of the ModelDelta, which is one of the constants defined by 
  the ModelDelta enumeration.

- public ModelElement getModelElement();     
  Returns the affected model element. Must not be ‘null’
  
- public IModelDelta[] getAffectedChildren()
  Returns model deltas for all affected model elements, which were created, 
  removed, or changed. Returns an empty array if there are no affected model
  elements. 
  
i871.2.3.1  BaseModelDelta

This class implements the IModelDelta interface and provides the 
Following constructor:

  public BaseModelDelta(int deltaKind, ModelElement modelElement)

This class is only used in the case of NEW and DELETE delta kinds. For the other 
kinds specialized classes are used:       

- AttributeChangedModelDelta
  This class extends BaseModelDelta and is used for ATTRIBUTE_CHANGE delta kind. 
  It also has the name of the attribute being changed and the before and after 
  values of the changed attribute.

- RelationshipChangedModelDelta
  This class is used to depict changes done in relate() and unrelate() methods 
  that send the ELEMENT_RELATED and ELEMENT_UNRELATED events respectively. 
  It contains the source object which is being related/unrelate and the 
  destination object from which the source object was related/unrelate. 
  It should also keep the Association over which relate/unrelate was 
  performed between the two model elements.

Advantages of this scheme:
- Facilitates filtering of various events based on this classification in 
  different model change listeners.
- Only the precise information that is needed for an event is available, thus 
  allowing reverse of atomic operations and avoiding copying overhead. 
- The 'before' and 'after' objects that were previously part of the delta are 
  also removed after this specialization, as finding out the exact property 
  change in an object is no longer necessary.

i871.2.4  Update ModelChangeListeners to conform to the new architecture

The following listeners require changes:

- bp.core\PropertyViewListener
- bp.core\ResourceUpdaterModelChangeListener
- bp.core\OoaofooaBase.ModelChangeListener
- bp.core\OoaofooaBase.SystemModelChangeListener

- ui.text\AbstractModelElementListener
- ui.text\DocumentProvider.ModelSynchronizer
- ui.text.placeholder\PlaceHolderManager.PlaceHolderStateSynchronizer

- ui.canvas\CanvasEditorListener
- ui.canvas\CanvasModelListener

Also anonymous Listeners in the following classes shall be checked for 
consistency:

- ui.text\TextPlugin
- ui.explorer\ExplorerView
- ui.canvas\ModelContentOutlinePage

i871.2.5  Change IElementRenameListener

The prototype of the following method 
public void elementRenamed(Object editorInput, NonRootModelElement 
                                                               oldModelElement)
is changed to public void elementRenamed(Object editorInput), since the 
oldModelElement is not required.

i871.2.6

None of the methods of the class ModelElement are used anywhere , so it is 
suggested to remove these methods. A separate issue shall be raised for 
refactoring of this class as removing the methods will make the class empty.

Moreover IDeltaListener, NullDeltaListener and DeltaEvent have no obvious usage, 
so they are removed.

i871.3     Support in Ooaofgraphics to fire model change events

To incorporate support of firing events and managing listeners move the 
following methods from OoaofooaBase to ModelRoot class so that Ooaofgraphics can
access these methods.
           
      - addModelChangeListener(IModelChangeListener)
      - fireModelChange(ModelChangedEvent)
      - fireModelChange(ModelChangedEvent, IModelChangeListener)
      - removeModelChangeListener(IModelChangeListener)
      - addModelChangeListenerToAll(IModelChangeListener)
      - removeModelChangeListenerFromAll(IModelChangeListener)

Remove the parse-keyword 'Notify_Changes:false' from the description of the 
Ooaofgraphics domain so that graphic change events should be fired.
Add the parse-keyword 'Notify_Changes:false' to 'Canvas Tools' and 
'Terminal Specification' subsystem's description

Before the translation of OAL, it is checked in MC-Java that the package to be 
generated is a root or not.
Since Ooaofgraphics is not a root package, and we are required to generate event 
notification in the OAL of Ooaofgraphics so java.arc and statement.inc is 
modified to enable that.


Work Required
-------------
i871.1       Move the classes that are not being generated from any model to a 
             separate package 'com.mentor.nucleus.bp.core.common' and change the 
             classes ModelChangedEvent and NonRootModelElement as directed in 
             the design section.

i871.2             
i871.2.1     Update Ooaofooa.xtuml to add new Enumeration data types and 
             functions as specified in the design section. Also modify 
             ModelDelta EDT as specified in the design section.

i871.2.2     Update ModelChangedEvent.java as specified in the design section.

i871.2.3     Create IModelDelta.java, BaseModelDelta.java and 
             AttributeChangedModelDelta.java, RelationshipChangedModelDelta.java
             files as specified in the design section.

i871.2.4     Update all the model change listeners listed in the design section.

i871.2.5     Update ui.text/IElementRenameListener as specified in the design
             section. 
             Also update the 
             ui.text/AbstractModelElementTextEditor.ElementRenameListener
             and ui.text/DocumentProider.ModelSynchronizer classes to adapt to 
             this change.

i871.2.6     Remove NullDeltaListener and DeltaEvent and remove unused methods 
             from the ModelElement class as directed in the design section.

i871.3       Modify OoaofooaBase,ModelRoot classes and Ooaofgraphics model, and
             add support for firing events on graphics change in MC-Java as 
             specified in the design section.        

Unit Test
---------
Since no new feature is being introduced and only refactoring of previous model- 
change event architecture is being done, so no new unit test is required. Stable 
execution of tiger and all other unit tests are the only tests that need to 
be carried out.


End
---

$Log: i871.dnt,v $
Revision 1.1  2009/09/03 18:20:34  rmulvey
job:dts0100616734
Archive documentation and other development notes following the R3_0_0 release.  These are being archived under Documentation/internal/technical/archive/20090903

Revision 1.10  2009/01/01 23:13:16  rmulvey
Job:4060
Batch promotion of copyright changes from Review-i4060 and Review-i4060-01.

Revision 1.9.34.1  2008/12/31 16:10:23  rmulvey
Job:4060
This is a batch commit of 2009 copyright changes to branch Review-i4060.  This includes the
report that outlines all changes made (before/after for each line changed).  This report is found here: <cvs>/Documentation/internal/test_results/R2_1_2/i4060/update-copyright-results.txt.

Revision 1.9  2005/05/06 10:50:43  farrukh
Job:871
Review observations addressed.

Revision 1.8  2005/05/05 13:28:12  babar
Job:871
Minor changes.

Revision 1.7  2005/05/04 09:44:46  siddique
Job:871
Updated as per new enumerations based design.

Revision 1.6  2005/05/03 13:11:53  siddique
Job:871
Incremental check-in.

Revision 1.5  2005/04/29 12:43:52  farrukh
Job:871
List of classes to be moved to a seperate package has been sorted alphabetically.
Modifications in the design section.

Revision 1.4  2005/04/29 12:07:22  siddique
Job:871
Incremental check-in.

Revision 1.3  2005/04/27 13:17:31  farrukh
Job:871
Design section changed and some minor modifications.

Revision 1.2  2005/04/27 05:25:41  farrukh
Job:871
Minor changes

Revision 1.1  2005/04/26 13:15:24  farrukh
Job:871
Introduced

