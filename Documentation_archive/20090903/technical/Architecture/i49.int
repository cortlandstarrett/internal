========================================================================

File:      $RCSfile: i49.int,v $
Version:   $Revision: 1.1 $
Modified:  $Date: 2009/09/03 18:20:34 $

(c) Copyright 2004-2009 Mentor Graphics Corporation All rights reserved.

========================================================================
This document contains information proprietary and confidential to
Project Technology, Inc. and is not for external distribution.
========================================================================

MC-Java Implementation Note
Add support for transient variables in where clause

Abstract
--------
This note describes the changes to MC-Java to support the use
of transient variables in where clauses.  It also describes a
change to the design that removes the generated "test" classes.

History
-------
final i49-012004-01.rvm

Document References
-------------------

Bugzilla issue 35
Bugzilla issue 49

Background
----------

The code generated for a select ... from instances of ... where
uses an inner class to perform the where clause processing.  When
a parameter to the where clause is not final (i.e., its a local 
transient), there is a compile error.  For example, the following

select any act from instances of ACT_ACT where ( selected.Action_ID == sel_id );

would be translated to:

  class ActionSpecification_test2_c implements ActionSpecification_test_c
  {
	public boolean evaluate (ActionSpecification_c selected)
	{
		return selected.getAction_id() == sel_id ;
	}
  }
  ActionSpecification_c act =
    ActionSpecification_c.ActionSpecificationInstance(
      new ActionSpecification_test2_c()) ;

The second part of the work is to change the design so _test_c
classes aren't generated.  This cuts the number of files generated in half.

Design
------

i49.1  Support local transients in the where clause

The idea for the design is to change the test class to be generated
with a constructor that takes the values of the transient variables 
used in the where clause.  These values are saved in member data and
used in the evaluate function.  An illustration of the changes to 
the example in the background is probably more helpful:

  class ActionSpecification_test2_c implements ActionSpecification_test_c
  {
	ActionSpecification_test2_c( long p1 ) {m_p1 = p1;}
	private long m_p1;
	public boolean evaluate (ActionSpecification_c selected)
	{
		return selected.getAction_id() == m_p1 ;
	}
  }
  ActionSpecification_c act =
    ActionSpecification_c.ActionSpecificationInstance(
       new ActionSpecification_test2_c(sel_id)) ;

The new code is generated by scanning the where clause expression,
and finding all transient local variable (V_TVL) references.  Each 
V_TVL instance found causes the following strings to be generated:
 
 - a parameter to the test class constructor definition
 - the assignment of the parameter to the data member in the constructor
 - the declaration of the data member
 - a parameter to the test class allocation

These strings are then collected together to output the code as
illustrated above. If there are no V_TVL's in the where 
clause, then the inner test class is generated just as before.

i49.2  Remove generated test classes

i49.2.1  Create generic query class

The interface class ClassQueryInterface_c is generated,
just like all other mechanism classes in MC-Java.  It
has the following definition:

public interface ClassQueryInterface_c
{
  public boolean evaluate(Object candidate) ;
}

i49.2.2  Change code to use generic query class

The generated inner class used for queries now implements
the ClassQueryInterface_c interface.  The evaluate function
is changed to cast the passed in Object instance to the
class being searched:

  class ActionSpecification_test2_c implements ClassQueryInterface_c
  {
	public boolean evaluate (Object candidate)
	{
		ActionSpecification_c selected = (ActionSpecification_c)candidate;
		return selected.getAction_id() == sel_id ;
	}
  }

i49.2.3  Remove individual test class generation

The generation of each individual test class is removed.


Work Required
-------------

i49.1  Support local transients in the where clause

i49.1.1  Add where clause scanning function

In statement.inc, the function traverse_where_clause is created.
The function has one argument, an instance of Value (V_VAL).
The function sets the following attributes for the calling function to use:

  attr_param_decl
  attr_init_stmt
  attr_member_decl
  attr_args

These attributes correspond to the four strings needed as described
in the design section.  The function determines the subtype of the 
Value instance, with the following subtypes having special processing:

Parenthesized Expression (V_PEX)
  - invoke traverse_where_clause on the expression inside the parentheses
  - if the returned attributes are not empty, update the local attribute values
  - update the buffer attribute of the V_VAL passed in

Binary Operation (V_BIN)
  - invoke traverse_where_clause on the left hand expression
  - if the returned attributes are not empty, update the local attribute values
  - invoke traverse_where_clause on the right hand expression
  - if the returned attributes are not empty, update the local attribute values
  - update the buffer attribute of the V_VAL passed in

Unary Operation (V_UNY)
  - invoke traverse_where_clause on the operand
  - if the returned attributes are not empty, update the local attribute values
  - update the buffer attribute of the V_VAL passed in

Transient Value (V_TVL)
  - create a unique name for the parameter
  - use the name to create the attribute data needed
  - update the buffer attribute of the V_VAL passed in 
      with the member data name

Note that the function is recursive.

i49.1.2  Change generation of query code

In statement.inc, the function gen_select_inst_where_statement
is changed to invoke traverse_where_clause passing in the where
clause.  If the resultant param_decl attribute is not empty, then
the attributes are used to output the constructor and data members.

i49.2  Remove generated test classes

i49.2.1  Create generic query class

i49.2.1.1  In arch_names.inc, change the function 
get_test_class_name to return the string ClassQueryInterface_c
in the body attribute.  Remove the function's one now
unneeded parameter.  Invocations of the function have the
parameter removed in java.arc and statement.inc

i49.2.1.2  In java.arc, in the main line code circa line 180, add
the generation of the class ClassQueryInterface_c.

i49.2.2  Change code to use generic query class

i49.2.2.1  In statement.inc, in the function 
gen_select_inst_where_statement change generated code 
to use the generic query class as described in the design.

i49.2.2.2  The following files have hardwired usage
of the individual test classes.  These are changed to
use the generic query class:

  gen_export_java.arc
  OalParserTest.java
  TestParser.java
  EditorContents.java
  EditorInput.java

i49.2.3  Remove individual test class generation

In java.arc, the generation of each individual test class is removed.



Implementation Comments
-----------------------

- In fragment.inc, change the V_TVL insert to populate the
block id attribute.  This oversight was noticed when investigating
possible solutions to this problem.

- Bugzilla issue 35, an incorrect relationship navigation, was
hit when running the unit test.  It was fixed in statement.inc,
R701 changed to R703.

- My workspace had a down-level version os com.projtech.bp.ui.text.
After getting the most current version, the files EditorContents.java
and EditorInput.java no longer existed (they are now generated).  
The changes for the generic query class were added as follows:

create_util.inc - Changed the function get_test_interface_name
to return ClassQueryInterface_c and get_test_class_name to
return Class$cr{obj.name}_c.  Removed the unneeded parameter
from get_test_interface_name.

create_editorinput_java.inc - Changed invocations of get_test_interface_name.
Added code to set actionSemanticsType when opening action from
context menu in Model Explorer.

create_modeladaptor_java.inc - Changed invocation of get_test_interface_name.
Changed generation of evaluate function to match definition
in ClassQueueInterface_c.





Unit Test
---------

- Add the following at the end of the odms2 initialize function:

select any x from instances of D_D where ( selected.Disk_ID == 1 );

id = 2;
select any x from instances of D_D where ( selected.Disk_ID == id );

select any x from instances of D_D where ( not (selected.Disk_ID == id) );

row = 1;
col = 1;
select any x from instances of D_D 
   where ((selected.Row_Number == row) and (selected.Column_Number == col));

- Translate odms2 using MC-Java
R Translated select code compiles

- Rebuild all projects
R There are no compilation errors.

- Run OalParserTest
R All tests pass.

Code changes
------------

com.projtech.bp.als.oal/src/com/projtech/bp/als/oal/OalParserTest.java
Initial version:  1.11 Final version: 1.12

com.projtech.bp.als.oal/src/com/projtech/bp/als/oal/TestParser.java
Initial version:  1.4  Final version: 1.5

com.projtech.bp.io.sql/arc/gen_export_java.arc
Initial version:  1.4  Final version: 1.5

com.projtech.bp.ui.text/arc/create_editorinput_java.inc
Initial version:  1.1.2.8 Final version: 1.1.6.1

com.projtech.bp.ui.text/arc/create_modeladaptor_java.inc
Initial version:  1.1.2.1 Final version: 1.1.4.1

com.projtech.bp.ui.text/arc/create_util.inc
Initial version:  1.1.2.3 Final version: 1.1.6.1

TinyJava/arch_names.inc
Initial version:  1.5  Final version: 1.6

TinyJava/fragment.inc
Initial version:  1.3  Final version: 1.4

TinyJava/java.arc
Initial version:  1.6  Final version: 1.7

TinyJava/statement.inc
Initial version:  1.3  Final version: 1.4


End
---

$Log: i49.int,v $
Revision 1.1  2009/09/03 18:20:34  rmulvey
job:dts0100616734
Archive documentation and other development notes following the R3_0_0 release.  These are being archived under Documentation/internal/technical/archive/20090903

Revision 1.5  2009/01/01 23:13:16  rmulvey
Job:4060
Batch promotion of copyright changes from Review-i4060 and Review-i4060-01.

Revision 1.4.166.1  2008/12/31 16:10:23  rmulvey
Job:4060
This is a batch commit of 2009 copyright changes to branch Review-i4060.  This includes the
report that outlines all changes made (before/after for each line changed).  This report is found here: <cvs>/Documentation/internal/test_results/R2_1_2/i4060/update-copyright-results.txt.

Revision 1.4  2004/01/21 18:53:41  greg
Job: 49
Add history entry

Revision 1.3  2004/01/21 15:06:36  greg
Job: 49
Update from review

Revision 1.2  2004/01/16 20:29:57  greg
Job: 49 
Fix log

Revision 1.1  2004/01/16 20:29:07  greg
Job: 49
Initial version

