========================================================================

File:      $RCSfile: i340.ant,v $
Version:   $Revision: 1.1 $
Modified:  $Date: 2009/09/03 18:20:34 $

(c) Copyright 2004-2009 by Mentor Graphics Corp. All rights reserved.

========================================================================
This document contains information proprietary and confidential to
Mentor Graphics Corp., and is not for external distribution.
========================================================================

Tiger Project Analysis Note
Modifications to MC-Java to work with Tiger mdl files


Abstract
--------

History
-------

Document References
-------------------
[1] bp.core/doc/internal/technical/Persistence/persistence.ant

Analysis
--------
MC-Java can be migrated to work with Tiger files in a number of stages:

- Work from BP 6.1 exported files.
- Use SQL/ASCII form of mdl file (reparse actions).
- Use extended SQL/ASCII form of mdl file and traverse model activity data.
- Use binary form of mdl.

These steps need to be co-ordinated with the changes proposed for Tiger[1].

Work Required
-------------
i340.1     Work from BP 6.1 exported files.
           For this step, it is necessary to move from models output by
           BridgePoint Builder in .bak form, to models exported from Tiger in
           .sql form. 
i340.1.1   Version control .sql files instead of .bak files.
i340.1.1.1 For core and canvas models, create an empty .sql file in the mdl
           directory.
i340.1.1.2 For the above models, pull each revision of the .bak file, load into
           builder and export the sql with graphics. Check each sql file in as
           a new revision into the mdl directory.
i340.1.1.3 Check the work by using the Tiger compare feature on the revisions.
i340.1.2   Change the generate.xml files.
i340.1.2.1 Remove file conversions from bak to sql and replace with sql to sql
           conversions (see i340.1.3.3 below).
i340.1.2.2 Replace bak files with sql files in the dependency lists.
i340.1.3   Change the manual export procedure
i340.1.3.1 Specify output from Tiger using the Export option, including the
           graphics.
i340.1.3.2 Specify export to the mdl folder, overwriting the version controlled
           file (the Team interface should detect the change and show it as
           dirty).
i340.1.3.3 Create a utility to extract the non graphics data automatically from
           the .sql file in the mdl folder and write the result as a sql file
           with the same name into the sql folder.

i340.2     Use SQL/ASCII form of mdl file (reparse actions).
i340.2.1   Modify conversion utility[i340.1.3.3] to extract the non graphics
           data from a .mdl file and write it into the sql directory.
i340.2.2   Change the generate.xml targets so that they run the utility to 
           convert the mdl files into sql files.

i340.3     Traverse activity subsystems data and extended mdl file.
           Note that no output changes are needed for this phase, because .mdl
           files shall already be written in the correct place and in the
           correct format by the changes proposed to Tiger[1]. At this point,
           MC-Java translations for nested packages, Mealy model transitions
           etc. can be introduced. In addition, significant translation time
           gains are expected here, since there shall no longer exist a need to
           reparse the model data already parsed by Tiger.
i340.3.1   Create a new schema from the Tiger OOA of OOA.
i340.3.2   Make extensive modifications to MC-Java so that it traverses the new
           and renumbered associations in the new meta-model. The bulk of this
           work is required on the statement.inc and related archetypes,
           because these are where most of the metamodel changes were
           concentrated.
           

i340.4     Use binary form of mdl.
           Another translation performance gain is anticipated here, since
           generator is being replaced by JET technology.
i340.4.1   Replace generator
i340.4.1.1 Use core itself as a schema
           The new generator shall use a schema path to determine the schemas
           it should use. The schema path shall work in an analogous way to a
           class path. the first entry in the schema path shall be bp.core by
           default.
i340.4.1.2 Support multiple schemas.
           Additional schemas shall be added to the schema path as required.
           MC-Java shall be used to generate additional schema packages as
           required and the resulting packages shall be added to the new
           generator's schema path.
i340.4.1.3 Support multiple instance populations.
           In the same manner as the schema path, the default instance
           population shall be the default core population. Thus by default, the
           generator shall run against the current instance of the model as the
           user sees it in the tool. By allowing the instance path to point to
           different instance populations, code generation from instance sources
           other than the currently loaded model can be effected. This might
           be managed through an extension point, so that pretranslation
           filtering (such as pulling a thread from the Team interface) can
           be carried out to produce the model population to be used for
           translation.
i340.4.2   Compile archetype language to JET.
           Note that this archetype compiler protects the revenue stream; before
           customers were obliged to license generator, now they must license
           the archetype compiler (unless they want to generate code by hand
           hacking JET code; a task little more efficient than hacking VB to
           generate code from Rose).
i340.4.2.1 Create an archetype compiler
           Start with the language definition files for archetype language and
           generate an antlr configuration that compiles archetype language to
           JET. The resulting JET code shall traverse the schemas specified in
           the schema path and the instance populations specified in the
           instance path. A missing schema/reference to a non schema class
           shall result in a class not found error.
i340.4.2.2 set up the Eclipse auto build dependencies so that when archetype
           changes are made, they are quietly recompiled to JET in the
           background.

Unit Test
---------
TBD

End
---

$Log: i340.ant,v $
Revision 1.1  2009/09/03 18:20:34  rmulvey
job:dts0100616734
Archive documentation and other development notes following the R3_0_0 release.  These are being archived under Documentation/internal/technical/archive/20090903

Revision 1.2  2009/01/01 23:13:16  rmulvey
Job:4060
Batch promotion of copyright changes from Review-i4060 and Review-i4060-01.

Revision 1.1.152.1  2008/12/31 16:10:23  rmulvey
Job:4060
This is a batch commit of 2009 copyright changes to branch Review-i4060.  This includes the
report that outlines all changes made (before/after for each line changed).  This report is found here: <cvs>/Documentation/internal/test_results/R2_1_2/i4060/update-copyright-results.txt.

Revision 1.1  2004/08/18 00:43:33  campbell
Job: 340
Introduced.

