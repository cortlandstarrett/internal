Review Meeting Minutes

#  $RCSfile: i845-062905-01.rvm,v $
#  $Revision: 1.1 $

#  Reviewed: i845.int, rev 1.7
#  Start:    17:00
#  End:      18:30
#  Elapsed:  1h 30m

#  Present:  McC

-- Number Type Min Who Section   Comment
x- 01 Min McC Design 2.1.2       Typo 'thier'.
x- 02 Min McC Design 2.1.2       Typo 'cahced'.
x- 03 Min McC Design 2.1.2       Not well formed English ' At the time loading
                                 the unique_id'. I have no idea what you mean by
                                 this, please reword.
                                 [x: reword and referenced to section 2.2.2]                                 
r- 04 Maj McC Design 2.1.2       Cache issues. I do not believe this is an issue
                                 at all. We're planning to cache the entire
                                 proxy class values, right? get_compartment_text
                                 obtains its text from the represented meta
                                 model instance. This instance is going to be
                                 cached. We have determined that no derived (i.e
                                 calculated) values will cross CM boundaries,
                                 but even if they did, all that would happen is
                                 that the not yet loaded model portion would be
                                 loaded when the action language got executed.
                                 
                                 [r: Currently we are providing single level of 
                                 proxy suppport.  That means if a ModelClass is 
                                 a cross component reference only its proxy 
                                 instance is saved not other elements that are
                                 related with it (e.g. Attribute). So far we 
                                 have not thought of loading partial data from a
                                 component file (which is only possible if we 
                                 develop/use an index based object database to 
                                 store a component), which means showing an 
                                 Imported Model Class would require loading a 
                                 complete subsystem which has its attributes. 
                                 This kills the purpose of lazy loading.
                                 Please clarify!
                                 
                                 As far the legitimacy of this scenario is 
                                 concerned, We believe this certainly is. 
                                 Consider a scenario where you would require to
                                 invoke get_compartment_text to show text of an
                                 Imported Class.
                                 
                                 Please correct us if we are wrong. ]                                
                                 
                                 Please explain to me what I am missing here.
x- 05 Min McC Design 2.2.1.3     Reference to 2.2.1.3 is self referential, did
                                 you mean to reference the problem documented in
                                 2.2.1.2 ?
                                 [x: Corrected the reference to 2.2.1.2]
x- 06 Maj McC Design 2.2.1.3     I would like to retain the separate instance
                                 lists design if we can. Have you considered
                                 that the proxy could cache its target model
                                 root instead of moving all instance lists into
                                 a big pool at the top? If so please explain why
                                 this option was discarded. (a cached model root
                                 can also be rendered as a model root id string
                                 when the proxy is written to disk, right?). For
                                 'proxy instance' above, please read 'model
                                 class that would exist as a proxy on disk' i.e.
                                 an instance that is in memory representing a
                                 real instance that may or may not yet have been
                                 loaded.
                                 
[x: 
- Lets consider a scenario:
  Consider ModelElement 'A' is in ModelRoot 'R1' and ModelElement 'B' is in 
  ModelRoot 'R2'. 'A' and 'B' have an association (one-to-many; A(1)<-->B(*) )
  amongst them. In our architecture it means that 'B' has a reference of 'A'. 
  Now if i want to navigate from 'A' to 'B' to get multiple instances of 'B' for 
  an instance of 'B'. I 'll have to call a static method  
  B[] B.getManyBsAcrossR1(A target). In this method we do not have access to the
  Instance List of B. Unless we keep a static Vector instance that holds all 
  such ModelRoot that can contain instances of B.
  Please correct me if I have wrongly understood your concept of Model root 
  cache.
  
  Still there are several complications associated with managing multiple 
  instance and proxy migration. Please refere to the design section 2.2.5 in 
  i845.tnt]
                                 
x- 07 Min McC Design 2.2.1.3     If we _absolutely_must_ have only one set of
                                 instances (and I will require a _lot_ of
                                 persuasion), then MC-Java must have the
                                 redundant Instance List infrastructure removed
                                 for subordinate model roots.
                                 [x: I am not clear about what Instance List 
                                 infrastructure you are rferring to. Also i 
                                 suggest creating one class of ModelRoot which 
                                 is used by all configurable.]
                                                                                                   
_- 08 Min McC Design 2.2.1.3     The top level of the model root hierarchy is
                                 the model root managing System_c instances, not
                                 Domain_c, right? Even if it isn't now, that
                                 special case code will almost certainly
                                 change/become generic for R1.1.
                                 
x- 09 Min McC Design 2.2.2       ExportModel would become a family of classes
                                 like ExportDomain, ExportSubsystem etc. ? Yes
                                 I think that would work.
                                 [x: Yeah thats what I intended as well]
x- 10 Min McC Design 2.2.2       Typo: 'improting'.

x- 11 Min McC Design 2.2.3       Yes, I think I agree with this.
x- 12 Min McC Design 3.2         Typo: 'appendid'.
_- 13 Min McC Design 3.2         I'm not happy with appending numbers to model
                                 element names. We never had to do that for
                                 placeholders, so why expose the user to this
                                 implementation detail now?
                                 [q: What plan do you have to avoid name 
                                 collisions at same level. I believe in place 
                                 holders, we do append incremental postfixes, 
                                 don't we ?]
x- 14 Min McC Design 3.2         Why would we want to allow the user to change
                                 the name of the file independently of the
                                 modeled name? Right now, we go to some lengths
                                 to make sure we detect and keep these
                                 synchronized. Why change that policy? Please
                                 explain this idea and how it helps with multi-
                                 file persistence.
                                 [x: If we adopt the policy of discouraging the 
                                 user to look/use flat file structure, then its
                                 ok, otherwise giving the ability to user to 
                                 take this as normal/traditional file that can 
                                 be renamed at any time might be more natural, 
                                 but certaininly we do not want to do it if it 
                                 entails extra effort, which isn't apparent at 
                                 this time].
                                 
x- 15 Min McC Design 4.          Supporting linked files: good work for bringing
                                 this up! This is an important consideration. I
                                 agree that it should not be done under this
                                 work, but we should ensure we do not exclude
                                 adding this behavior easily later. Caching/
                                 Persisting the model root data as a path is
                                 part of that (see my issue 06 above).
x- 16 Maj McC Design 4.          We must implement a migration mechanism as part
                                 of this work. Who else is going to do this work
                                 if not us ? :)
                                 [x: :), Just wanted to confirm if this is done 
                                 under this issue or a seperate one]
                                 
_- 17 Min McC General            Please locate and use a spell check plugin for
                                 Eclipse, they do exist. You'd be surprised how
                                 much time reporting mis-spellings adds to a
                                 review. I'm very happy to help with syntax
                                 things. I think you all do a superb job of
                                 working in English, but let's automate out the
                                 avoidable stuff.

I'm particularly keen to resolve issue 6 above. Let's talk a bit about this on
Friday morning.

Informal comments only, no formal review carried out.

---
End

$Log: i845-062905-01.rvm,v $
Revision 1.1  2009/09/03 18:24:30  rmulvey
job:dts0100616734
Archive documentation and other development notes following the R3_0_0 release.  These are being archived under Documentation/internal/technical/archive/20090903

Revision 1.3  2005/06/30 15:37:32  siddique
Job:845
observations addressed in i845.tnt
with some outstanding

Revision 1.2  2005/06/30 01:45:41  campbell
Job: 845
Clarified wording.

Revision 1.1  2005/06/30 01:41:22  campbell
Job: 845
Introduced.

