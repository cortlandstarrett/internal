========================================================================

File:      $RCSfile$
Version:   $Revision$
Modified:  $Date$

(c) Copyright 2007-2009 by Mentor Graphics Corp. All rights reserved.

========================================================================
This document contains information proprietary and confidential to
Mentor Graphics Corp., and is not for external distribution.
========================================================================

BridgePoint Project Analysis Note
Provide generic model packaging

1. Abstract
-----------
This note analyzes the requirement for providing a generic way of packaging
models in BridgePoint.

2. History
----------

3. Document References
----------------------
[1] Bugzilla item 3490
    http://tucson.wv.mentorg.com/bugzilla/show_bug.cgi?id=3490
[2] The United Modeling Language Reference Manual, Second Edition
		ISBN: 0-321-24562-8
[3] cvs://Documentation/external/requirements/ContainerPackage.SRS.txt 1.2

4. Background
-------------
We have received requests from more than one customer to allow a generic
package which may be used to house any of the existing BridgePoint packages.
The package usage is expected to extend support for hierarchical management of a
model.

In BridgePoint today, and in the past we have always had packages.  However,
these packages have always been element specific.  This limits the flexibility
of partitioning a system into a well formed hierarchical structure.

5. Analysis
-----------
5.1 Generic packaging

UML 2 provides a means for supporting generic packages.  These packages as
defined in [2] may contain any element that is not already contained in another
element.  More specifically, an element is owned by one package or one other
element.

In UML 2 these packages may contain many different elements.  The elements may
not be related or even provide the same type of specification.  For instance, a
package may contain a component, a class, and even a state machine.  UML 2 has
never really enforced what type of element may show on a specific diagram.  In
many cases they allow mixing of element types.  In the past we have considered
allowing this freedom with our diagrams, yet have never had a strong motivation
for it.  The introduction of these generic packages will be the beginning step
towards such a move.

Given our current delivery timeframe, we can provide what the customers need and
lower the work cost by allowing the generic packages to contain only the
packages that we already support (i.e, no non-package elements).  The packages
that BridgePoint already supports are:

Activity Diagram
Communication Diagram
Component Package
Data Type Package
Function Package
Interface Package
Sequence Diagram
Class Diagram (Subsystem)
Use Case Diagram

We will need to decide on what can be mixed within a generic package.  We
already allow the various interaction diagrams in almost every existing package.
Should we allow a subsystem in a package at the system level?  We could support
it, removing the need for a domain specifically to house subsystems.  Then where
would functions go?  We could easily add function package support at the generic
package level as well as at the subsystem level.  There are two ways we can go
about supporting these generic packages, at the system level and all the way
through the model.  The latter would allow creating a generic package at any
level in the hierarchy.  With such flexibility we would need to think about how
this would work semantically.  A subsystem that is housed under a component
would be allowed a generic package which in turn could contain more components.
Allowing the generic packages only at the system level would definitely be less
work and would fit more with what BridgePoint is today.  Given that we can
support the latter in a second piece of work, we will focus only on the system
level packaging for now.

To support system level generic packaging we would need to allow for the generic
package symbol to be created on the system diagram (which is in a way a generic
package itself).  Each generic package diagram will be allowed to create the
following elements:

Activity Diagram
Communication Diagram
Component Package
Data Type Package
Interface Package
Sequence Diagram
Use Case Diagram

Given this requirement and the fact that a system diagram is a generic package,
the only change to the system diagram would be the addition of the generic
package button.  This would allow a user to choose whether or not they want to
use generic packages or model in the same way they would today.

In [2] the package diagram (which is the diagram which would open when double
clicking a generic package symbol) has support for defining dependecies and
imports.  For this work we will not worry about this functionality.

A few ideas were discussed about UML views as [2] portrays them.  The generic
package would fall under the Model Management view.  We discussed allowing the
UI to change depending on the view of the model you would like.  However at this
point I don't think it is a good time to consider these changes.  I don't think
it will buy us anything.

In verifier these packages will be transparent, therefore nothing is required
except updating any location code to traverse the new Package class.

The parser needs to distinguish data types that have the same name, but are
different specifications.  Note that it is already possible to create such a
situation, so the parser may already work.

6. Work Required
----------------
6.1 Add generic package support to metamodel
  6.1.1 Add Package class
  6.1.2 Associate Package class to all system level package classes
  6.1.3 Create disposal operation for package class
  6.1.4 Update existing dispose operations to dispose new package class
  6.1.5 Update any oal searching for all elements under the system to also
        search across every Package element
6.2 Add ui related operations
  6.2.1 Add new* operations to allow creation of each package class type
  6.2.2 Add all ui.canvas related operations to allow the package symbol to be
        drawn
  6.2.3 Add newPackage operation to System Model class
6.3 Update canvas to allow new packages
  6.3.1 Update ui.canvas plugin.xml to define new diagram
  6.3.2 Update ui.canvas plugin.xml such that each package may be drawn under
        the new package diagram
  6.3.3 Update ui.canvas plugin.xml such that the new package can be drawn on
        the system diagram
6.4 Update various trees
  6.4.1 Update ooaofooa_hierarchy to allow properties and compare to work with
        new Package class
  6.4.2 Update persistence tree to allow exporting new Package instances and any
        packages contained in them
  6.4.3 Update explorer tree to include the new Package class as a parent and a
        child
6.5 Update verifier
  6.5.1 Update any search to look across new Package associations for components
6.6 Parser
  6.6.1 Ensure parser handles data types with the same name
  
7. Acceptance Test
------------------
In this section, list the tests that need to be performed in order to
verify that all the requirements are satisfied.

End
---

$Log$
Revision 1.2  2009/01/01 23:13:01  rmulvey
Job:4060
Batch promotion of copyright changes from Review-i4060 and Review-i4060-01.

Revision 1.1.4.1  2008/12/31 16:10:04  rmulvey
Job:4060
This is a batch commit of 2009 copyright changes to branch Review-i4060.  This includes the
report that outlines all changes made (before/after for each line changed).  This report is found here: <cvs>/Documentation/internal/test_results/R2_1_2/i4060/update-copyright-results.txt.

Revision 1.1  2008/06/06 14:47:18  rmulvey
Job:3526
Archived the issues resolved during the R2_0_0 thru R2__0_2 releases into the Documentation/archive/20080606 folder.  Updated the Documentation/archive/20080606/README.tnt note accordingly.

Revision 1.5  2008/04/21 15:58:15  tlondon
Job: 3490

Addressed all issues, except for the one Campbell is responsible for.

Revision 1.4  2008/04/18 17:29:43  tlondon
Job: 3490

Fix one more "pass 80 character column" typo.

Revision 1.3  2008/04/18 17:10:36  tlondon
Job: 3490

Fix a few typos.

Revision 1.2  2008/04/17 22:08:37  tlondon
Job: 3490

Update

Revision 1.1  2008/04/17 17:01:25  tlondon
Job: 3490

Introduce.

