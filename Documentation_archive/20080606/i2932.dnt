========================================================================

File:      $RCSfile$
Version:   $Revision$
Modified:  $Date$

(c) Copyright 2007-2009 by Mentor Graphics Corp. All rights reserved.

========================================================================
This document contains information proprietary and confidential to
Mentor Graphics Corp., and is not for external distribution.
========================================================================

BridgePoint Project Design Note
Parameter Ordering

1. Abstract
-----------
This note describes how ordering was added in several places in BridgePoint
where ordering was not previously present. 

2. History
----------

3. Document References
----------------------
[1] Bugzilla item 2932
    http://tucson.wv.mentorg.com/bugzilla/show_bug.cgi?id=2932
[2] i2932.ant
[3] Bugzilla item 3528 (Create unit tests for ordering)
    http://tucson.wv.mentorg.com/bugzilla/show_bug.cgi?id=3528
    
4. Background
-------------

5. Analysis
-----------
See [2].

6. Design
---------
See [2 Section 5.1].

7. Design Comments
------------------
None

8. Work Required
----------------
The work outlined in [2 Section 5.1] was carried out.  The following table 
shows the classes where ordering support was introduced.

Class Name           Key Lett.  Rel   Referential
----------           --------   ---   --------------
Function Parameter   S_SPARM    R54   Previous_SParm_ID
Bridge Parameter     S_BPARM    R55   Previous_BParm_ID
*Structure Member    S_MBR      R46   Parent_DT_ID/Previous_Member_ID
Enumerator           S_ENUM     R56   Previous_Enum_ID
Interface Signal     C_AS       R4020  Previous_Id
Interface Operation  C_IO       R4019  Previous_Id
Property Parameter   C_PP       R4021  Previous_PP_Id
Operation Parameter  O_TPARM    R124   Previous_TParm_ID
Operation            O_TFR      R125   Previous_Tfr_ID
State Machine Event Data Item  SM_EVTDI   R533  SM_ID/Previous_SMedi_ID

* == Ordering support was already present.  However, I changed the text phrase 
     from "succedes" to "succeeds" to make it consistent with others.  

For each of the classes specified in the table above, the following work shall 
be performed:
8.1 Add a reflexive and formalize it (add "Previous_" for the new id's prefix)
8.2 Add moveUp and moveDown operations
8.3 Add "boolean actionFilter(name,value)" for "can - move up" and  
    "can - move down"
8.4 Two object contributions in core/plugin.xml are introduced to trigger 
  move up and move down with action filters. 
8.4.1 Add two CME (context menu entry) table entries in 
  core/context_menu.pei.sql.
8.4.2 Add two MEF (model element filter) table entries for the action filters 
     in core/context_menu.pei.sql.
8.5 Update the get_compartment_text()/get_connector_text() operation to provide 
    the attributes to the canvas in the specified order.  The following places 
    shall be modified:
	- C_I.get_connector_text()
	- S_EDT.get_connector_text
	- O_OBJ.get_connector_text
	- SM_EVT.get_connector_text() (SM_EVTDI)
	- S_EE.get_compartment_text() (S_BPARM)

8.6 Update the tree node specification in ooaofooa_hierarchy.sql to specify
    that Attributes are sorted in the 'succeeds' direction based on the 
    new reflexive .
8.7 Update the initialize() operation to order the element being added.
8.8 Update the dispose() operation to update the new reflexive as needed.
8.9 Create <KeyLetter>_MoveUp and <KeyLetter>_MoveDown() functions in 
    the ooaofooa CME function package.
8.10 Add code to model import to add initial order to the new ordered elements.
8.10.1 Each of the "owners" of places ordering is added will have an operation
       named initializeOrder() which is called during model import.  This
       operation shall select all the model elements, check to see if they have 
       been ordered yet, and if they have not, iterate of these MEs inserted 
       them into the new reflexive relationship order by model element name.
       The elements shall appear sorted in ascending order in model explorer
       and the canvas after this ordering.  An issue is raised [3] to
       refactor this initialOrder() operation in a way that eliminates copies
       and allows for future reuse.  The places that have will implement this 
       initializeOrder() are:
       - Interface_c
       - ExecutableProperty_c
       - Operation_c
       - ModelClass_c
       - StateMachineEvent_c
       - EnumerationDataType_c
       - Function_c
       - Bridge_c
8.10.2 An ImportHelper.java function shall be added to find all the "owners"
       of the MEs that ordering have been added to, and for each owner
       instance it shall call the initializeOrder() routine called-out in the 
       previous step.       

9. Unit Test
------------
Specified in [2 Section 7]

End
---

$Log$
Revision 1.2  2009/01/01 23:13:01  rmulvey
Job:4060
Batch promotion of copyright changes from Review-i4060 and Review-i4060-01.

Revision 1.1.4.1  2008/12/31 16:10:04  rmulvey
Job:4060
This is a batch commit of 2009 copyright changes to branch Review-i4060.  This includes the
report that outlines all changes made (before/after for each line changed).  This report is found here: <cvs>/Documentation/internal/test_results/R2_1_2/i4060/update-copyright-results.txt.

Revision 1.1  2008/06/06 14:47:19  rmulvey
Job:3526
Archived the issues resolved during the R2_0_0 thru R2__0_2 releases into the Documentation/archive/20080606 folder.  Updated the Documentation/archive/20080606/README.tnt note accordingly.

Revision 1.4  2008/05/24 04:15:07  rmulvey
Job:2932
Updated design note based on review.

Revision 1.3  2008/05/24 04:14:41  rmulvey
Job:2932
Updated design note based on review.

Revision 1.2  2008/05/19 16:00:39  rmulvey
Job:2932
Fixed spelling.

Revision 1.1  2008/05/19 15:47:26  rmulvey
Job:2932
Introduced
