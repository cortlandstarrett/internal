========================================================================

File:      $RCSfile: xtUML_to_SystemC_relations.tnt.txt,v $
Version:   $Revision: 1296 $
Modified:  $Date: 2011-10-20 15:06:12 -0700 (Thu, 20 Oct 2011) $

(c) Copyright 2006-2010 by Mentor Graphics Corp. All rights reserved.

========================================================================
This document contains information proprietary and confidential to
Mentor Graphics Corp., and is not for external distribution.
========================================================================

BridgePoint Technical Note
xtUML and SystemC Start-up Relations

Abstract
--------
In this section, give a summary of the requirements that this note aims to
describe.

History
-------

Document References
-------------------
[1] ClearQuest DEI dts0100616739 MC-SystemC

Background
----------
This note discusses issues around SystemC elaboration, initialization and
how they relate to xtUML artifacts such as state machines.

Intended Audience
-----------------
This note is for discussion of xtUML to SystemC mappings with developers and
with technical customers.


Elements to be Discussed:
------------------------
SystemC phases (elaboration, initialization)
Module instantiation
Class instance instantiation
Instance-based state machines
Class-based state machines
Default behavior


SystemC Elaboration (definition):
--------------------------------
SystemC uses static elaboration of the module hierarchy.
All module instantiation and port binding must be completed
before the end of elaboration.

Modules, ports, exports and primitive channels can only be
instantiated during elaboration, and ports can only be 
bound during elaboration. 

The end_of_elaboration() callbacks are made just after the
end of elaboration, and hence can rely on instantiation and
port binding having been completed, but cannot instantiate
further objects in the module hierarchy or bind ports.  On the
other hand, the before_end_of_elaboration() callbacks are made
before the end of elaboration.


Relation1: SystemC Elaboration <--> Module Instantiation
--------------------------------------------------------
Module Instantiation must be done before the SystemC kernel calls
the callback function end_of_elaboration().
No problems with static instantiation, but for dynamic instantiation 
(pointer to modules), one should make sure of it.

Currently, xtUML models contain static information, thus the 
generated SystemC code has static module instantiaion only.

example:
SC_MODULE( TBTOP ) {
  /*----- Port Declaration ------*/
    sc_in< bool > clk;
    sc_in< bool > rst_X;

  /*----- Instantiation of Submodules ------*/
    TestBench  iTestBench;
    Mutliplier_Node  iMutliplier_Node_node00;

   /*----- Connecting Modules ------*/
    SC_CTOR(TBTOP)      :
        iTestBench ("TestBench")
        ,iMutliplier_Node_node00 ("Mutliplier_Node")

    {

    }
}


Note:  Module Instantiation and Elaboration concepts are related
to the structural hierarchy of SystemC.  Other issues are all 
related to the behavior of the system.


====================================================

Relation2: Default Behavior <--> State Machines
-----------------------------------------------
xtUML models does not have the concept of default behavior.
xtUML uses state machines to define the behavior for each
class inside a component.

Thus, for modules which do not have any modeled state machines,
the BridgePoint SystemC model compiler generates a default behavior
which resets all ports.  Otherwise, behavior modeled as OAL inside
state machines are used.


Relation3: Class Instance Instantiation <--> SystemC Elaboration
----------------------------------------------------------------
There is no relation between these two items.  The first one is concerned
with the internal behavior of the module (data and functions process
these data), while the latter one is concerned with the instantiatation
of the hierarchy and binding different ports with each other.

In xtUML, data and functions are divided logically into a number
of classes.  However, in SystemC data contained within a module
are not separated. Thus, data members and functions modeled
inside xtUML classes are all flattened (at gen time) inside the 
module (component) which hold these classes.


Instance-based state machine and Class-based state machines
-----------------------------------------------------------
Since SystemC modules (xtUML components) do not have the concept
of dividing data logically into number of classes, the difference
between ISM and ASM is not strictly mapped from xtUML to SystemC at
this time.  Currently, we the SystemC model compiler is supporting
only one instance per class, thus ISM and ASM will both have singelton
properties.

End
---

$Log: xtUML_to_SystemC_relations.tnt.txt,v $
Revision 1.1  2010/03/25 14:48:51  cstarret
job:dts0100616739
adding technical note discussing elaboration and initialization and state machines

