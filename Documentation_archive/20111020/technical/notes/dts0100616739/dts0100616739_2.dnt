========================================================================

File:      $RCSfile: dts0100616739_2.dnt,v $
Version:   $Revision: 1296 $
Modified:  $Date: 2011-10-20 15:06:12 -0700 (Thu, 20 Oct 2011) $

(c) Copyright 2007-2011 by Mentor Graphics Corp. All rights reserved.

========================================================================
This document contains information proprietary and confidential to
Mentor Graphics Corp., and is not for external distribution.
========================================================================

BridgePoint Project Design Note
Accurately Marking Template Parameters for Ports and References

1. Abstract
-----------
This note describes requirements and design for marking elements of an xtUML
model to be translated into SystemC with extensions for C++ Templates.
Specifically, it addresses assuring accurate and unique identification of
elements to be marked.

2. History
----------

3. Document References
----------------------
[1] ClearQuest DEI dts0100616739 MC-SystemC

4. Background
-------------
An initial marking strategy proved inadequate to accurately mark complex
component hierarchies having multiple packages with many components connected
together through many ports.

5. Analysis
-----------
5.1      History of the Marking
5.1.1    During initial development some weaknesses in the marking functions
         were noted.  Namely, the template parameter marking functions needed
         to be grouped together with the template creation mark.  This was due
         to a lack of identifying information in the template parameter marking
         function parameter list.  It is also because of the possibility of
         interfaces and components having the same names.
5.1.2    The above ambiguity was resolved using a positional grouping strategy.
5.1.3    When a component or interface is marked as being templated, it is
         then considered the "current" template.  Parameter additions and 
         parameter value settings that follow are applied to this template.
         Any calls to add a parameter and any calls to set the value of a
         parameter will use this "current" template.

5.2      Opportunity to Avoid Grouping
5.2.1    It is possible to remove the necessity of grouping the marking
         invocations. Each marking function could be made to stand alone and
         uniquely identify the specific element it applies to.

5.3      Uniquely Identifying Template Parameters
5.3.1    Each template can have an arbitrary number of parameters.  Each
         parameter must have a name that is different from the other parameters
         associated with the C++ template it modifies (as enforced by the ANSI
         C/C++ standard).
5.3.2    To make each marking function stand alone, full identifying
         information must be supplied as parameters to the marking function.
         
5.3.3    Component Usage (Component Reference) Identification
5.3.3.1  BridgePoint allows multiple references to the same component.  In
         fact, it is legal to have multiple references to the same component
         in the same package.
         Internal to the tool, there are unique identifiers in these instances.
         However, these identifiers are architectural and not exposed to the
         user interface.  Thus, it is possible to have models with identically
         named component references.
5.3.3.2  To identify a component reference uniquely, the user must provide
         a ClassifierName that is unique among all component references of
         that type (referring to the same component).
5.3.3.3  Assuming the above rule is followed, component references can be 
         uniquely identified by supplying the name of the package containing 
         the component reference, its referenced component name and its
         supplied ClassifierName.
5.3.3.4  If the rule from 5.3.3.2 is not followed, then multiple component 
         references of the same type would be returned by a query using the
         identifying information in 5.3.3.3.

5.3.4    Interface Reference/Usage (Port) Identification
5.3.3.1  Interface references/usages (ports) can proliferate quickly.
         BridgePoint allows multiple references to the same component.  This
         results in multiple "copies" of an interface reference/usage.
5.3.3.2  To uniquely identify ports, all of the same information as that 
         needed to identify component references is required.  In addition,
         the name of the port is needed.

6. Design
---------
6.1      Enhanced Marking for Templates
6.1.1    The presently implemented marking solution using the "current"
         template will remain in place (at least for a while).  The present
         solution is compact and clear in many marking use cases.
6.1.2    An additional (alternate) marking functions will be supplied that
         includes a full set of identifying information for the target model
         element of each template parameter.
6.1.3    SetTPV
         To set a template parameter value using full identifying information
         of the target model element, invoke SetTPV as described here:
         
.//============================================================================
.// Set Template Parameter Value
.//   Once components and interfaces have been marked with C++ templates
.//   and all template parameters added, the template parameter values can
.//   be set and associated with the appropriate component and interface
.//   instances (component references and ports).
.//
.// SetTPV( "package", "component", "ClassifierName", "port", "variable", "value" )
.//
.// Where the input parameters are:
.//   package = is the name of the package containing the target component
.//             instance (component reference).
.//   component = is the name of the definition of component being marked.
.//               (On a component reference, this is the part of the name after
.//               the package path but before any supplied ClassifierName.)
.//   ClassifierName = identifies the instance of a component (a component
.//                    reference) that is the target of the template parameter
.//                    value (whether for the instance itself or for one of
.//                    its ports).
.//   port = is only used when marking a template parameter value for the 
.//          usage of an interface (port).  If this parameter is empty, then
.//          the template parameter value will be applied to the component
.//          reference.  If this parameter is not empty, then the template
.//          parameter value will be applied to the interface usage (port)
.//          found on the targeted component reference.
.//   variable = is the name of the template variable being set.
.//   value = is the value being applied to the named template variable.
.//
.// Example:
.//   for component reference:
.// .invoke SetTPV( "simtop", "wait_hs", "din", "", "T", "abc_t" )
.// .invoke SetTPV( "simtop", "wait_hs", "din", "", "U", "xyz_t" )
.//   for interface reference:
.// .invoke SetTPV( "simtop", "filt_top", "i_filt_top", "din", "T", "my_t" )
.// .invoke SetTPV( "simtop", "filt_top", "i_filt_top", "dout", "T", "int" )
.//============================================================================


7. Design Comments
------------------

8. Work Required
----------------

9. Unit Test
------------

End
---

$Log: dts0100616739_2.dnt,v $
Revision 1.2  2011/01/20 00:04:38  cstarret
job:dts0100616739
design section of note on template marking

Revision 1.1  2011/01/19 00:51:55  cstarret
job:dts0100616739
analysis section of note on template marking

