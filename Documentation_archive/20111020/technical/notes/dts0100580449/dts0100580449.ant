========================================================================

File:      $RCSfile: dts0100580449.ant,v $
Version:   $Revision: 1296 $
Modified:  $Date: 2011-10-20 15:06:12 -0700 (Thu, 20 Oct 2011) $

(c) Copyright 2007-2011 by Mentor Graphics Corp. All rights reserved.

========================================================================
This document contains information proprietary and confidential to
Mentor Graphics Corp., and is not for external distribution.
========================================================================

BridgePoint Project Analysis Note
Provide search facility

1. Abstract
-----------
This note analyzes the design for a search facility within the BridgePoint tool.

2. History
----------

3. Document References
----------------------
[1] ClearQuest DEI dts0100580449
    Search facility

4. Background
-------------
Currently there is no support for searching within xtUML model data.  There is
somewhat of a workaround, where a user can search for string values in the raw
xtUML storage files.  This however does not integrate well with the BridgePoint
tool and is not ideal as the user must dig through the raw SQL entries.

5. Analysis
-----------
The BridgePoint tool shall be extended to include search functionality.  This
functionality shall be integrated into the eclipse Search infrastructure.

5.1 Search
 
In general a search may consist of the following elements:

Query
Participant
Result
Engine
Scope

A Query can be constructed by a simple string, a regular expression, or a set
of logic (OAL).

A Participant is an element that a search Engine will apply a given Query
against.

A Result represents a Query match that is returned by the Engine.

An Engine is responsible for evaluating a Query on a given set of Participant
elements, within a given Scope.  After the evaluation has completed the Engine
returns any matches as Result instances.

A Scope defines the extent of available elements to process a Query against.

These elements are referred to throughout the document and are not a concrete
definition of what a search is.  They are simply a means of communicating the
various search elements understood at the time of writing.

5.2 Extend Search infrastructure

The BridgePoint tool shall extend the eclipse Search infrastructure.  Extending
the infrastructure will provide the following UI additions for the BridgePoint
tool:

- A page entry on the eclipse search dialog
- Matched results listed in the Search view

5.2.1 Search Page

The search page shall allow the user to enter a textual value (simple or regular
expression), or OAL logic which returns a boolean.  Case sensitivity matching
shall be configurable.

The page shall include support for full configuration a Query.  This includes
the type of query: declaration, references, all occurrences and text in action
language or description.

It shall allow the user to configure what Participant types shall be considered.
This will be the meta-model element type being searched for.

Finally, it shall allow the user to specify the scope of the Query.  This can be
the Enclosing element of the current selection or World (everything).

Find and Replace shall be supported when a user is searching for text in OAL or
a description.  When replace is attempted the user shall be able to enter
replacement text.  The user shall be given the opportunity to exclude matches
from the replace, as well as see a comparison of the before and after if the
replace was to complete.  The user shall be able to undo a replace.

5.2.2 Matched results

Result instances shall be displayed in the eclipse Search view.  When double
clicked the appropriate editor shall be opened for the Result.  This can be an
OAL editor, Description Editor, or a Diagram Editor.  In any case that an
element is not displayed on these editors, then the tool shall explain this to
the user.

A context menu item shall be available when right clicking on a Result, which
will take the user to the element's location in Model Explorer.

5.3 Search engine

The Engine shall process a Query that has been configured by the search page
mentioned in 5.2.1.  The Engine shall gather a list of Participant elements
given the Query configuration.  The Engine shall evaluate the Query against the
determined Participant elements.

5.3.1 Declaration Query

For a Query configured as a declaration search, the Engine shall take the
determined Participants and compare the provided query text with the Participant
element's name.

5.3.2 References Query

For a Query configured as a references search, the Engine shall first locate the
declaration matches in the same way as 5.3.1.  For each of the matches the
Engine shall then locate all references to those declarations.  This shall be
done using the RTO - RGO associations, and must only include elements which are
user visible.  If the direct RGO is not the user visible element, proper
traversals must occur to navigate to a user visible element.

5.3.3 All occurrences Query

For a Query configured as an all occurrences search, the Engine shall return
results from both 5.3.1 and 5.3.2.

5.3.4 Action home or Description Query

For a Query configured as an Action language or Element description search, the
Engine shall gather all action homes or Descrip attributes for the determined
Participants.  The Engine shall locate matches to the given textual string
within all action homes or Descrip attributes.

5.3.5 OAL expression Query

For a Query configured as an OAL expression Query, the Engine shall evaluate the
written OAL against all determined Participants.  The Engine shall consider
matches when the evaluation returns true.

5.3.6 Participant gathering

The Engine shall consider the participant type configuration as well as the user
configured scope when gathering available participants.

5.4 Contextual search

Contextual searching shall be enabled.  Only two Query types at this time shall
be supported.  A declaration Query and a references Query.  When an element is
selected in the UI, the context menu shall be filled with two new sub-menus:

Declarations >
   Enclosing element
   World

References >
   Enclosing element
   World
   
The Declarations menu shall only be enabled on elements that import or reference
a true definition, for instance Component Reference.

The References menu shall be enabled for all elements that have an RGO which is
user visible.

When activated a Query shall be configured according to the menu item selected
and passed to the Engine.

5.5 OAL and Description based search alternative

Two alternatives are present for OAL and description based searching.  One is
where we persist action language and descriptions in their own file and use a
modified version of the eclipse file search.  The modified version would only
look in oal and dsc file types.  This would however require some infrastructure
modification to support the existing OAL and Description editors.

Another alternative which would not require infrastructure modification is to do
the same as above only create temporary IFile instances from the action language
attribute contents and the descrip attribute contents.  Then pass those to the
modified eclipse file search.

If one of these options were chosen we could have two search tabs in the eclipse
search window.  One for OAL and Descrip searching and the other for the other
search types listed in 5.2.1.
  
6. Work Required
----------------
6.1 Search
6.1.1 Create a BridgePoint project and model to capture the search related
      elements.
6.2 Extend Search infrastructure
6.2.1 Search Page
6.2.1.1 Extend the appropriate eclipse extension points to define a search page.
6.2.1.2 Implement the search page class providing all necessary options.
6.2.1.3 When the Search button is clicked create the necessary Query class with
        the necessary parameters and pass to the Engine.
6.2.1.4 Define a complete OAL editor for the script based searching, provide
        parse support and syntax coloring.
6.2.1.5 Create a Replace dialog as described in the analysis
6.2.1.6 Upon proceeding replace all entries, this will require modifying the
        action language or Descrip attributes.
6.2.2 Matched results
6.2.2.1 Once the Engine has gathered all matches create corresponding matches
        for the eclipse search infrastructure to allow entry into the Search
        view.
6.3 Search engine
6.3.1 Declaration Query
6.3.1.1 When the Engine receives this query provide name matching against the
        Participant elements.
6.3.2 References Query
6.3.2.1 When the Engine receives this query provide name matching against the
        Participant elements, then for all matches find all RGO instances that
        are user visible.
6.3.3 All occurrences Query
6.3.3.1 When the Engine receives this query return the results from 6.3.1 and
        6.3.2.
6.3.4 Action home or Description Query
6.3.4.1 When the Engine receives these queries scan all action homes or Descrip
        attributes values for all Participants located.
6.3.5 OAL expression Query
6.3.5.1 When the Engine receives this query apply the logic defined against all
        Participant elements, returning only those where the logic returns true.
6.3.6 Participant gathering
6.3.6.1 Gather all elements that are within the configured scope.
6.3.6.2 When an Element type is specified filter all elements that do not match
        the type.
6.3.6.3 When action language or element description searches are configured 
        filter all elements that do not have an action home or a Descrip
        attribute.
6.4 Contextual search
6.4.1 Define context menu entries as object contributions against
      NonRootModelElement.
6.4.2 Filter the Declarations menu when one of the following are not selected:
      Component Reference
      Imported Class
      Interface Reference
      Imported Interface Reference
      Class Participant (formal)
      Class Instance Participant (formal)
      External Entity Participant (formal)
      Function Package Participant (formal)
      Package Participant (formal)
      Component Participant (formal)
      Asynchronous Message (formal)
      Synchronous Message (formal)
      Communication Link (formal)
6.4.3 Filter References menu when no user visible RGO exists
6.4.4 Configure Query instance with parameters according to menu selected and
      pass to the Engine.  Have the Engine results added to the Search view.
6.5 Alternatives for OAL and Description searching
6.5.1 Separately persist action homes and Descrip
6.5.1.1 Create a new Action Language Class and a new Element Description class.
6.5.1.2 Associate the two new classes where appropriate, this will be with all
        elements that currently have a matching attribute.
6.5.1.3 Add upgrade code to migrate old attributes to the new classes.
6.5.1.4 Add pei data to persist the new classes
6.5.1.5 Write the data as text from the action language or description, not as
        SQL format
6.5.1.5.1 Add header with information to resolve owning element
6.5.1.6 Add support for importing the text, by creating a new instance of the
        Action Language class or Element Description class.
6.5.1.7 Add page for OAL and Description searching
6.5.1.8 Copy and extend the existing File Search page, forcing the .oal or .dsc
        extension
6.5.2 Create temporary IFile instances for search
6.5.2.1 Perform 6.5.1.6 and 6.5.1.7, only gather the action language attributes
        and descrip attributes from the configured scope and create an IFile
        instance for both.  Modify the eclipse file search to only look at these
        files.
6.5.2.2 For replace in this case take the contents of the replaced text in the
        file and apply it to the appropriate attributes.
        
7. Acceptance Test
------------------
7.1 A test matrix shall be created that tests all possible Query types.  The
    matrix shall cover cases where results are found and where results are not
    found.

7.2 Replace
- Search and replace where more than one match is found
- Test the preview and compare windows
- Cancel does not modify the model
- Proceeding replaces all matches
- Undo reverts the replace

7.3 Alternatives

- Test search and replace against all action language homes and descriptions

7.3.1 Action language and Descriptions as files

- Action language and descriptions editors still work as designed
- Persistence of the action language and descriptions work properly
- Importing the persisted text properly creates and associates the new classes

End
---

$Log: dts0100580449.ant,v $
Revision 1.2  2011/06/29 18:06:51  tlondon
Job: dts0100580449

Remove some detail from eclipse search page and result view

Revision 1.1  2011/06/28 16:32:59  tlondon
Job: dts0100580449

First pass

