========================================================================

File:      $RCSfile: dts0100777533.ant,v $
Version:   $Revision: 1296 $
Modified:  $Date: 2011-10-20 15:06:12 -0700 (Thu, 20 Oct 2011) $

(c) Copyright 2007-2011 by Mentor Graphics Corp. All rights reserved.

========================================================================
This document contains information proprietary and confidential to
Mentor Graphics Corp., and is not for external distribution.
========================================================================

BridgePoint Project Analysis Note
Possibility to define array size using modeled constants

1. Abstract
-----------
Due to customer request, it is required to support constants in defining
array dimension length. 

2. History
----------
None.

3. Document References
----------------------
[1] ClearQuest dts0100777533 - DEI Possibility to define array size using 
	modeled constants
[2] Bugzilla item 3085 - Establish fixed array lengths.
    http://tucson.wv.mentorg.com//bugzilla/show_bug.cgi?id=3085
[3] <svn>/Documentation_archive\20080109\i3085-01.ant 
[4] <svn>/Documentation_archive\20080109\i3085-01.dnt 
[5] BridgePoint Software Requirements Specification : Fixed Length Arrays
    <cvs>://Documentation/external/requirements/FLA.SRS.txt
[6] dts0100795359 - Automate Junit test for  support constants to define array 
	dimension 
4. Background
-------------
In first phase of array support [2], FLA-4b and FLA-4c[5] were scheduled to be 
implemented in the second phase[3].

FLA-4b : Lengths are specified as either literal or symbolic integer 
constants (e.g., "[60][LINE_LEN]").

FLA-4c : Lengths are specified as integer expressions and may contain
symbolic or literal constants as well as integer arithmetic operators.  
Examples include "[60][80]" and "[HEADER_LEN + PAYLOAD_LEN + TRAILER_LEN]".

Both FLA rules above are implemented for OAL, and need to be implemented
for properties view as well.

5. Analysis
-----------
5.1 Support constants in array dimension definition (FLA-4b)
5.1.1 In properties view  : 
The properties view should accept string as value for the dimension length 
between square brackets, and attempt to resolve the constants.
If no constant is matched with the entered string by user, then an error message
at bottom of the tool shall tell the user that no matched constant is found,
if user presses enter, the changes made should be ignored.

5.1.1.1 If a matched constant is found, the dimension validator need to check 
whether the constant core type is integer or not, and report proper error 
message if needed. The error message is "Only  non-zero positive integer values 
are allowed in array dimensions".

5.1.1.2 The dimension validator need to check if the constant value is negative, 
and report proper error message if needed. The error message is "Only  non-zero 
positive integer values are allowed in array dimensions".

5.1.2 There's a potential performance issue	here when validating after each 
keystroke. We need to watch out for this during the design phase.

5.2 Support Expression to define dimension (FLA-4c) : 
5.2.1 In properties view : 
The acceptance pattern of the entered value format shall support operators 
+, -, *, /, and %. The element count value shall be used to set to the sum value 
for each dimension. If the sum value is less than zero, an error message shall 
be displayed to the user stating that negative value can not be used to define
array dimension.

5.3 In case of invalid array dimension entry , the changes shall be discarded
and keep the latest valid value as it does today.

5.4 The current implementation uses regular expressions to validate the entered 
dimensions, that same approach will be used here. 

6. Work Required
----------------
6.1 Implementing FLA-4b rule :  
6.1.1 For property view : 

6.1.1.1 ui/properties/arc/BuildPropertiesSource.arc shall be modified to pass 
the NonRootModelElement instance in the DimensionsValidator to be used later
to get the modelroot used, if the NonRootModelElement is associated with 
Dimensions class.

6.1.1.2 A new constructor shall be added to DimensionsValidator with 
NonRootModelElement argument

6.1.1.3 Update the regular expression pattern used to validate the input format 
of the property label in DimensionsValidator to accept strings between square
bracket

6.1.1.4 Add new method ResolveConstant that receive the input string and 
return matched constant if found



6.2 Implementing FLA-4c rule 
6.2.1 For properties view :
6.2.1.1 Update the regular expression pattern used to validate the input format 
of the property label in DimensionsValidator to accept operators.

6.2.1.2 Add new method ComputeDimensionLength to calculate the expression
written in the property label.

7. Acceptance Test
------------------
7.1 All Junit test must pass
7.2 Implement and run automated Junit test [6]
   
   
      


End
---

$Log: dts0100777533.ant,v $
Revision 1.3  2011/08/31 15:16:34  nmohamad
job:dts0100777533
Remove the manual test section

Revision 1.2  2011/08/24 15:51:01  nmohamad
job:dts0100777533
Addressing review minutes

Revision 1.1  2011/08/15 15:05:31  nmohamad
job:dts0100777533
Create

