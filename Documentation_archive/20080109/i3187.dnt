========================================================================
File: $RCSfile: i3187.dnt,v $
Version: $Revision: 1.2 $
Modified: $Date: 2009/01/01 23:12:51 $

(c) Copyright 2007-2009 by Mentor Graphics Corp. All rights reserved.

========================================================================
This document contains information proprietary and confidential to
Mentor Graphics Corp., and is not for external distribution.
========================================================================

BridgePoint Project Design Note
Generate unit tests from test matrices

1. Abstract
-----------
This note describes the design for implementing a solution that allows unit 
tests to be generated from a test matrix.

2. History
----------

3. Document References
----------------------
[1] Bugzilla item 3187
	http://tucson.wv.mentorg.com//bugzilla/show_bug.cgi?id=3187
[2] <cvs>Documentation/internal/technical/notes/i3187.ant
[3] <cvs>Documentation/internal/technical/archive/20070830/
	notes/i478-TestMatrix-01.txt
[4] <cvs>Documentation/internal/technical/notes/i2876-TestMatrix.txt
[5] <cvs>Documentation/internal/technical/notes/i3186-TestMatrix-01.txt
[6] Branch R1_5_2-RWM-i3187

4. Background
-------------

5. Analysis
-----------
See [2]

6. Design
---------
The analysis note [2] laid-out a way to generate unit tests. As the work
required that was called out in the analysis began, it became apparent that the
solution was not going to be time-consuming and was not going to be user-
friendly. In that solution [6], a model of a test matrix was created. This 
matrix served as a meta-model for unit testing. Each feature tested would be a 
model of this meta-model and would therefore have a set of PEI data that 
populated the meta-model. Once this data was loaded, the model would be run 
through a "unit-test compiler" (archetype) that generated the tests. The 
problem was creation and maintenance of the PEI data. It was specified that we 
would store this data in XML format. The user-entry and parsing of this data 
was problematic. The data was no longer really a matrix, which led to 
confusion. The alternate approach called-out in the note of creating a editor 
that walked the user through PEI data creation suffered from the same problems. 
We learned from that experience... It was observed that the test generation was 
the easy part. It was management of the matrix data itself that was key. 
Therefore, the idea of modeling the matrix was abandoned. Instead, the format
of a matrix was formalized (based on a matrix was used in the past), and a
perl script was created that reads this matrix directly and generates the unit 
tests. The tests generated contain some parts that require user intervention 
after generation (generated with "TODOs"), and some that do not. The code
generated with TODOs is kept separate from the code that does not need to be
maintained, and the tool allows the user to regenerate without overwriting the
maintained part of the code.

7. Design Comments
------------------
7.1 Formalize the format of a test matrix.
7.1.1 The following is the matrix format. Note that the text strings in this 
example that end in a ":" are required section names, they MUST be present.

Degrees of Freedom:

DegreeType1(A)
1. DegreeType1_Instance1
2. DegreeType1_Instance2
...

DegreeType2(B)
1. DegreeType2_Instance1
2. DegreeType2_Instance2
...

Results:
1. ResultFunction1 "Description for the case when this function fails."
2. ResultFunction2, Description for the case when this function fails.
...

Matrix:

   A1 A2
B1 R1 R2
B2 R2 R1

7.1.2 Examples
See [3], [4], [5]

7.1.3 Matrix guidelines
7.1.3.1 The matrix rows and columns may be a combination of the Degrees of 
		Freedom for example, S1D1 would be allowed. Please see [3], [4], [5] 
		for examples.

7.1.3.2 Internally, the text matrix should be placed alongside the issue's 
		documentation (Documentation/internal/technical/notes/).
7.1.3.3 Name the matrix as follows: i<bugzilla #>-TestMatrix-<xx>.txt
		<xx> is a number that starts with 01 and increments for each matrix
		required by the issue.

7.1.3.4 Lines in the matrix that start with '#' are considered comments and 
		are skipped, please take advantage of comments, and at least provide
		a comment at the head of the file that describes what the matrix is
		being used for.

7.1.3.5 No spaces in the result function names provided. Use '_' or 
		upper-case/lowercase as needed for readability.
	
7.1.3.6 In the Results section, each possible result is entered as follows:
		1. <FunctionName>[,| ]+["error description"]

		This allows a descriptive error to be included in failure cases.

7.2 Create a perl script that reads the a test matrix and generates a test for
	each cell of the matrix.

7.2.1 Generated functions that the user is required to complete will be placed
	in a separate file from those which do not require any additionally work.
	To implement this, the class that requires further implementation will
	be a superclass to the class(es) that do require further implementation.
	For example, given a test named NewFeatureTest. There will be at least 2
	files generated:

public class NewFeatureTest extends TestSuite {
	// In this class you will find several comments of the form:
	// TODO: Implement
}


public class NewFeatureTest_0 extends NewFeatureTest {
	// The code here does not need any further implementation
}


7.2.2 When the matrix generates over 300 tests, multiple test subclasses are
	created. The value of 300 is a default which can be overridden. This 

feature is present for performance reasons. The JDK begins to perform 

sluggishly when there are very large numbers of tests in a single class.

Some of our matrices are already known to generate over 1500 tests.

7.2.3 A test is generated for each matrix cell. The test acquires the instance 
	for the column, and the instance for the row. It then performs the action
	specified and it checks the action. If the test uses a canvas editor, the
	standard data capture and verification mechanism is also used as part of 
	the test. 

public void testA1_B1() {
	test_id = "test_1";
	NonRootModelElement src = selectA("A1");
	NonRootModelElement dest = selectB("B1");

	A_B_Action(src, dest);

	assertTrue("Description for the case when this function fails.", 

	checkResult_ResultFunction1(src,dest));

	IEditorPart editor = UITestingUtilities.getActiveEditor();
	if(editor instanceof CanvasEditor) {
		CanvasEditor ce = (CanvasEditor)UITestingUtilities.getActiveEditor();
		validateOrGenerateResults(ce, generateResults);
	}
}


7.2.4 Items the user must implement.

7.2.4.1 Selection of the instance to test. This will often be from a 
	preexisting model. This is where the majority of the "TODOs" are found. 
	This is because we must acquire an instance to test at this point. The 
	routine that requires implementation looks like this:

NonRootModelElement selectA(String element) {
	NonRootModelElement nrme = null;
	if (element.equalsIgnoreCase("A1")) {
		//TODO: Implement
	} else if (element.equalsIgnoreCase("A2")) {
		//TODO: Implement
	}

	return nrme;
}

7.2.4.2 The action for each row/column type combination. Note that the 
	instances are passed-in to this routine. Therefore, we do not need to
	implement a test for each row-column instance permutation, just the row-
	column type permutations. It has been observed that even complex 
	matrices tend to have only a few such permutations.

void A_B_Action(NonRootModelElement columnInstance, 
				NonRootModelElement rowInstance) {
	//TODO: Implement
}

7.2.4.3 The result test action. For each defined result, a function is 
	generated. This function must be implemented.
	boolean checkResult_isInvalidDestination(NonRootModelElement source, 

NonRootModelElement destination) {
	boolean isInvalidDestination = false;
	//TODO: Implement
	return isInvalidDestination;
}


7.2.5 Unit test suite generation.
	By default, a suite that generates over 300 tests is considered large, and 
	tests will be generated into separate class which each contain 300 or fewer 
	tests. In this situation, a test suite class is created as a convenience.
	The thought is that when there are this many tests, is likely belongs in a 
	separate suite. The creation of this suite is a convince feature. Of course 
	if this suite is not wanted it can simply be deleted. The name of this suite 
	will be: <ClassName>TestSuite.java.

7.2.6 Command-line options
UnitTestGenerator <TestMatrix> <ResultName> -n <num> -p <package>
      TestMatrix: Fully qualified name of the test matrix file.
      Result    : Fully qualifed name for the resulting java class file. 
      num       : The number of tests per file. 
                  Default: $maxTestsPerClass
      package   : The package name for resulting java class.  
                  Default: $packageName
      -DNO      : "Do Not Overwrite".  When this flag is specified, the 
                  hand-maintained java class that was previously generated 
                  will not be overwritten.
                  Default: Files WILL BE overwritten by default.       


8. Work Required
----------------
Work required is specified in the design section.

9. Unit Test
------------
9.1 Several test matrices shall be created and run through the tool [3],[4],[5].
9.2 Verify command-line options work as described.
9.3 Verify that the usage screen is complete.

End

---

$Log: i3187.dnt,v $
Revision 1.2  2009/01/01 23:12:51  rmulvey
Job:4060
Batch promotion of copyright changes from Review-i4060 and Review-i4060-01.

Revision 1.1.4.1  2008/12/31 16:09:53  rmulvey
Job:4060
This is a batch commit of 2009 copyright changes to branch Review-i4060.  This includes the
report that outlines all changes made (before/after for each line changed).  This report is found here: <cvs>/Documentation/internal/test_results/R2_1_2/i4060/update-copyright-results.txt.

Revision 1.1  2008/01/09 20:55:34  rmulvey
Job:3358
Archives notes from issues completed in the following versions: "R1_5_1, R1_5_2, R1_5_3".

Revision 1.2  2007/10/16 17:28:58  rmulvey
Job:3187
Introduced the implementation note and changed the design note properties to -kkv.

Revision 1.1  2007/10/16 17:24:58  rmulvey
Job:3187
Created the design note.

