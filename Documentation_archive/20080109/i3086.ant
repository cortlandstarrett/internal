========================================================================

File:      $RCSfile: i3086.ant,v $
Version:   $Revision: 1.2 $
Modified:  $Date: 2009/01/01 23:12:51 $

(c) Copyright 2007-2009 by Mentor Graphics Corp. All rights reserved.

========================================================================
This document contains information proprietary and confidential to
Mentor Graphics Corp., and is not for external distribution.
========================================================================

BridgePoint Project Analysis Note
Put VehicleControlSystem Model Under Revision Control

1. Abstract
-----------
We are starting to build some collateral of models that use components and
interfaces.  These need to be put under revision control.  Specifically, the
VehicleControlSystem model and models that Alasdar has been creating.  This note
lays out the options.

2. History
----------

3. Document References
----------------------
[1] Bugzilla item 3086
    http://tucson.wv.mentorg.com//bugzilla/show_bug.cgi?id=3086
[2] Bugzilla item 3001
    http://tucson.wv.mentorg.com//bugzilla/show_bug.cgi?id=3001

4. Background
-------------
4.1     Our CVS repository already contains a project "Models".  Models is an
        xtUML project that contains many models/domains that we use for testing
        purposes. Nearly all of the models contained here are single-domain
        models without any system-level elements such as components and
        interfaces.  Models does contain three system-level components:
        "ComponentSyntaxTest", "Component Context Menu Test", and "System
        Component Testing"
4.1.1   The Models project is getting so big that some developers want to avoid
        downloading or keeping the whole project on disk.  They prefer to simply
        check out domains from underneath Models to local projects on disk.

4.2     As part of the resolution of [2], we had to move the Fitness Motivation
        Device (FMD) model out of the Models project.  In order to ship the
        model as a sample, we could not have FMD's system level elements mixed
        with Model's system-level elements.

5. Analysis
-----------
5.1     There are a couple options we will explore regarding how best to
        proceed with adding more new models to revision control.  From a high
        level, these options are: put component models underneath the existing
        Models project, create a new repository to put system-level models
        in, add a "Models" module to SVN and put new models underneath there.

5.2     Option 1: Continue using the CVS Models project.
5.2.1   In this option, system-level models (SLMs) will be checked in underneath
        the existing CVS Models project.
5.2.2   Advantages
            1) Requires the least amount of effort as far as creating and
               maintaining another repository
            2) Helps keep all our models in one place
            3) Will not require changes to unit tests
5.2.3   Disadvantages
            1) Eclipse's CVS team interface does not allow a user to add a new
               project as a directory underneath an existing CVS module.  This
               will make adding new models difficult.
            2) The Models project is already considered "too big" by some, this
               approach will continue to make it bigger.

5.3     Option 2: Create a new repository
5.3.1   In this option, we would create a new repository to store xtUML models
        in.
5.3.2   Advantages
            1) Because the models would be checked in as top-level modules,
               there are no issues when using "Share project" to add a model to
               revision control.
            2) Models are easy to check out, there is no "pre-building" of a
               local model required to check out a model from CVS.
            3) Gets away from a monolithic project that grows and grows
            4) We could give access to the repository to AEs without giving
               access to the source repository
5.3.3   Disadvantages
            1) May require changes to unit tests and/or build scripts
            2) Additional repository to maintain

5.3     Option 3: Add new SLMs to a new Models module in SVN
5.3.1   In this option, we would add a new module "Models" to SVN.  We would
        then store xtUML models underneath this.
5.3.2   Advantages
            1) Avoids creating and maintaining a new repository
            2) Unlike CVS, SVN allows clean nesting of new projects under an
               existing module/directory tree that already exists in the
               repository.
5.3.3   Disadvantages
            1) May require changes to unit tests and/or build scripts
            2) SLM projects would have to be checked out individually from
               underneath "Models".  You would not be able to check out the top-
               level "Models" project and be able to edit the models locally.
               While this is not necessarily a problem, it may be confusing.

5.4     Discussion
5.4.1   Because SVN gives more repository management flexibility, I would
        recommend that the new repository created in 5.2 be SVN rather than CVS.
        That being the case, the difference between options 2 and 3 really comes
        down to data organization and management of another repository.
5.4.2   If we put SLMs in a new repository or in SVN, we are spreading out where
        store models.  This is assuming we don't want to move the existing
        domain models that are in the CVS Models module.
5.4.3   I consider it very important that it be as easy as possible to add new
        models to revision control and retrive the models that are there.

6. Work Required
----------------

7. Acceptance Test
------------------
None.

End
---

$Log: i3086.ant,v $
Revision 1.2  2009/01/01 23:12:51  rmulvey
Job:4060
Batch promotion of copyright changes from Review-i4060 and Review-i4060-01.

Revision 1.1.4.1  2008/12/31 16:09:53  rmulvey
Job:4060
This is a batch commit of 2009 copyright changes to branch Review-i4060.  This includes the
report that outlines all changes made (before/after for each line changed).  This report is found here: <cvs>/Documentation/internal/test_results/R2_1_2/i4060/update-copyright-results.txt.

Revision 1.1  2008/01/09 20:55:34  rmulvey
Job:3358
Archives notes from issues completed in the following versions: "R1_5_1, R1_5_2, R1_5_3".

Revision 1.1  2007/08/31 15:41:42  kbrown
Job:3086
Added note analyze our options.

