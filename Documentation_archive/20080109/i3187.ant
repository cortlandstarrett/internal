========================================================================

File:      $RCSfile: i3187.ant,v $
Version:   $Revision: 1.2 $
Modified:  $Date: 2009/01/01 23:12:51 $

(c) Copyright 2007-2009 by Mentor Graphics Corp. All rights reserved.

========================================================================
This document contains information proprietary and confidential to
Mentor Graphics Corp., and is not for external distribution.
========================================================================

BridgePoint Project Analysis Note
Generate unit tests from test matrices

1. Abstract
-----------
This note specifies the requirements for creating a mechanism that allows data
specified in a test matrix to be used to generate unit tests.

2. History
----------

3. Document References
----------------------
[1] Bugzilla item 3187
    http://tucson.wv.mentorg.com//bugzilla/show_bug.cgi?id=3187
[2] Bugzilla item 3172
    http://tucson.wv.mentorg.com//bugzilla/show_bug.cgi?id=3172
[3] Bugzilla item 3186
    http://tucson.wv.mentorg.com//bugzilla/show_bug.cgi?id=3186
[4] Bugzilla item 2876
    http://tucson.wv.mentorg.com//bugzilla/show_bug.cgi?id=2876
[5] Bugzilla item 1066 (Add loader for .xtuml files)
    http://tucson.wv.mentorg.com//bugzilla/show_bug.cgi?id=1066
[6] svn://phoenix.azt.mentorg.com/arch1/products/tiger/doc_repository/trunk/AE/
          presentation/pei_persistence/PEI_persistence.ppt
    Presentation that explains how the parser generator/loader [5] can be used
    to manage PEI data.
    
4. Background
-------------
As part of the 1.5.2 release an increased focus is being placed on unit 
testing [2].  Many new features have been added since version BP v1.4.0 and 
these features were always manually tested, but unit tests were not always 
created for these features.  In developing manual tests, it has been observed
that the best way to assure a new feature is fully tested is often to create a 
test matrix that specifies the various test permutations that need to be 
exercised.  Of course in this scenario each cell in the matrix represents a 
test.  This issue takes the idea of a test matrix to the next-level by using 
data in a test matrix to generate unit tests.  This will initially be used for 
component interface satisfaction testing [3] and copy/paste tests [4].  
However, the goal is that this mechanism can be generic enough to be used to 
generate unit tests for most new features.

5. Analysis
-----------
In order to generate unit tests from a specified test matrix a model of a test 
matrix will be required.  A parser will need to be created that can parse the
test matrix and generate PEI data from it.  This parser will create insert 
statements used to populate the test matrix model.  Once the test matrix model 
is populated with PEI data the model will be run through a test class generator 
that creates the unit tests.  
5.1 Model the test matrix
This model specifies what a test matrix is.  The model is at the core of this 
solution.  There will be a set of data for each feature that unit tests will be
generated for.  This data (PEI data) is specified in the test matrix.

5.2 Capture test matrix data
We have options here.  We already have a parser generator that could be used 
[5, 6].  Optionally, a matrix editor could be created.
5.2.1  Create a parser for test matrices
The required format of this matrix is a design detail that will be specified 
later.  The parser will read the test matrix data and generate insert statements 
used to populate the test matrix model.  A BNF would be specified for what a 
test matrix must look like.

5.2.2 Create a test matrix editor
An editor would walk the user through the process of capturing the data required
by a test matrix.  When the data is captured it would produce the PEI file.

5.3 Create a test class generator
A test matrix generator will be used to generate the unit tests from the 
populated test matrix model.


6. Work Required
----------------
6.1 Model the test matrix
The test matrix model shall have subsystems Test Setup, 
Test Matrix, Test Action, Test Result.
6.1.1 Test Setup 
This subsystem specifies unit test options and runtime options that may differ
between various types of features.  

6.1.2 Test Matrix
This subsystem captures the data required to run the set of tests specified by
the matrix.  Each test specified may have multiple required actions and multiple
expected results, this information is captured here. 

6.1.3 Test Action
An action represents a single call to a hand written method.  An action may 
have parameters which in the generated code will be passed into the action call.

An action may consist of many actions.  In this case the generated code would 
just be a call to a method that calls each of these actions.

An action can have many results checked, or none.

6.1.4 Test Result
Each action may have zero or more expected results.  There will be subtypes 
that represent a graphical result and a database result.  These results are 
captured in this subsystem.

6.2 Create a parser for test matrices
We will take advantage of XML tools to manage editing and parsing of the 
matrix data.  The advantage of using these XML tools is that there are XML
parasers available in Java, and there are XML editors available for the Eclipse 
environment.  Although we do have a parser that could be used, the creation
of the XML data wil be difficult and error prone without a matrix editor.  Using
an XML DTD in combination with an XML Editor will make matrix creation less
error prone.  
6.2.1 Find a suitable XML utility to use as an editor (perhaps XML Buddy)
6.2.2 Create a DTD for the data
6.2.3 Enter data for one of the tests matrices.
6.2.4 Create instructions for future users of this tool.

A parser generator was created for a prior issue [5].  We will take 
advantage of this parser generator to generate a parser that can be used to 
parse the test matrix data and generate insert statements for the test matrix
model.  A presentation was created for a customer interested in managing PEI 
data [6].  This presentation is relevant to this issue.

6.2.1 Setup the parser generator as described in [5 - attachment "Document 
      describing the xtUML loader"].
6.2.2 Create a BNF grammar for the test matrix.  
6.2.3 Modify the parser generator to parse test matrices
6.2.4 Modify the parser to output insert statements for the Test Matrix model.


6.3 Create a test class generator
Create an archetype(s) that is used to process the TestMatrix model and
generate the unit tests.

7. Acceptance Test
------------------
7.1 Use this mechanism to generate unit tests for component interface 
    satisfaction testing [3].
_- Run the parser on the drag and drop test matrix
_- Run the test class generator on the test matrix model
_R Unit tests created
_- Compile unit tests
_R Compilation succeeds
_- Run the generated unit tests
_R Unit tests pass

7.2 Use this mechanism to generate unit tests for cut/copy/paste [4].
_- Run the parser on the cut/copy/paste test matrix
_- Run the test class generator on the test matrix model
_R Unit tests created
_- Compile unit tests
_R Compilation succeeds
_- Run the generated unit tests
_R Unit tests pass

End
---

$Log: i3187.ant,v $
Revision 1.2  2009/01/01 23:12:51  rmulvey
Job:4060
Batch promotion of copyright changes from Review-i4060 and Review-i4060-01.

Revision 1.1.4.1  2008/12/31 16:09:54  rmulvey
Job:4060
This is a batch commit of 2009 copyright changes to branch Review-i4060.  This includes the
report that outlines all changes made (before/after for each line changed).  This report is found here: <cvs>/Documentation/internal/test_results/R2_1_2/i4060/update-copyright-results.txt.

Revision 1.1  2008/01/09 20:55:34  rmulvey
Job:3358
Archives notes from issues completed in the following versions: "R1_5_1, R1_5_2, R1_5_3".

Revision 1.4  2007/10/04 11:51:57  rmulvey
Job:3187
Addressed review observations

Revision 1.3  2007/10/03 19:42:30  rmulvey
Job:3187
Several small changes.

Revision 1.2  2007/10/03 19:40:57  rmulvey
Job:3187
Several small changes.

Revision 1.1  2007/10/03 19:24:37  rmulvey
Job:3187
Introduced analysis note.
