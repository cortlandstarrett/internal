========================================================================

File:      $RCSfile: dts0100650333.dnt,v $
Version:   $Revision: 1095 $
Modified:  $Date: 2011-06-14 13:36:44 -0700 (Tue, 14 Jun 2011) $

(c) Copyright 2007-2010 by Mentor Graphics Corp. All rights reserved.

========================================================================
This document contains information proprietary and confidential to
Mentor Graphics Corp., and is not for external distribution.
========================================================================

BridgePoint Project Design Note
When stepping Verifier stops on event generated and issues "Source not found"
error


1. Abstract
-----------

An error message 'Source not found' is shown to the user upon attempting to 
process an enqueued event during a verifier execution debug session. 

2. History
----------
None

3. Document References
----------------------

[1] ClearQuest DEI dts0100650333
[2] ClearQuest DEI dts0100708948

4. Background
-------------
An enqueued event during verifier execution does not have a locus in an OAL 
activity. It doesn't even have a locus on a diagram. Stepping through an event
generation statement shows "source not found" since no mapping OAL activity 
diagram exists.

This design note proposes alternative solutions to the 'Source Not Found' error
message. 

5. Analysis
-----------
refer to [1]

6. Design
---------
Two design alternatives will be presented in the note to replace 'Source
not Found' error message. Each alternative will be evaluated in terms of 
Cons/Pros and a solution proposal will be recommended. 

6.1 Solution 1: Do nothing

Due to the fact that no locus in an OAL activity exists for an enqueued event, 
the proposal here is to simply stay at the opened editor and do nothing.

The verifier execution debug session will continue behaving normally on 
subsequent non event generation statements.

The Pro(s) here are:
1. The user will not get any misleading errors
2. This is the correct behavior since enqueued events cannot be 
debugged
3. Only highlighting the event and doing nothing is aligned with customer
resolution expectations.

The Con(s) are:
1. The user cannot see any actions towards an input made (step through/over)

 
6.2 Solution 2: Open Specialized State machine diagram

Open the specialized State Machine diagram (ISM or CSM) on which the event is 
declared and focus on the current state of the state model with which event 
is enqueued.

The Pro(s) here are:
1. There is a visible output towards a user action
2. The user can view the anticipated next actions from SM diagram and thus
consistent with being in a debug session
 
The Con(s) are:
1. No actual debugging can take place in the SM diagram.
2. If the event is defined in multiple places, the retrieved focused snapshot
could be incorrect
3. Highlighting an event could be misleading since the targeted SM may have 
moved on to a new state by the time an event far down the list is processed.

An issue [2] was raised to track a potential extension to the current proposed
solution. 

6.3 Recommended Solution 
Based on customer recommendations indicated in [1] and summarized as follows:

1. Frequent pop-up windows causes an annoying distraction from the actual test 
the user intends to run, believing that something went wrong in the test or that 
something is wrong with the model.

2. While single-stepping in Verifier, and in order to indicate that an event is 
about to be delivered (or dequeued) as the next step, highlighting the event 
would be enough for the user.

It would be recommended to go for the solution in section 6.1 since it is not
a distraction to the user as it indicates successful debug flow graphically. It 
additionally clearly highlights the event as indicated in [1].  
   
7. Design Comments
------------------
None

8. Work Required
----------------

The code shall be updated to remove the triggers leading to the call to 

SourceLookupMessages.Source_Lookup_Error

when a source cannot be located. Currently this takes place in 

org.eclipse.debug.core.SourceLookup via a call from 

>com.mentor.nucleus.bp.debug.ui/src/com.mentor.nucleus.bp.debug.ui.locator/
    BPSourceLookupParticipant.java
 
The above file will be updated to handle the case when no element is found in
a silent fashion as opposed to opening up the 'Source Lookup error" dialog.

9. Unit Test
------------

All debug verifier Junit tests ( plug-in : com.mentor.nucleus.bp.debug.ui.test) 
shall be executed

Additionally the use-case in [1] would be executed to verify the resolution.

End
---

$Log: dts0100650333.dnt,v $
Revision 1.3  2010/08/03 06:47:41  gbahig
job:dts0100650333
Committing dnt after applying review minutes comments

Revision 1.2  2010/08/02 09:50:07  gbahig
job:dts0100650333
Commiting dts0100650333 design note second draft.

Revision 1.1  2010/08/01 08:02:09  gbahig
job:dts0100650333
Commiting dts0100650333 design note first draft.

