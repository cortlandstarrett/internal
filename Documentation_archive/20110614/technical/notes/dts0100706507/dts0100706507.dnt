========================================================================

File:      $RCSfile: dts0100706507.dnt,v $
Version:   $Revision: 1094 $
Modified:  $Date: 2011-06-14 12:33:49 -0700 (Tue, 14 Jun 2011) $

(c) Copyright 2007-2010 by Mentor Graphics Corp. All rights reserved.

========================================================================
This document contains information proprietary and confidential to
Mentor Graphics Corp., and is not for external distribution.
========================================================================

BridgePoint Project Design Note
Support message direction indication in diagrams

1. Abstract
-----------
This note describes the changes required to show direction indication on port
symbols in the diagrams.

2. History
----------

3. Document References
----------------------
[1] ClearQuest DEI dts0100706507

4. Background
-------------
SysML uses incoming/outgoing and bidirectional arrows in port symbols. 
Customers have requested that the BridgePoint tool should do the same.

5. Analysis
-----------
The graphics shall support showing an additional decoration within the port
symbol.

The Provision and Requirement getStyle operations shall be modified to return
one of three new styles:

1. BoxArrowIn (incoming message)
2. BoxArrowOut (outgoing message)
3. BoxArrowInOut (incoming/outgoing message)

For the Provision the BoxArrowIn style is used when the formal interface has
only "To Provider" messages.  The BoxArrowOut style is used when the formal
interface has only "From Provider" messages.  And the BoxArrowInOut style is
used when the formal interface has a mixture of the two message types.

For the Requirement the BoxArrowIn style is used when the formal interface has
only "From Provider" messages.  The BoxArrowOut style is used when the formal
interface has only "To Provider" messages.  And the BoxArrowInOut style is used
when the formal interface has a mixture of the two message types.

In both caes, if the formal interface (or there is no formal interface) has no
messages, then the original style is used (FilledSquare).

6. Design
---------
6.1 Add new styles

Three new styles are added to the Style enumerators in both ooaofooa and
ooaofgraphics.  These are the styles outlined in section 5.

6.2 Return new styles depending on interface reference state

The operation, Provision.getStyle() is modified to return the appropriate style
according to section 5.  The operation
Interface Reference.hasEPWithDirection(directionType) was used to determine what
style to return.

The operation, Requirement.getStyle() is modified in the same way as above.

No additional work is required to support this for imported provisions and
requirements as their getStyle() operations simply call the imported elements
operation.

6.3 Support new styles in graphics

The class, ConnectorPolygonDecoration, is modified to support drawing a
secondary decoration.  This is required as the port symbol is not really a
symbol, it is a decoration itself.  So the new decoration for these styles will
be two point arrays, one defining the filled square and the other defining the
arrow required.  Therefore the three new styles have support added in this class
where each case creates the necessary filled square point array and the required
arrow point array.

Additionally, these new styles require rotation support (so that they always
point inward or outward).  To support this the edit part using the decoration
must provide a getCustomDecorationRotation method, which returns a rotation that
correctly draws the arrow to point inward or outward.  This method is created in
the ConnectorEditPart class, and for the three new styles will determine the
appropriate rotation.

7. Design Comments
------------------

8. Work Required
----------------
See design section.

9. Unit Test
------------
_- Draw a component that has 14 provisions
_- Align the provisions so that there are 3 on each side, placing the additional
   two at any free location
_- For each side of the component formalize each provision to an interface that
   adheres to the criteria below:
   
   _- Interface with To Provider message
   _- Interface with From Provider message
   _- Interface with both To and From Provider messages

_- Assign one of the remaining provision to an interface that has no messages
_- Leave the other provision unassigned
_R All arrow indicators are present
_R All arrow indicators point in the right direction
_R The provision formalized to the interface with no messages has no arrow
   indicator
_- Repeat the above test for requirements
_- Repeat the above test for imported provisions
_- Repeat the above test for imported requirements

End
---

$Log: dts0100706507.dnt,v $
Revision 1.2  2010/07/28 16:27:28  tlondon
Job: dts0100706507

Address review minutes

Revision 1.1  2010/07/22 18:39:51  tlondon
Job: dts0100706507

Add design note

