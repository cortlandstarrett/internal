========================================================================

File:      $RCSfile: dts0100622233.int,v $
Version:   $Revision: 1094 $
Modified:  $Date: 2011-06-14 12:33:49 -0700 (Tue, 14 Jun 2011) $

(c) Copyright 2007-2010 by Mentor Graphics Corp. All rights reserved.

========================================================================
This document contains information proprietary and confidential to
Mentor Graphics Corp., and is not for external distribution.
========================================================================

BridgePoint Project Implementation Note
Delayed Problem Marker Job runs constantly (spinning)

1. Abstract
-----------
The DelayedProblemMarker is currently implemented as a Job and that Job is
running every 200ms.  This is raised to refactor this DelayedMarker so it
no longer runs constantly.

2. History
----------

3. Document References
----------------------
[1] ClearQuest DEI dts0100622233
    Delayed Problem Marker Job runs constantly (spinning)
[2] The following are all Bugzilla problem-marker related issues:  
    2458    Dangling reference handler race condition
	2494   	Problem markers are being shown at times when there is no problem
	2511 	Updating xtUML Problem Markers
	2512 	PLCM: Problem marker Job is slow
	2513 	Problem marker error messages too long
	2515 	Delayed problem marker job brings BP to its knees
	2527 	Delayed Problem Marker Job runs constantly (spinning)
	2529 	Problem Marker job drops Resource change events
	2535 	Problem markers only show on elements that are loaded
	2739 	Problem Marker code creates non existent problem reports
	2741 	Another delayed Problem Marker bug
	2767 	Problem Marker tooltip description does not show
	3275 	Unformalizing a domain does not restore problem marker path 
    
4. Background
-------------
The delayed problem marker implementation has been an error cluster in 
BridgePoint since it was initially introduced [2].  Users occasionally see 
error markers when no error is present, but these problems have not had 
good reproducible cases. 

The delayed marker job was introduced with PLCM in order to prevent problems 
with cross component proxy resolution.  When merging model changes between 
branches it is possible to introduce inconsistencies that are only detected when 
a component is loaded.  With the BridgePoint lazy-loading implementation 
model elements are only loaded as they are referenced.  When loading a file that
contains model elements (RGOs) a model file often contains proxies to 
elements that exist in other files (RTOs).  This is called a cross-component 
boundary.   When loading a RTO after a model merge it is possible that the RTO 
doesn't exist or that it exists but in an incompatible format.  It is the job 
of the Delayed marker to catch these types of errors.

The delayed marker does this by managing a queue of MarkerEvents.  The types
of MarkerEvents are:
RelationshipChangeEvent - This event is created and put into the DelayedMarker
                    queue every time a cross component relationship is 
                    hooked-up in a relateAcrossR<x>To(target) function.
                    The archetype that generates the above code determines if
                    the relationship is cross-component and if it is, a
                    call to UmlProblem.handleDanglingReference(rgo, rto)
                    is added to check for a dangling reference.
ProxyCreatedEvent - This event is created in UmlProblem.convertedToProxy() which 
                    is called when a model element is reloaded.  An example
                    of when this happens is when a PersistableModelComponent is 
                    replaced during a team operation.  It is also used during 
                    model import.  During model import just before a model 
                    element is loaded, UmlProblem.startCollectingProxies() is 
                    called and it sets a flag to indicate that proxy collection 
                    should start, this causes the proxies to be cached instead 
                    of tested immediately.  As part of the reload, the model 
                    element is deleted by 
                    PersistableModelComponent.java::deleteME() and 
                    at that time if the element being deleted has any RGOs, then
                    instead of being deleted from the file, 
                    NonRootModelElement.convertToProxy() is called.   The 
                    convertToProxy() function determines if the model element is 
                    being converted to a proxy, and if it is calls 
                    UmlProblem.convertedToProxy() to place the element in the 
                    queue to be tested by the Delayed marker job. 
                    After the load is complete, 
                    UmlProblem.stopCollectingProxies() is called which 
                    iterates over the cached elements, puts them into the 
                    DelayedMarker queue and signals the delayed marker.
                    There are several problems with this implementation, they 
                    shall be fixed in this issue, and are described in 
                    section 6.5.
RemoveMarkerEvent - This type of Marker is always written to the end of the 
                 queue.  It removes an existing problem marker for a specified
                 rgo/rto pair.
RemoveAllEvent - This type of Marker is always written to the end of the 
                 queue.  It removes all problem markers in a specified file.


5. Design
---------
5.1 The Delayed marker job is currently spinning because it is implemented as 
    a job that gets rescheduled every 200ms.  This problem shall be addressed 
    by refactoring the delayed problem marker job to run as a thread instead 
    of a continuously rescheduled job.  The thread will be signaled to run 
    when a transaction completes that contains changes to be verified.  
    
6. Implementation Comments
--------------------------
6.1 In the TransactionManager ModelFileChangeListener ignore changes that are 
    received from the Delayed Marker Thread instead of the Delayed Marker Job.
6.2 Refactor DelayedMarkerJob.java to be a thread instead of a job (it extends
    class Thread instead of Class Job).
6.2.1  Introduce synchronization into the thread to allow the thread
    to wait to be signaled before processing the MarkerEvent elements in its 
    queue.
6.2.2 Before falling into a wait state, the DelayedMarker thread signals any/all
     threads that are blocked waiting for the Delayed marker thread to complete 
     the processing of the queue.
6.3 Places in the code that previously polled the DelayedMarkerJob to determine 
    when it was done processing now call DelayedMarkerJob.waitRunningComplete()
    which waits, blocked, until the DelayedMarker thread completes and signals
    that it is done running.
6.4 Several unit tests turned off the delayed marker job while they were 
    running.  The ability to turn off the delayed marker functionality has been
    removed.
6.5 In UmlProblem.java there is a static member variable  called 
    "collectedProxies".  It is used to delay the  delayed marker from being 
    run until after a PMC has been completely loaded. There are several problems
    with this that shall be addressed by this issue.
6.5.1 The problems with the current implementation are as follows:     
6.5.1.1 The UmlProblem.collectedProxies set is not thread safe. It shall be 
        appropriately synchronized to make it thread safe.
6.5.1.2 UmlProblem.collectedProxies  is a HashSet but it is not used as a Set, 
        it is ALWAYS iterated over from head to tail (using an iterator).  It 
        will be changed to a standard LinkedList.  
6.5.1.3 UmlProblem.collectedProxies grows without bound.  To fix this, in 
        endCollectingProxies() the elements shall be removed from the list when 
        they are done being processed.
 
7. Unit Test
------------
7.1 There are already unit tests in place to exercise the delayed error marker 
    functionality.  This tests (and all unit tests) shall be run and must 
    pass.
7.2 Run the test defined in the description of Bugzilla 2494 [2] and make sure
    it still passes.
    
8. Code Changes
---------------
The branch is R3_0_3-RWM-dts0100622233.

com.mentor.nucleus.bp.compare.test/src/com.mentor.nucleus.bp.compare.test.plcm/
    LocalHistoryTest.java

com.mentor.nucleus.bp.core/src/com.mentor.nucleus.bp.core.common/
    TransactionManager.java
com.mentor.nucleus.bp.core/src/com.mentor.nucleus.bp.core.ui.marker/
    DelayedMarkerJob.java
com.mentor.nucleus.bp.core/src/com.mentor.nucleus.bp.core.ui.marker/
    ProblemModelChangeListener.java
com.mentor.nucleus.bp.core/src/com.mentor.nucleus.bp.core.ui.marker/
    ProxyCreatedEvent.java
com.mentor.nucleus.bp.core/src/com.mentor.nucleus.bp.core.ui.marker/
    RelationshipChangeEvent.java
com.mentor.nucleus.bp.core/src/com.mentor.nucleus.bp.core.ui.marker/
    UmlProblem.java
com.mentor.nucleus.bp.core/arc/create_core_plugin_class.arc

com.mentor.nucleus.bp.core.test/src/com.mentor.nucleus.bp.core.test.cpts/
    CopyPasteSourceDestinationTests.java

com.mentor.nucleus.bp.io.core/arc/gen_import_java.inc

com.mentor.nucleus.bp.io.ecore/src/com.mentor.nucleus.bp.io.ecore.wizards/
    ECoreModelImportWizard.java

com.mentor.nucleus.bp.io.mdl.test/src/com.mentor.nucleus.bp.io.mdl.test/
    ParseOnImportTests.java
com.mentor.nucleus.bp.io.mdl.test/src/com.mentor.nucleus.bp.io.mdl.test.dangle/
    DRBaseTest.java

com.mentor.nucleus.bp.test/src/com/mentor/nucleus/bp/test/common/BaseTest.java

com.mentor.nucleus.bp.ui.explorer/src/
    com.mentor.nucleus.bp.ui.explorer.decorators/DanglingReferenceDecorator.java

com.mentor.nucleus.bp.ui.text.test/src/com/mentor/nucleus/bp/ui/text/
	test/activity/I697OpenActivityEditorFromMarker.java

End
---

$Log: dts0100622233.int,v $
Revision 1.6  2010/01/05 04:29:31  kbrown
job:dts0100644853
Batch commit of copyright change from 2009 to 2010 for BP CVS projects.

Revision 1.5  2009/10/09 14:05:34  rmulvey
job:dts0100622233
Updated note

Revision 1.4  2009/10/05 15:52:07  rmulvey
job:dts0100622233
Updated the review minutes and introduced the test results.

Revision 1.2  2009/10/01 16:46:28  rmulvey
job:dts0100622233
Introduced the note

Revision 1.1  2009/10/01 16:44:32  rmulvey
job:dts0100622233
Introduced the note

Revision 1.1  2009/09/14 18:59:20  rmulvey
job:dts0100614457 dts0100616975
Introduced
