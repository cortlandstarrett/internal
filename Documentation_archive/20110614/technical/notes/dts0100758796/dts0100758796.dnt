========================================================================

File:      $RCSfile: dts0100758796.dnt,v $
Version:   $Revision: 1094 $
Modified:  $Date: 2011-06-14 12:33:49 -0700 (Tue, 14 Jun 2011) $

(c) Copyright 2007-2010 by Mentor Graphics Corp. All rights reserved.

========================================================================
This document contains information proprietary and confidential to
Mentor Graphics Corp., and is not for external distribution.
========================================================================

BridgePoint Project Design Note
Support copy/paste for all elements

1. Abstract
-----------
This note describes the changes required to enable full copy/paste support
across the tool.

2. History
----------

3. Document References
----------------------
[1] ClearQuest DEI dts0100758796

4. Background
-------------
Copy/paste has been introduced in parts, as we find time we add support for the
missing elements.  Initially the tool was configured to prevent showing cut/copy
/paste menu items when the diagram host did not support the paste.  That was
removed from the tool when generic packages were introduced.  This left the user
with a feeling that copy/paste was poorly supported and extremely unstable.

5. Analysis
-----------
All elements in the tool that can be shown graphically or within Model Explorer
shall have copy/paste support enabled when it makes sense.  An example of where
it does not make sense is while selecting a Class State Machine or Instance
State Machine under a class.  To support copy/paste within Model Explorer the
transaction system shall be modified to work globally rather than per System
Model.  With out this undo/redo would be extremely hard to use.

The menu item filtering shall be re-enabled, even though we are planning to
support all cases.

At this time elements that are copied from a specialized package may not be
pasted into generic packages and visa-versa.  The menu items shall be disabled
in these situations.

6. Design
---------
6.1 Add paste* operations for missing elements

The following paste operations are added, each one associates the pasted element
to the new container and provides a unique name if necessary.  Additionally, if
the element being pasted participates in an ordering association it is properly
added to the end of the ordering.  For pasted elements that require a direct
association with a parent in the hierarchy, such associations are setup for the
pasted element and any children under it that require the same associations.  An
example of this is R1405 between EP_PKG and S_SYS. 

Activity.pasteInitialNode(id:unique_id)
Activity.pasteFlowFinalNode(id:unique_id)
Activity.pasteDecisionMergeNode(id:unique_id)
Activity.pasteActivityFinalNode(id:unique_id)
Activity.pasteObjectNode(id:unique_id)
Activity.pasteActivityDiagramAction(id:unique_id)
Activity.pasteAcceptTimeEventAction(id:unique_id)
Activity.pasteAcceptEventAction(id:unique_id)
Activity.pasteSendSignal(id:unique_id)
Activity.pasteActivityPartition(id:unique_id)
Activity.pasteActivityEdge(id:unique_id)
Activity.pasteForkJoinNode(id:unique_id)

Communication.pasteActorParticipant(id:unique_id)
Communication.pasteClassParticipant(id:unique_id)
Communication.pasteClassInstanceParticipant(id:unique_id)
Communication.pasteExternalEntityParticipant(id:unique_id)
Communication.pasteComponentParticipant(id:unique_id)
Communication.pasteFunctionPackageParticipant(id:unique_id)
Communication.pasteSynchronousMessage(id:unique_id)
Communication.pasteAsynchronousMessage(id:unique_id)
Communication.pasteReturnMessage(id:unique_id)
Communication.pasteCommunicationLink(id:unique_id)

Component.pasteComponent(id:unique_id)
Component.pasteInterface(id:unique_id)
Component.pasteUserDataType(id:unique_id)
Component.pasteRequirement(id:unique_id)
Component.pasteProvision(id:unique_id)
Component.pasteComponentReference(id:unique_id)

Component Package.pasteComponent(id:unique_id)
Component Package.pasteRequirement(id:unique_id)
Component Package.pasteComponentReference(id:unique_id)
Component Package.pasteProvision(id:unique_id)

Executable Property.pastePropertyParameter(id:unique_id)

Interface.pasteInterfaceOperation(id:unique_id)
Interface.pasteInterfaceSignal(id:unique_id)

Interface Operation.pastePropertyParameter(id:unique_id)

Interface Signal.pastePropertyParameter(id:unique_id)

Constant Specification.pasteLiteralSymbolicConstant(id:unique_id)

Bridge.pasteBridgeParameter(id:unique_id)

Enumeration Data Type.pasteEnumerator(id:unique_id)

External Entity.pasteBridge(id:unique_id)

Function.pasteFunctionParameter(id:unique_id)

Function Package.pasteFunction(id:unique_id)

Structured Data Type.pasteStructureMember(id:unique_id)

Class Instance Participant.pasteInstanceAttributeValue(id:unique_id)

Class Participant.pasteClassParticipantAttribute(id:unique_id)

Interface Package.pasteInterface(id:unique_id)

Asynchronous Message.pasteMessageArgument(id:unique_id)

Synchronous Message.pasteMessageArgument(id:unique_id)

Sequence.pasteActorParticipant(id:unique_id)
Sequence.pasteClassParticipant(id:unique_id)
Sequence.pasteClassInstanceParticipant(id:unique_id)
Sequence.pasteExternalEntityParticipant(id:unique_id)
Sequence.pasteComponentParticipant(id:unique_id)
Sequence.pasteFunctionPackageParticipant(id:unique_id)
Sequence.pasteSynchronousMessage(id:unique_id)
Sequence.pasteAsynchronousMessage(id:unique_id)
Sequence.pasteReturnMessage(id:unique_id)
Sequence.pasteLifespan(id:unique_id)
Sequence.pasteTimingMark(id:unique_id)
Sequence.pasteTimespan(id:unique_id)

Class State Machine.pasteStateMachineEvent(id:unique_id)

Instance State Machine.pasteStateMachineEvent(id:unique_id)

State Machine Event.pasteStateMachineEventDataItem(id:unique_id)

Model Class.pasteOperation(id:unique_id)

Operation.pasteOperationParameter(id:unique_id)

Use Case Diagram.pasteUseCaseParticipant(id:unique_id)
Use Case Diagram.pasteActorParticipant(id:unique_id)

To support the required export data for events we must add an alternate export
path entry in stream.pei.sql which includes the event data items.

To support the required export data for signals and interface operations we must
add an alternate export path entry to include any parameters.

6.2 Always include supertype in export

Certain modeling situations require the copy operations to be performed against
subtypes, while the copy requires data from the supertype.  One example is
between User Data Type and Data Type across R17.  Where the Data Type supertype
holds naming information.  Previously we had supported this by using the
alternative export path (AEP) approach supported in our persistence
infrastructure.  This works but with the addition of the PE_PE supertype, which
holds visibility data, we would be required to add multiple AEP support.
Regardless of the existence of data in a supertype we really should be including
supertypes in a copy, to maintain a consistent model structure.  Rather than add
the required AEP support, the export archetypes are modified such that all
supertypes are included in the export of a subtype.  This is only used for the
stream export case.

Considering the changes above the Data Type Package.paste* operations are
modified to not use a proxy supertype, as they now will have the real supertype
copied along with them.

Additionally, the SM_TXN as supertype for a creation transaction AEP is made
redundant and therefore removed.

During a paste we need to know if certain graphical elements are part of the
copy rather than a contained child.  This is used to determine which Graphical
Element instances shall be processed by the CanvasPasteAction.  The main
approach for determining if an element is part of the copy is to see if it's
parent is either null or a proxy.  In the cases mentioned above the parent is
the supertype, and therefore will not be null or a proxy.  To support this the
ModelStreamProcessor class is modified to walk the parent child hierarchy until
a supertype is not found.  To support determining whether or not the parent is
a supertype a new archetype is added, generate_supertype_subtype_util.arc.  This
archetype creates a new utility class that has one method at this time,
isSupertypeOf(NonRootModelElement child, NonRootModelElement parent).  The body
of the method checks the class of the parent and returns true if the class is a
subtype.

In addition to the above supertype parent checks, messages also have a
non-standard parent-child association.  Their containment is via the directed to
interaction element if present.  To support this case the interaction
participant is checked for null to determine if the message is part of the
export.

6.2 Enable copy/paste support in Model Explorer

The following classes are added to ui.explorer:

ExplorerCopyAction extends com.mentor.nucleus.bp.core.ui.CopyAction
ExplorerCutAction extends com.mentor.nucleus.bp.core.ui.CutAction
ExplorerPasteAction extends com.mentor.nucleus.bp.core.ui.PasteAction

The ExplorerCopyAction overrides the following methods:

getElementsToBeCopied(boolean includeGraphics) - returns the current selection
getTransactionManager() - returns the new singleton instance of
                          TransactionManager
isEnabled() - returns true if all in the selection are copiable, which means
              the current parent types have the necessary paste* operations.

The ExplorerCutAction overrides the same methods, and implements them in the
same way.  The exception is the isEnabled() method additionally checks that the
selection can be deleted.

The ExplorerPasteAction overrides the following methods:

getDestinations() - returns the selected elements at paste time
getTransactionManager() - returns the new singleton instance of
                          TransactionManager
runSubtypeProcessing() - does nothing at this time
isEnabled() - asks the supertype if the clipboard contents are pastable, then
              checks that all destinations provide the necessary paste*
              operations

The create_explorer_view.inc archetype is modified to instantiate these new
actions, and enable them in the context menu and action bar.

6.3 Support undo/redo in Model Explorer

In order to support undo/redo in Model Explorer the transaction list maintained
must be global rather than at the System Model level.

The instantiation of a TransactionManager is removed from the
NonRootModelElement class.  The getTransactionManager() method is modified to
return a new singleton instance of the TransactionManager class.

The TransactionManager class has a new method added, getSingleton().  This
method lazily creates the TransactionManager instance if it has not yet been
created, then returns that instance.  The static methods for adding and removing
listeners to/from all TransactionManager instances are removed as there will now
only be one.  All locations through out the tool that access a
TransactionManager are modified to use the new getSingleton() method.  All
places that previously added or removed listeners from all TransactionManager
instances are changed to add the listener to the singleton instance.

The undo/redo actions defined in TransactionManager are added to the context
menu and action bar for Model Explorer.

6.4 Support multiple target pasting

With the addition of paste support in Model Explorer it would be nice to paste
into multiple targets.

The PasteAction is modified so that the abstract method, getDestinationElement()
, is renamed to getDestinations().  The ExplorerPasteAction class will return
the current selection as stated above.  The CanvasPasteAction class will return
the current graphical selection adapted to an Ooaofooa selection.  A new map is
created that holds the multiple instances of ModelStreamProcessor used for each
destination.  This allows the subtype classes to have access to each importer
used per destination.

After these changes it will be possible to paste a copied selection into all
selected elements that support pasting the copied elements.  For instance you
will now be able to copy an operation and select three classes for pasting.
Each one will have a copy of the operation added just as if paste was executed
for each individual element.

6.5  Support missing resolution

The following operations are added that support resolution to a model class by
name and key letter, then key letter, and failing that name alone.

Class Instance Participant.resolveModelClass()
Class Participant.resolveModelClass()

The Component Participant.resolveComponent operation is added to resolve the
assigned to component by name

The External Entity Participant.resolveExternalEntity() operation is added to
support resolution by name and key letters, then key letter, and failing that
name alone.

The classes, Function Package Participant and Package Participant, have
resolution operations added to resolve by name.

6.6 Add support for reconciliation under generic packages

New reconciler definitions are added to the ui.graphics/plugin.xml.  These have
corresponding count and getId methods added in the ooaofooa.  This is for all
possible shape types under the Package diagram.

6.7 Prevent copy/paste to/from specialized package and generic package

To prevent the need for further testing we have made the decision to not support
copy/paste to and from a specialized package and generic package.  The
CopyCutAction in core is modified to insert a comment in the stream data which
can be used to determine if the source comes from a specialized package or a
generic one.

In the case where the copy is coming from an old version of the tool there will
be no header in the stream.  The code currently treats that as coming from a
specialized package.  This is correct as older versions did not truly support
generic packages.

In the PasteAction under core we scan the clipboard contents for this tag, and
prevent the enablement if the destination does not match.  It currently looks
for the existence of the generic package tag, and only if it exists does it
consider the copy as generic package related.

6.8 Replace lengthy generated writeCollectedProxies with reflective calls

The various export classes that are generated are so large that it is time
consuming to even browse them.  During this work it was noticed that one area
in the stream export class could be shrunk by using the java reflection API.
This is the generated writeCollectedProxies() method.  It now will use
reflection to call the write_*_proxy method for the current proxy being
processed.

7. Design Comments
------------------

8. Work Required
----------------
Described fully in the design section.

9. Unit Test
------------
9.1 Test new copy/paste support
- For copy/paste a matrix is generated in core.test/matrices/generated as
                                    CopyPasteSourceDestinationTestMatrixFull.txt
_- For each degree of freedom the following is tested
  _- Copy source element (from each parent type)
  _- Paste source element into destination (from each parent type)
  _R All children of the copied element are fully resolved
  _R There are no structural differences between the source and the pasted
     element
  _R All that require a unique name have their name updated accordingly

9.2 Test copy/paste in Model Explorer

- This will be tested in 9.1

9.3 Test undo/redo in model explorer

_- Select two classes from different systems in model explorer
_- Delete the selection
_- Right click in model explorer
_R The undo menu item is available
_- Select undo
_R The two elements are brought back
_- Right click in model explorer
_R The redo menu item is available
_- Select redo
_R The two elements are again deleted
_- Open a graphical editor from a third system
_- Right click
_R The undo menu item is available
_- Select undo
_R The two classes are once again brought back

9.4 Test multiple target pasting

_- In model explorer select an attribute and copy
_- In model explorer select three classes and a component
_- Right click
_R The paste menu item is not present
_- Unselect the component
_- Right click
_R The paste menu item is present
_- Execute paste
_R The three selected classes all have the new attribute present
_- Right click and select undo
_R The three selected classes have the new attribute removed
_- Open a class diagram and right click the background
_R The paste item is not available
_- Select some classes in the diagram and right click
_R The paste item is available
_- Execute paste
_R The classes in the diagram have the new attribute pasted

9.5 Test missing resolution methods

- This will be tested in 9.1

9.6 Test reconciler in generic package

_- Create a new package
_- Create every possible shape under the package diagram
_- In model explorer copy all of the package's children
_- In model explorer paste all of the children into a new package
_R All children have a symbol added on the new package's diagram

9.7 Test specialized to generic copy/paste

- This will be tested in 9.1

End
---

$Log: dts0100758796.dnt,v $
Revision 1.2  2011/05/05 17:51:22  tlondon
Job: dts0100758796

Address review minutes

Revision 1.1  2011/05/03 19:59:23  tlondon
Job: dts0100758796

Introduce design note

