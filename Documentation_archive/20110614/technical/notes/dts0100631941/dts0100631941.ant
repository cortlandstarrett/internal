========================================================================

File:      $RCSfile: dts0100631941.ant,v $
Version:   $Revision: 1094 $
Modified:  $Date: 2011-06-14 12:33:49 -0700 (Tue, 14 Jun 2011) $

(c) Copyright 2007-2010 by Mentor Graphics Corp. All rights reserved.

========================================================================
This document contains information proprietary and confidential to
Mentor Graphics Corp., and is not for external distribution.
========================================================================

BridgePoint Project Analysis Note
Migrate away from specialized packages


1. Abstract
-----------
This note describes how BridgePoint will stop enforcing the use of single
purpose, specialized packages.

2. History
----------


3. Document References
----------------------
[1]  ClearQuest DEI dts0100631941 - Migrate away from specialized packages
[2]  Shlaer-Mellor Method
[3]  DEI dts0100631029 - Remove need to formalize a component to a domain
[4]  ClearQuest DEI dts0100631408 - Support Package namespacing
[5]  ClearQuest DEI dts0100632977 - Consult user base on potential meta-model
     changes
[6]  ClearQuest DEI dts0100632982 - Update Verifier to work with proposed meta-
     model upgrades
[7]  ClearQuest DEI dts0100632984 - Update MC's to work with proposed meta-model
     change
[8]  ClearQuest DEI dts0100632985 - Update Docgen to work with proposed meta-
     model upgrades
[9]  ClearQuest DEI dts0100632987 - Diagram color and font settings with
     upgraded metamodel
[10] ClearQuest DEI dts0100632990 - Update MC-Java to work with proposed meta-
     model changes.
[11] ClearQuest DEI dts0100633004 - Create migration guide.

4. Background
-------------
The current BridgePoint tool inherited specialized package behavior from the
previous implementation. The ported meta-model used the strict system
organization specified by the Shlaer-Mellor method[2] the tool was originally
designed to support. This strict organization works very well, but is at
variance with the much less prescriptive approach provided by UML 2.0.

Consequently, new users with a standard UML training background find it
difficult and confusing to use the BridgePoint tool. In this note, we will
discuss how we can make BridgePoint behave as users in this category would
expect.

5. Analysis
-----------
First of all, it must be stated that this is not a trivial change. It also very
much affects several other development jobs currently in progress[3,4]. Note
that this change obviates/includes the work needed for [3] and greatly
simplifies the work for[4].

5.1 Meta-model
Summary: We perform a large rework, which results in very significant
simplification of the meta-model.

The new generic unit of organization will be the existing meta-model class,
Package (EP_PKG). It will have a single association with a new class,
Packageable Element. This class will contain generic visibility support for[4].
All model elements previously associated with a specialized organizing element
will become a subtype of this class.

5.1.1 Eliminate specific organizing meta-model classes from the hierarchy
One proposal is that we achieve generic package behavior by completely reworking
the higher levels of the BridgePoint meta-model. This rework will remove all the
specialized package organizing classes, such as Domain, Subsystem, Component
Package, Data Type Package, Activity Package etc. This will be replaced by a
single generic package organization where any package may contain any set of
elements.

5.1.2 Replace the existing hierarchy
It is also possible to implement this change by adding additional alternative
hierarchical associations into the meta-model. Unfortunately, this significantly
complicates the tool at a time when complexity has grown significantly. Adding
weight to the argument against this course of action is the observation that the
overly complex hierarchy currently in place is arguably the cause of an error
cluster. However, to set against this, completely removing the original meta-
model classes causes complications for data upgrade and backwards compatible
model transformation, since the old meta-model, or at least an implementation of
it that can coexist with the modified one, will have to be kept around for those
purposes.

With this approach, the old organizing meta-model classes are left in-place, but
the associations with their owned elements are systematically renumbered. This
ensures that no existing OAL or hand written code will parse/compile, but it
allows a backwards trace that should even support some upgrade automation.

5.1.3 Recommendation
On balance, most of the simplification benefits are still reaped by option
[5.1.2], the extra legacy classes will never be loaded when using the tool with 
upgraded models and model compilers.

With both of the approaches above, the model population is significantly altered
and simplified. This not only has implications for the tool itself, but also for
proprietary and customer model compilers. If this modification is made as
proposed, customers must be given time to plan and execute rework to their model
compilers. A document will be prepared to explain to customers what will happen
to ease this process. An issue is raised to track the progress of this
consultation work[5]. 

The good news for model compiler writers is that this reorganization affects
only the higher levels of the model. This means that the detailed, intricate and
difficult to get right parts of the model compiler are largely unaffected. The
required modifications are largely mechanical.


5.2 User Interface
Note that the changes specified here could either be modeled and generated or we
could look at reusing the GEF palette classes.

5.2.1 Palettes
The consequences of the meta-model change proposed above is that we lose the
large number of specialized 'New Package' tool buttons currently in the diagram
user interface and replace them with just one. The down side of this change is
that every diagram can now have any symbol added to it. If we took no other
action, this would result in a very large array of buttons which would require
an unreasonable amount of visual acuity and mouse accuracy for the user. We will
address this by providing user modifiable palettes of tool buttons. There will
be one palette for each diagram tool button set we currently provide. The
palettes will each have a name and a summary icon to make the choice easier for
the user. There will be nothing to stop a user switching palettes in the middle
of drawing a diagram. The consequence of such a palette change will merely be
a heterogeneous diagram containing symbols not previously intermixable.

Each diagram shall persist the currently selected palette so that on reopening,
the diagram is ready to be worked on using the same tool set it presented when
it was last closed.

Users that have a preference for unusual combinations of symbols will be
supported by allowing the palettes to be customizable. The creation of new
palettes will also be supported, as will the removal of unwanted palettes. This
customization will be done through the BridgePoint Preferences pages.

The palette for a new diagram will be the last selected palette.

5.2.2 New > menu
This is currently being reworked to allow the user to create new symbols by
right clicking in Model Explorer or on the diagram background[5]. The population
of these menus can be taken directly from the current palette data, since any
enabled tool indicates a symbol that can be drawn. If a symbol can be drawn, it
can be created with a one-click New menu selection. Tools not in the current
palette shall be accessible through cascaded menus shown after the current
palette tools. The cascaded menus shall be named after the name of the palette
in which they appear. The New menu requirements are tracked under a separate
issue[?] and are not addressed further in this note.


5.3 Data Upgrade
Significant data upgrade work will need to be performed on the user models. It
is likely this can be done automatically under the hood, improving the user
experience. Note that, although this is a significant reorganization of the
tool, the file level organization is not expected to change at this time.
Indeed, the files will continue to contain much the same information, just the
organizing class instances will be different, with all specialized types being
replaced with an instance of Package (EP_PKG). An issue is raised to track the
creation of a migration guide[11].

5.4 Migration guide
A migration guide will be created for the release in which these changes are
deployed. This requirement is tracked under a separate issue[?].

6. Work Required
----------------
The approach documented in 5.1.1 is selected for this work. However, we wish to
proceed in small easily managed steps that will result in a working tool that
can be promoted at each step. The abstraction is that until Phase 4 below, the
tool will be compatible with both old and new model database formats.


6.1 Phase 1 - Provide the ability to create all symbols on a generic package
6.1.1 Meta-model
6.1.1.1 New Packageable Element Subsystem
- Add new Packageable Element class
- Add as subtypes all existing metamodel elements that are currently directly
  connected with a specialized package.
- This can be done incrementally, it is not necessary to implement all elements
  at once. We will start with some informal diagrams; Use Case and Activity.
- Upgrade OAL with alternate traversals

6.1.1.2 Element Packaging Subsystem
- Retain the classes Package (EP_PKG) and Package In Package (EP_EP).
- Add Packageable Element imported from the subsystem created above[6.1.1.1].
- Associate it *..1 with Package.
- Add a 'new' operation (or operations) to Package to create the elements.

6.1.2 User Interface
- Extend the Generic Package diagram type to include symbols for all the
  elements added as subtypes above[6.1.1.1].

6.1.3 Persist Generic package models
- Extend Persistence Hierarchy data in io.mdl so that models created are
  persisted.
- There may be some hand written changes needed to support the new alternate
  traversals. Also, some dedicated archetypes may need to be adjusted for the
  same purpose.

Iterate these steps [6.1.1, 6.1.2 and 6.1.3] until all model elements are
covered.


6.2 Phase 2 - Productizing
6.2.1 Upgrade tool
- Develop a one time model upgrade tool that will read existing models at all
  revision levels and update the workspace to a generic package configuration.
  It is also time to create a new persistence version code.

6.2.2 User Interface
6.2.2.1 Remodel the Canvas::Tools subsystem to include the concept of a palette.

6.2.2.2 Provide palette defaults
These need to be derived from the existing diagram types. They need to be user
modifiable (at a tools administrator level) and sharable across a team somehow.
Eclipse has infrastructure for doing this that we should reuse.

6.2.2.3 Return palettes to the default
Since the user can customize the palettes, it is possible to get BridgePoint
into an unusable state. To quickly allow the user to recover from this, a
Reset to Defaults option will be provided in the BridgePoint preferences.

6.2.2.4 Persist palette settings
This work consists of two parts:-

6.2.2.4.1 Persist the tools selected for each of the palettes, this work
includes support for the addition and removal of whole palettes.

6.2.2.4.2 Persist the currently selected palette for a given diagram when it
and/or the tool is closed.

6.2.2.5 Modify the Colors and Fonts preferences
We could have all diagrams be the same color, but this seems like taking away
functionality that users may have become accustomed to. An issue is raised to
track this work separately [9].

6.2.3 Translation and Execution
- Upgrade Verifier to work with generic package models. Verifier is coupled to
  the Domain metamodel class. Alternate traversals will be needed here.
- Upgrade model compilers to work with generic package models.
- Prepare end user migration guides[5, 11].


6.3 Phase 3 - Test
- Dependency on model upgrade[6.2.1].
- Run all existing tests and ensure that they pass with generic package models.
- Lots of hand written test code will need to be modified with alternate
  traversals here.


6.4 Phase 4 - Clean up
- Before removal of the classes specified below, make a note of all associations
  that were made to these elements for later use.

6.4.1 Metamodel
6.4.1.1 Remove deprecated metamodel elements
- Remove Specification Package and all its subtypes.

6.4.1.2 Domain, Subsystem and State Model subsystems
- Remove Subsystem, Domain and State Model classes.

By this stage, every association that was previously made with any of the
specified organization classes is now replaced by traversals across the subtype
association with the Packageable Element class and across the new association
between Packageable Element and Package.

6.4.1.3 Rework OAL
- Deal with the fall out from the previous changes, by removing all OAL to
  relate, unrelate and traverse the old associations. Leave only the new OAL
  introduced above[6.1].
- Repeat following the same policy for hand written code.
- When this step is complete, there will be no OAL code that refers to the old
  associations.
- When the whole job is complete, only data upgrade and backwards compatible
  model transformation code will access the old associations.

6.4.2 Data upgrade
Because we are deleting the existing meta-model organizing classes [6.4.1], we
will need to revisit the data upgrade mechanism. At a minimum, it must be re-
tested.

6.4.3 Rework MC-Java
We will want to upgrade MC-Java to use the new meta-model. An issue is raised to
track this work[10].


7. Acceptance Test
------------------
TBD.

End
---

$Log: dts0100631941.ant,v $
Revision 1.9  2010/01/05 04:31:44  kbrown
job:dts0100644853
Batch commit of copyright change from 2009 to 2010 for BP CVS projects.

Revision 1.8  2009/12/11 12:12:02  campbell
Job: dts0100631941
Completed rework for baby step strategy.

Revision 1.7  2009/12/10 12:30:36  campbell
Job: dts0100631941
Added comment to Work Required section.

Revision 1.6  2009/12/10 12:24:54  campbell
Job: dts0100631941
Rework to reflect baby step strategy.

Revision 1.5  2009/11/09 12:45:33  campbell
Job: dts0100631941
Address review observations.

Revision 1.4  2009/11/04 15:27:39  campbell
Job: dts0100631941
Introduce Packageable Element class.

Revision 1.3  2009/11/04 13:05:53  campbell
Job: dts0100631941
Check in work in progress.

Revision 1.2  2009/11/04 12:27:43  campbell
Job: dts0100631941
Check in work in progress.

Revision 1.1  2009/11/04 10:58:52  campbell
Job: dts0100631941
Introduced.

