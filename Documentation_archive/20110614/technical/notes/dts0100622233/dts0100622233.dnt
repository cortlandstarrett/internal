========================================================================

File:      $RCSfile: dts0100622233.dnt,v $
Version:   $Revision: 1094 $
Modified:  $Date: 2011-06-14 12:33:49 -0700 (Tue, 14 Jun 2011) $

(c) Copyright 2007-2010 by Mentor Graphics Corp. All rights reserved.

========================================================================
This document contains information proprietary and confidential to
Mentor Graphics Corp., and is not for external distribution.
========================================================================

BridgePoint Project Design Note
Enhance problem marker behavior

1. Abstract
-----------
This note describes changes that are required to enhance the behavior of the
problem marker code.

2. History
----------

3. Document References
----------------------
[1] ClearQuest DEI dts0100622233

4. Background
-------------
The problem marker code has had many issues since its introduction.  One of
which has been the inefficient manner of its design.  During its early stages it
would not properly respond to all model change events, and would often show the
problem markers late.  To resolve this it was changed to an eclipse Job that
rescheduled itself every 200ms.  This is far from efficient. 

5. Analysis
-----------
The problem marker job should not have to reschedule itself.  It shall instead
be scheduled when the first event is received, then run as long as events are
added to its queue.  It shall only be scheduled again if an event is received
after queue processing has occurred.

To address the issue where markers are displayed long after they have been
determined necessary, the model explorer decorator shall be disabled until all
events have been processed.  This shall allow the appearance of all markers to
occur at the same time.

6. Design
---------
6.1 Modify problem marker job

The DelayedMarkerJob class is modified to override the shouldSchedule() method,
which previously always returned true.  The overridden method now returns true
only if there is no current job that is still processing the queue.

The DelayedMarkerJob class is modified such that the eclipse job is run with 
decorator priority.  This is the lowest priority level.

6.2 Disable problem marker updates until processing is complete

The class,
com.mentor.nucleus.bp.ui.explorer.decorators.DanglingReferenceDecorator, is
modified to call a new method in CorePlugin that determines if decorations 
should be disabled.  The archetype that generates the CorePlugin class is
modified to add global support for disabling decoration updates.

The DelayedMarkerJob class is modified to disable decoration updates until it
has completed its event queue.  The event queue is processed within the run
method of the job, within a while loop.  After this, but before leaving the run
method we call upon eclipse to refresh the decorations.


7. Design Comments
------------------


8. Work Required
----------------
All work required was described in the design section.

9. Unit Test
------------
_- Run all existing tests
_R All tests pass

End
---

$Log: dts0100622233.dnt,v $
Revision 1.3  2010/11/08 20:32:34  tlondon
Job: dts0100622233

Address review minutes

Revision 1.2  2010/11/08 20:02:59  tlondon
Job: dts0100622233

Add note about decoration disablement.

Revision 1.1  2010/11/08 18:21:12  tlondon
Job: dts0100622233

Introduce note

