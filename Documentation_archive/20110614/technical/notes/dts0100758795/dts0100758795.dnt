========================================================================

File:      $RCSfile: dts0100758795.dnt,v $
Version:   $Revision: 1094 $
Modified:  $Date: 2011-06-14 12:33:49 -0700 (Tue, 14 Jun 2011) $

(c) Copyright 2007-2010 by Mentor Graphics Corp. All rights reserved.

========================================================================
This document contains information proprietary and confidential to
Mentor Graphics Corp., and is not for external distribution.
========================================================================

BridgePoint Project Design Note
Support visibility rules for interaction formalization under generic packages

1. Abstract
-----------
This note describes the work required to enforce visibility rules during
formalization of interaction elements within generic packages.

2. History
----------

3. Document References
----------------------
[1] ClearQuest DEI dts0100758795

4. Background
-------------
Support for formalizing interaction elements never considers visibility rules.

5. Analysis
-----------
The tool shall allow the user to decide whether or not visibility is enforced
during the selection of formal elements.  There will be some users that want to
be able to draw interaction diagrams outside of the name space for the formal
elements.

The element chooser shall be used to select the formal elements.  A check box
shall be added that enables visibility filtering.  When checked only visible
elements shall be displayed.

6. Design
---------

6.1 Honor visibility rules when presenting the user with available formal
    elements

The element chooser shall be modified to support a check box that enables
visibility filtering.  When checked, elements that are not visible shall be
filtered from the element list.  The check box state shall be persisted across
invocations of the chooser dialog.

When the check box mentioned above is not checked the element chooser shall be
populated with all elements under the current system.  This includes elements
that are under components and elements that are not visible.

The generic package CME functions shall be modified to use the element chooser.
The existing formalize CME functions (for specialized packages) shall remain
unchanged.  The message and communication link CMEs shall remain unchanged at
this time for consistency.

Note that the support added here (the checkbox) is only used for the interaction
element formalization at this time.  Imported class assignment and component
reference assignment do not require a visibility check box as they always need
to consider visibility.

6.2 Support packages directly under the system

Currently, packages that are created directly under a system are not subtypes of
PE_PE.  Due to this the current collection mechanism excludes all of them.

Data upgrade code shall be added that creates the necessary PE_PE and associates
it with the system level package.

During creation of a package at the system level, a PE_PE instance shall be
created and associated with the package. 

6.3 Support getGlobal() when selecting a set of elements by id

The formalization support for messages against state machine elements requires
a selection of events from both the ISM and ASM state machines.  Due to the way
these associations are modeled, there is not one single traversal that can
return all events for both machine types.  The wizard generation infrastructure
only supports a single traversal.  The existing code uses a select any from
instances of, passing in the ISM and ASM ids.  Then uses the set of both
machines to select all events in one traversal.

The current way will not work for generic packages as the machines may not be in
the same model root as the selected element.  MC-Java is modified to support the
getGlobal() code generation when the following statement is present:

select any element from instances of OBJ_LETT
                           where (selected.id == id or selected.id == other_id);

and

select many elements from instances of OBJ_LETT
						   where (selected.id == id or selected.id == other_id);

For the any case, the first id is used and if nothing is returned the second id
is tested.  For the many case a list is built for all elements matching both
ids.

6.4 Support multiple selection for setType and setReturnType

To increase the ease of use for setting types, the tool is modified to support
multiple selections of the same element type for type setting.  The data
in context_menu.pei.sql is modified to specify * instead of 1 for the supported
selection count of setType and setReturnType.  In addition, component assignment
is modified to take advantage of this behavior.

The funtion_body.inc archetype is modified to check for the * value, and if
present generate code that will set the chosen type for the entire selection.

6.5 Fix reflexive connection issues

During testing it was noticed that while finishing a reflexive connection the
end points were being moved to the corners of the owning symbol.  This was due
to the fact that reflexive associations have the necessary cropping already
handled.  In the CreateConnectionCommand class we were re-cropping for certain
connectors, where we did not need to for the reflexive case.  A new test is
added that prevents this cropping if the connector ends and starts on the same
owner.

It was additionally noted that the reflexive connectors were not squared in some
situations.  The situation is where the start and end point are on adjacent
sides, but the two outer bend points created do not intersect the shape.  The
code used to route around the shape therefore does not modify the connection.
Additional code is added that checks for this case, when found the code will
insert a bend point that allows the routing to occur around the shape as long as
the connection end points are on adjacent sides of the shape.

7. Design Comments
------------------

8. Work Required
----------------
8.1 Honor visibility rules when presenting the user with available formal
    elements
    
A new check box shall be added in ElementSelectionFlatView.java.  This check box
shall be set on start up using the last state stored in the dialog settings.
The state (checked, unchecked) shall be applied to the list at start up.
Additionally, when the user checks/unchecks the box the list shall have the
filter applied/removed.

The ElementSelectionDialog and ElementSelectionFlatView classes have a new
constructor created.  The new constructor takes a new boolean parameter and a
new Package_c parameter.  The boolean parameter indicates that the visibility
check box shall be shown.  The Package_c parameter is used as the originating
package for the visibility collection mechanism.  The context_menu model is
modified to add a new parameter for the CME class.  This attribute allows us to
configure a CME definition to include the visibility filter check box.  The
generic package formalization CMEs are modified to set this new attribute to
true.

The ElementSelectionViewClass.applyFilters() method is modified to filter any
non visible elements (if the box is checked) after normal name filtering has
occurred.

The various actionFilter operations for the interaction elements are modified to
call a new bridge, getElementCountInSystem.  The native implementation for the
bridge finds all elements of the given type that are under a system.

It was noticed that there were duplicate elements under the palette for generic
packages.  These are mostly the message tools for interaction elements.  The
following tools are extracted from their duplicated locations into a new tool
group named Interaction:

Actor
Component
Instance
External Entity
Package Participant
Class
Synchronous Message
Asynchronous Message
Return Message

To determine when a message participates in a communication (free floating) vs
when it is part of a sequence, a new attribute is added to the Message class.
The attribute is set during model load by looking at the graphical data to
determine if the connector is free floating. It is also set during creation of
the message.  The attribute is not persistent.  To set the attribute value at
load time a new method is added to ImportHelper and is called during model load.

The .cvsignore files under core.ui.action and core.ui are modified to reconcile
against the newly generated classes.  Old wizards are removed and new element
chooser actions are added.

8.2 Support packages directly under the system

Work described in design section.

8.3 Support getGlobal() when selecting a set of elements by id

Work described in design section.

8.4 Support multiple selection for setType and setReturnType

Work described in design section.

8.5 Fix reflexive connection issues

Work described in design section.

9. Unit Test
------------
9.1 Test visibility filter in element chooser

_- Create a root package
_- Create a nested package under the root
_- Set the visibility of the nested package to private
_- Create another nested package and create a package participant under it
_- Select the package participant, right click and choose Formalize...
_R The first nested package is listed in the element chooser
_R The other nested package is listed in the element chooser
_R The root package is listed in the element chooser
_- Check the visibility filter box
_R The first nested package is not listed in the element chooser
_R The root package is listed in the element chooser
_- Uncheck the visibility filter box
_R The first nested package is listed in the element chooser
_R The other nested package is listed in the element chooser
_R The root package is listed in the element chooser

9.2 Test formalization

- The existing tests will cover all tests needed, but shall be converted to test
  against the element chooser.  They currently work against the old wizard code.

9.3 Test multiple selection type setting

_- Repeat the following for each element below
_- Select many elements
_- Right click
_R The Set Return Type... , Set Type..., or Assign Component/Class menu item is
   present
  _- Bridge operation
  _- Bridge parameter
  _- Interface operation
  _- Interface operation parameter
  _- Interface signal parameter
  _- Class operation
  _- Class operation parameter
  _- Function
  _- Function parameter
  _- Structure member
  _- Event data item
  _- Attribute
  _- User Data type
  _- Literal constant
  _- Assign class
  _- Assign component
_- Execute the menu item
_R The chooser dialog is shown
_- Choose a type and click OK
_R All elements have that type set/assigned
_- Undo the type setting
_R All elements have their original type set

9.4 Test reflexive connectors

_- Draw a reflexive connector such that both end points are on the same side
_R The resultant connector is left where it was during creation (end points were
   not moved on mouse up)
_- Start a reflexive association on one side of the owner shape
_- Drag the mouse near an adjacent side
_R The connector is wrapped around the owner shape, with 3 bend points
_- Draw a reflexive message on a lifeline
_R The connector bend points are all on the same side of the lifeline
 
End
---

$Log: dts0100758795.dnt,v $
Revision 1.3  2011/05/10 21:30:04  tlondon
Job: dts0100758795

Address review minutes

Revision 1.2  2011/05/02 17:51:45  tlondon
Job: dts0100758795

Update design note

Revision 1.1  2011/03/29 18:37:05  tlondon
Job: dts0100758795

Introduce design note

