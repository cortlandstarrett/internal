========================================================================

File:      $RCSfile: dts0100731259.ant,v $
Version:   $Revision: 1094 $
Modified:  $Date: 2011-06-14 12:33:49 -0700 (Tue, 14 Jun 2011) $

(c) Copyright 2007-2010 by Mentor Graphics Corp. All rights reserved.

========================================================================
This document contains information proprietary and confidential to
Mentor Graphics Corp., and is not for external distribution.
========================================================================

BridgePoint Project Analysis Note
Enhance sequence diagram support

1. Abstract
-----------
This note addresses some limitations in the way we currently support sequence
diagram drawing.

2. History
----------
  final - dts0100731259-01.rvm

3. Document References
----------------------
[1] ClearQuest DEI dts0100731259 - Enhance sequence diagram support.
[2] ClearQuest DEI dts0100709457 - Support notes.
[3] ClearQuest DEI dts0100544402 - [BZ 3618] Request to add generation of
    sequences in Verifier runtime.
[4] ClearQuest DEI dts0100631941 - Migrate away from specialized packages.
[5] ClearQuest DEI dts0100709456 - Support UML 2 swim lanes.
[6] ClearQuest DEI dts0100550925 - Request for Drag and Drop support in Bridge-
    Point Model Builder.
[7] ClearQuest DEI dts0100710482 - Make placing a component reference a one-
    step, drag-and-drop procedure.

4. Background
-------------
A customer has highlighted some limitations in the way we support sequence
diagram drawing. Specifically, these are in in the areas of copy and paste,
timing marks, formalization, interdiagram references and loop notation.

5. Analysis
-----------
The customer identified the following limitations that made the diagrams
unusable for their purposes:

5.1  Cut & paste required in the Explorer View, Use case: Create an identical
     copy of a sequence diagram and cut and paste by selecting the required
     symbols in the diagram itself. Use case: the user wishes to reuse a small
     subset of a diagram.

5.2  Drag and drop sequence diagrams in the Model Explorer window to re-organize
     hierarchy. Use case: The user wishes to reorganize their sequence diagrams
     into a new folder structure. They are able to select a range of diagrams
     in the Model Explorer and drag them into a new position in the folder
     hierarchy. The graphics in the move source and destination diagrams are
     automatically adjusted into line with the change.

5.3  Timing annotations are a three step process, should be a 1 step process.
     Use case: The user wishes to add a time span to a seuence diagram. Instead
     of having to create the begin and end markers and then drawing the span
     itself, it is possible to draw only the span and have the timing marks
     added automatically. 

5.4  No way to move a group of messages down the timeline when a new message has
     to be inserted anywhere but the bottom. Use case: The user wishes to add a
     new message near the top of a sequence. The user is able to select a group
     of messages and drag them down the digram to make room for the new message.
     Layout of the selected messages would be unchanged after the drag.  

5.5  Formalized components and messages. Use case, the user can right click on
     a component symbol and select formalize. Visible components are presented
     in a picker wizard for the user to choose. An analogous use case for
     messages also exists.

5.6  No undo. 

5.7  Ability to put operations on the communication line to show operations that
     need to be performed between messages. Use case: The user wishes to show on
     a higher level diagram some of the details of what is happening inside a
     component. They do this by drawing 'reflexive' messages. When the message
     is formalized, a picker wizard allows the user to choose the operation or
     other xtUML invocation the message symbol is intended to represent. The
     list presented by the wizard is derived from the visible contents of the
     component that owns the communication line.

5.8  Ability to refer to other sequence diagrams so they don't have to re-create
     often used sequences. Use case: The user has a large sequence diagram, they
     wish to extract a portion of it to reduce the complexity of the diagram or
     because they recognize that the sub-sequence will be referred to many
     times. The user selects the required portion and chooses the menu entry
     'Collapse > New diagram'. The selected sub-sequence is moved to a new
     diagram and replaced by a summary symbol.

5.9  Ability to put notes on the sequence diagram. Use case: 1. The user wishes
     to explain in text some special feature of an xtUML diagram. They draw a
     note symbol and add the required information. 2. The user wishes to high-
     light the description of a particular model element. They draw a note and
     attach it  to the element. The note displays a cached editable copy of the
     elements description. 

5.10 Ability to show loops. Use case: The user wishes to collapse a piece of
     sequence diagram to show that it is simply looped. They highlight the
     repeated section and choose 'Collapse > Iteration' The tool detects the
     repeated elements and retains one copy. It surrounds the remaining elements
     with a UML loop symbol, automatically deriving the loop count data from the
     number of repetitions found.

5.11 Ability to draw sequence diagram swimlanes. Use case: TBD.

6. Work Required
----------------
6.1 Cut and Paste
I understand that copy and paste for sequence elements is already supported in
the generic package work. We should therefore consider whether we want to expend
engineering resources on this requirement for specific packages at this time.
The existing work is tracked by [4].

Assuming we do decide to go ahead with adding this functionality to specific
packages, I observe that the 'copy' menu entry is sometimes enabled for
sequence diagram symbols and when it is used, the clipboard contents look good.
This means that the bulk of the work is likely in implementing the paste
operations which are typically about 8 to 10 lines of OAL. Allowing for testing
and economies of scale we can probably complete one symbol a day. The sequence
diagram contains 13 different symbols so we should allow 2 to 3 man weeks to
complete this work. Accordingly, I recommend against carrying out this work.

6.2 Drag and Drop
BridgePoint does not currently implement drag and drop anywhere. I recommend
this be treated as a generic feature and a separate issue used to track it. It
will require a non trivial effort to get this working, though we can almost
certainly leverage the existing cut copy paste functionality. Given the fact we
have never even looked at the Eclipse drag and drop infrastructure, and the
reconciler will have to be enhanced to keep the graphics in line, I would
suggest we allow at least one man month for this work. Requests for Drag and
Drop functionality already exist in the database [6,7]. It is recommended that
we track fulfillment of this request against these existing issues.

6.3 Timing annotation
I am not 100% sure what the customer means by three step process here, but I'm
guessing they mean that they currently need to draw the start and end marks and
then the time span. If you include the separate step to provide a timing value,
that is actually four steps.

I recommend we change the time span functionality so that the timing marks are
automatically added if they are not already present. To do this, we need to
allow time spans to start and end on white space. Then we can use the reconciler
to draw timing marks to the nearest communication line. In addition, we could
show a dialog to collect the timing information when the span is completed. The
dialog could include a dropdown to select the time unit. If we do this, we
should have the tool remember which time unit was last chosen and preselect it.

I would expect we could complete these changes within 1 to 2 man weeks.

6.4 Move a group of messages
I don't think this has ever been supported in either old or new graphics
editors. I think this should be given a generic solution and a separate issue
raised to track it. I estimate moderate complexity for this one. Travis can
perhaps provide a more accurate estimate than I can for new graphics support.
Given the current activities involving the graphical editor behavior and the
fact that we no longer use state machines to control user interaction I would
put the effort at 3 man weeks work, perhaps more.

6.5 Formalize Components and Messages
The work for prototyping automated sequence diagram capture[3] already
formalizes Components and Messages. The metamodel already supports this, so the
work required to enable the UI to support this should be relatively minor. I
estimate no more than 3 man days including test for this. However, the work for
[4] is already adding this functionality for generic packages. Accordingly, even
though this is a small amount of work, it is recommended that we support this
feature only under generic packages.

6.6 Undo
My tests show that undo is operational on sequence diagrams. It is possible that
the user did not realize that he needs to have the diagram selected for undo to
work. This probably requires some documentation work to clarify the reasons for
this, or else we need to review the undo policy. Documentation work 1 man day.

6.7 Operations on the Communication Line
6.7.1 Customer requirement
As discussed in the next section, we do already support much of this
functionality, however I believe we do not currently support what the customer
is asking for.

My reading of the requirement is that operations should be supported as looped
back messages on the communication line of the parent Component (i.e not just
on class communication lines). This allows the high level picture to be shown as
messages between components, plus some additional detail of what is going on
within the component between the messages.

We already support looped back messages, though it is not clear that the user
realized this. Perhaps some additional documentation is needed. The metamodel
does not restrict our ability to put operations onto a component communication
line. To support formalization to operations within the component is therefore a
matter of descending the model hierarchy and allowing the user to choose a
target class and operation. This feature should be generic and also allow
functions etc. to be shown in the same way. Given the potentially large number
of operations, functions and classes available to choose from, I recommend we
implement a picker wizard to support this. This is estimated altogether at about
5 to 10 man days of work, depending on what requirements we finalize on.

6.7.2 Formalize operations
This appears to be broken in HEAD. An issue is raised to track fixing this.

6.8 Refer to other Sequence Diagrams
Sequence diagrams are two dimensional. That is, they can expand arbitrarily
deeply across the page and down the page. Rhapsody provides a means to collapse
diagrams horizontally. We should support equivalent functionality. To do this,
we will adopt a UML standard notation of a symbol that represents a region of a
sequence. This looks like a transparent component symbol with an internal label
tab (this is visually very similar to the notation described below in 6.10 for
iteration, but the symbol behavior is different). The communication lines pass
through the symbol but the messages between the communication lines are shown
on another diagram. This diagram is accessible by executing an open command
(through the right click menu or by double clicking) anywhere inside this new
symbol. The tab will show the name of the diagram, and hovering over the tab
will show the full model path to it.

To support collapsed sequences in the vertical orientation, the collapsed
sequence is reduced to a single package symbol with its own lifeline. Message
arrows drawn to this lifeline may be formalized to any incoming message on the
daughter diagram. Similarly, outgoing messages may be formalized to any outgoing
message on the daughter diagram. By incoming, we mean a message that begins on
white space on the daughter diagram and by outgoing, we mean a message that ends
on whitespace on the daughter diagram. The daughter sub-sequence may be opened
by executing the open command (through the right click menu or by double
clicking) on either the summary package symbol or on its lifeline. The summary
package shall bear the <<sequence>> stereotype.

In both cases above, fan-in shall be supported, in other words, it shall be
possible to draw a region or sequence package symbol and later assign it to an
existing diagram.

In both cases above, it shall be possible highlight a group of symbols on a
sequence diagram, right click and select 'Collapse > New diagram'. This will
automatically create the new diagram, move the selected symbols to it and
replace the selected symbols on the current diagram with the summary symbol
described above, selecting the appropriate style based on what was selected.
Automated diagram naming will be required, one suggestion might be to name the
diagram after the first message found in the collapsed group. If other good
suggestions come forward, we might offer preferences for this.

Finally, it would seem a good feature to be able to report usage of (in other
words, references to) a given sequence. The results are presented through the
Search view and triggered from a 'References >' right click menu entry.

This requirement encompasses new symbols and some all new behavior for Bridge-
Point, we need to allow at least 20 man days to provide this feature. Depending
on the features selected above, more may be required.

6.9 Provide UML notes
This should be done generically. I don't think this is a big job. All that is
required is a new note symbol with a connector that can be attached to any other
symbol. The metamodel will be enhanced to capture this; a new subtype of
Packageable Element, 'Note' will be added. It will have a many to 1 conditional
association with Packageable Element. This allows any given element to have an
arbitrary number of notes attached to it. Each note refers to either one
element or none.

There has been some debate about what text should be displayed. I think we
should cache the description of the attached symbol at the moment of attachment,
if the text field in the note symbol is empty. The user can then extend this or
delete it as required.

A separate issue[2] already exists to track this requirement. I estimate about
5 man days to support this, depending on the finalized requirements.

6.10 Show loops
6.10.1 Repurpose Sequence Number field
We currently support the Sequence Number field on both sequence diagrams and
communication diagrams. We could rename this field to reflect the fact that it
is free text and allow textual loop notation to be shown prior to the message.
This produces a UML compliant output label and would require less than one man
day to implement.

6.10.2 New loop symbol
UML also has graphical notation to show iteration that we don't currently
support. as is so often the case, the specification in the reference manual is
not entirely clear, we should see what competing tools do. My interpretation of
it is that you can specify a region on a sequence diagram with a transparent
component-like symbol. The internal tab shows the syntax 'loop(repeat)' or
'loop[([start condition,]end condition])]'. This interpretation is also
consistent with all the examples I was able to find. Since we do not currently
have insfrastructure for a transparent symbol, support for this notation would
require 10 to 15 man days effort. The loop symbol can have an optional guard
expression. This will also be supported. The loop symbol will be resizable to
include or exclude as many messages as required without restriction, i.e. no
movement of enclosed messages is required during resize. It merely floats above
the other symbols.

In addition to manual creation of such loop symbols, a 'Collapse > Loop' menu
entry will automate the collapse of repeated message sequences into a new loop
symbol. 

6.11 Swimlanes
This work is already tracked under [5].

6.12 Conclusion
Given the available manpower, it is suggested that we tackle the work described
in 6.1, 6.5, 6.6, 6.7 and possibly 6.9 (subject to investigation) for the fall
release. 6.10.1 also allows us to show progress against customer requirements
with a minor engineering cost.

7. Acceptance Test
------------------
TBD, depending on the outcome of what we decide to do.

End
---

$Log: dts0100731259.ant,v $
Revision 1.4  2010/11/17 12:12:09  campbell
Job: dts0100731259
Finalize.

Revision 1.3  2010/11/17 11:53:07  campbell
Job: dts0100731259
Minor adjustments.

Revision 1.2  2010/11/17 11:30:54  campbell
Job: dts0100731259
Address review issues.

Revision 1.1  2010/11/16 13:37:52  campbell
Job: dts0100731259
Introduced.

