========================================================================

File:      $RCSfile: dts0100703507.ant,v $
Version:   $Revision: 1094 $
Modified:  $Date: 2011-06-14 12:33:49 -0700 (Tue, 14 Jun 2011) $

(c) Copyright 2007-2010 by Mentor Graphics Corp. All rights reserved.

========================================================================
This document contains information proprietary and confidential to
Mentor Graphics Corp., and is not for external distribution.
========================================================================

BridgePoint Project Analysis Note
Tool support for Model Based Model Compiler development

1. Abstract
-----------

2. History
----------

3. Document References
----------------------
[1] ClearQuest DEI dts0100703507
        
4. Background
-------------

BridgePoint's model compiler technology is currently based on a language 
(RSL) which is different from the modeling language defined by xtUML.
But do we really need yet another language to develop model compilers? 
A model compiler is strictly speaking nothing but a piece of software 
that equally well could be developed as an xtUML model, thus the term 
Model Based Model Compiler (MBMC). xtUML has a number of advantages over 
RSL, including those that you would otherwise get from a model driven flow:

 * Graphical models that are easy to read and understand. RSL is text based.
 * Model level debug. RSL is limited to printf debugging.
 * Platform independence. RSL is restricted to Win32. An MBMC can be
   compiled to any platform.
 * Compiled execution speed. RSL is always run in interpreted mode, whereas
   MBMCs can run as a compiled program.
 * Possibility to model software architectures.
 * No need to learn yet another language.
 * xtUML editors. There are no RSL specific editors to support developers.
 * And more...

There are however a couple of capabilities that xtUML lacks for effective
MBMC development:

 * Meta model population. Common to all model compilers is the input, a 
   populated meta model.   
 * Template engine. Instead of building the resulting code (text) by 
   manually concatenating strings, a template engine is used. The template
   engine allows templates to be populated with data derived from the 
   meta model and transmitted as text files. The template engine and its
   interface is defined in 5.1.4.
 * Marking mechanism. 
 * Compiler for compilers. A dedicated model compiler for MBMCs is needed 
   in order to compile a compiler to a given platform. 

4.1 Intended use model

At a high level a MBMC development flow is expected to include the following
sequence of activities:

 1. Developer creates a new MBMC project (a combined BP/Plug-in project)
 2. The project is pre-populated with a version of the meta model that
    corresponds to the current BP version.
 3. Developer uses BP to build the MBMC. 
 4. Developer tests the model in Verifier. The input model used for testing
    must be loaded in the current workspace.
 5. Developer builds the model using MC^2. The output is a complete Eclipse
    plug-in that implements an Eclipse builder.
 6. Developer tests the generated MBMC as an Eclipse application using PDE.
 7. Developer delivers (exports) the plug-in such that it can be installed
    throughout the organization. 

4.2 Translation projects

This is provided here as background information. It is important that the 
long term solution for the BridgePoint end user build environment is 
established as it affects the direction for MBMCs and the tooling supporting
development of MBMCs.

Recent support to build various component configurations using a collection 
of component references has resulted in the need for customers to also setup 
multiple builders. There is a possibility that different component configurations 
will be built using different model compilers, including different sets of 
marks, source folders, source code compilers, Eclipse natures etc. We can think 
of this collection of artifacts and tools as a translation configuration.

MC3020 (Mentor's only commercial MC) is currently restricted to one 
translation configuration per project. One could imagine changing this to 
allow multiple translation configurations per project. There are a few
drawbacks attached to this approach:

 1. Eclipse is designed to have one and only one build configuration.
    Users would have to manually change his/hers build settings in order to 
    "Build project" with a different configuration.
 2. Cluttered projects. This is not necessarily a problem as long as there
    is only one MC to chose from. But when additional MCs become available
    it will become a problem. Generating for instance C and Java within the 
    same project will create a mess of Eclipse natures, source folders etc. 

A better solution is allowing customer to set up dedicated translation
projects. The term "translation project" may not find its to the tool, it
is merely a concept. The project would still be a BridgePoint project. In 
addition to being a BridgePoint project it will likely also have a nature
that reflects the target language for this project. E.g. a C++ translation
project may have an EDGE or a CDT nature in addition to the BridgePoint 
nature.

A translation project will in most cases contain nothing but a component
configuration. I.e. it will not contain any component definitions, or any
other definition for that matter, only references to source models residing
elsewhere in the workspace. A pre-requisite for translation projects is inter
project model references. Benefits here are (apart from solving the 
enumerated issues above):

 1. No need for MarkSystemConfigurationPackage or similar
 2. Marking data for the component configuration has a natural home.
 3. No additional tool support (except for inter project references).

5. Analysis
-----------

5.1 New capabilities

5.1.1 New Model Compiler project wizard

A new project type is needed for MBMC development. "New > Model Compiler Project"
should open the a modified version of the existing New Project wizard. The New
Model Compiler wizard doesn't need the target support pages for instance. 
Upon completion of the wizard, a new BridgePoint/PDE project should be
created containing:

 * The meta-model corresponding to the current version of BridgePoint
 * A new subsystem named "Model Compiler"
 * External entities POP and T
 * A root level folder named "templates"
 * Appropriate natures (no EDGE)
 * gen folder with default marks for MC^2
 * The MC^2 Builder plus all builders associated with a default Plug-in project.
   MC^2 should run first.
 * Any default Plug-in folders/files that will not be generated by MC^2
 
For a phased delivery, this feature can be shipped later. Early releases may simply
contain a step by step guide to pull together the project.

5.1.2 Meta model population

As MBMCs can be run in two different modes, interpreted mode and compiled mode, 
meta model population must be supported for both. 

For interpreted mode (Verifier) the meta model populations mechanism will be 
explicitly invoked. A bridge call is used to start the population of 
the meta model with a given project:

POP::populate(project: string) : void

Future releases may not enforce this explicit call. A better solution would involve 
the debug configuration to hold a pointer to the input model and then populate the
meta model as part of the launch. 

Meta model population in compiled mode is radically different from its counterpart 
in interpreted mode. As the compiled model compiler plugin will run alongside the 
BridgePoint plugins, it can access the in-memory meta model directly. In other words, 
there is no need to populate the meta model, but it does require the in-memory model 
to be fully loaded. As a consequence of accessing in-memory data, no code is 
generated for the meta model classes residing in the MBMC project. Also, POP::populate()
becomes a noop. This means MBMC developers must not directly extend meta model classes 
with attributes, operations or state machines. On the other hand, it is likely that
this restriction will be enforced anyway to facilitate straightforward meta model 
upgrades, see 5.2. The meta model created by the MBMC project wizard, should
therefore be made read-only.

Another issue that needs to be dealt with is limiting the results when querying the
in-memory data. For instance:

ModelClass_c.ModelClassInstances(modelRoot)

Must only return O_OBJs from the model being compiled.
// TODO: I believe modelRoot itself would solve this issue, but IIRC we are moving towards a singleton modelRoot??

5.1.3 Marking model population

Just like the meta model is populated with data from an input model, the model
of marks will be populated in a similar fashion. Again, support must be provided
for both modes of execution, see 5.1.2.

To limit the scope of a first delivery, the old marking style should remain:

.invoke <mark_name>([argument]*);

While writing a parser for this format is trivial, understanding the meaning
of the parsed content is not. The parsed content will be interpreted as
follows (pseudo code):

  1. The <mark_name> is the name of a class representing the mark,
     instance of this class is created.
     
  2. Starting with the first argument:
     
     For each association the mark class is participating in (sorted by ascending association numbers):
       If the association is a simple association (non-associative, non-generalization)
         If the other participating class is a meta model class
           - relate the mark instance to the instance in the meta model with
             the namespace given by the argument
           - go to next argument
         end if
       end if
     end for
     
     Remaining arguments are used to initialize the mark instance 
     class attributes.
    
Consider a mark modeled like:

   _________________________               _____________
  | MarkPreExistingInstance |    R6001    | ModelClass  |
  |-------------------------|_____________|-------------|
  | int numberInstances     | 0..1      1 | string name |
  |_________________________|             | ...         |
                                          |_____________|
                                          
And the mark file statement:

.invoke MarkPreExistingInstance("PackageX::ComponentY::SsZ::Foo", 3);

This would be equivalent to executing the following piece of OAL,
(given that the namespace have been resolved and there is a local
variable ss):

select any modelClass related by ss->O_OBJ[R2] where selected.name == "Foo";
create object instance mark of MarkPreExistingInstance;
mark.numberInstances = 3;
relate mark to modelClass across R6001;

For the interpreted mode (Verifier) a call to POP::populateMarks(project: string)
should parse the <project>'s gen folder and carry out the marking model population. 

There must also be an implementation for POP::populateMarks(project: string) for 
compiled mode execution.

5.1.4 Template engine

Proposed T EE interface (for now: assume support for overloading):
  
  // processes the template tPath and returns the result as a string,
  // nothing is appended to the output buffer
  T::process(tPath: string) : string
  T::process(tPath: string, indent: integer) : string
  
  // same as the previous calls, but the template is runtime computed string,
  // this bridge will not be supported until we know how generate code for it
  T::process(tStr: string) : string                  // not supported initially
  T::process(tStr: string, indent: integer) : string // not supported initially
  
  // processes the template tPath and appends the result to the output buffer  
  T::append(tPath: string) : void                   
  T::append(tPath: string, indent: integer) : void 
  
  // same as the previous calls, but the template is runtime computed string,
  // this bridge will not be supported until we know how generate code for it
  T::append(tStr: string) : void                     // not supported initially
  T::append(tStr: string, indent: integer) : void    // not supported initially
  
  // sets the indentation width in number of space characters
  T::setIndentation(width: integer) : void
  
  // clear the output buffer
  T::clear() : void
  
  // emit the output buffer to file
  T::emit(path: string) : void
  
EE T must be implemented by Verifier as well as MC^2.

5.1.6 MC^2

MC^2 is a model compiler who's input is an MBMC and the output is an Eclipse
plugin. The generated plugin must have the following characteristics:

 1. It must extend the builder extension point.
 2. No code should be generated for the meta model classes residing the 
    MBMC project.
 3. Where meta model classes are accessed, this is done using
    the API exposed by MC Java. Special care must be taken where "select 
    related by" statements is referencing both meta model classes and MBMC 
    specific classes.
 4. Source code for POP and T must not be included in generated code as this
    Mentor IP. POP and T will be part of the BridgePoint installation as 
    .class files. In fact, they will be used by MC^2 during code generation.
    
MC^2 should itself extend the Eclipse builder extension point to allow 
MBMC projects to be built with "Build Project".

5.2 Meta model upgrades

Every MBMC is assumed to include a subset of the BridgePoint meta model. In
the future, BridgePoint should manage the upgrade to newer versions of the 
meta model. But for now it will be a manual upgrade. Here are the steps
to perform a manual meta model upgrade:

 1. Rename ooaofooa to some arbitrary name
 2. Import the new meta model 
 3. Delete the imported datatype package (Datatypes-1)
 3. Copy/paste the MBMC subsystems to the new ooaofooa
 4. Delete the renamed meta model
 
This approach will preserve any references to meta model classes, including 
associations. 

5.3 Product packaging

[TBD] Model Compiler Developer Kit

5.4 Product licensing

5.4.1 Model Compiler Developer Kit

New project wizard (merely there to notify users early on that he doesn't have a license to build MCs)
T.class and POP.class (this will stop users from running an MBMC in Verifier)
MC^2 (this will stop users from compiling the MBMC)

5.4.2 Execution rights

T.class (is essentially the only place where a license hook can be placed, as POP has isn't executed in compiled mode)

5.4.3 Mentor MCs

6. Work Required
----------------
6.1 POP for Verifier
6.2 T for Verifier
6.3 T for generated code
6.4 MC^2
6.5 Update DocGen to use the updated POP and T EEs.
6.6 New project wizard
6.7 License checks

7. Acceptance Test
------------------

End
---

$Log: dts0100703507.ant,v $
Revision 1.2  2010/08/13 18:30:41  skjellbe
Job: dts0100703507
Initial draft.

Revision 1.1  2010/07/15 14:13:02  skjellbe
Job: dts0100703507
Introduced.