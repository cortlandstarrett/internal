========================================================================

File:      $RCSfile$
Version:   $Revision$
Modified:  $Date$

(c) Copyright 2006-2009 by Mentor Graphics Corp. All rights reserved.

========================================================================
This document contains information proprietary and confidential to
Mentor Graphics Corp., and is not for external distribution.
========================================================================

Tiger Project Design Note
Support XMI Export in Tiger


Abstract
--------
This note will describe the solution for a new requirement to support export 
of a BridgePoint model in XMI format.

History
-------

Document References
-------------------
[1] MRD 1.05
[2] SRS 1.05 <CVS>/Documentation/external/requirements/SRS 105.doc
[3] bug 1563. http://phoenix.projtech.com/bugzilla/show_bug.cgi?id=1563
[4] Support XMI Export in Model Compilers Design Note
      <CVS>/MC-Documentation/internal/technical/XMI/i1571.dnt

Background
----------
Wikipedia defines XMI as: The XML Metadata Interchange (XMI) is an OMG standard 
for exchanging metadata information via Extensible Markup Language (XML). It can
be used for any metadata whose metamodel can be expressed in Meta-Object 
Facility (MOF). The most common use of XMI is as an interchange format for UML 
models, although it can also be used for serialization of models of other 
languages (metamodels).

Analysis
--------
In the future we expect more and more modelling tools to support XMI.  In 
addition, we have had customer requests to export in XMI format.  Marketing 
believes lack of XMI support is a sales inhibitor.  However, because the XMI 
standard is still somewhat immature, many vendors are implementing the standard
differently.  Therefore, at this time, our task is simply to export our xtUML 
models in XMI, adhering to the OMG's version 2.1 of the XMI specification.

There are two parts to supporting XMI export inside EDGE:  1) the Eclipse
integration, and 2) the model compiler support.  This note describes the details
of part 1 and the xtumlmc_build part of part 2.  See [4] for a description of 
the rest of the details of part 2.

Design
------
1   Standard Eclipse paradigms shall be followed in order to add this
    functionality.
1.1 An Eclipse builder will be created in com.mentor.nucleus.bp.core.util.
1.2 The builder will be implemented by the XMIExportBuilder class.
1.3 The builder will not perform any actions when a build is invoked. The 
    builder simply serves a checkbox, a means to communicate desired 
    functionality to the model compiler builder.  See item 3 below.
1.4 XtUMLNature::configure() (in com.mentor.nucleus.bp.core) will be updated to 
    install the builder during the creation of a new xtUML project.
    
2   The XMI Export facility shall be provided through the Eclipse project 
    builder interface.
2.1 The XMI Export builder shall be turned off (unchecked) by default.
2.2 In order to export the XMI data, the user shall enable (check) the XMI 
    Export builder in the “Builders” page of the project properties dialog, then
    select “Build Project”.

3   Functionality
3.1 When the model compiler builder runs, it will check to see if the XMI Export
    builder is enabled (checked) or not.
3.2 If the XMI Export builder is enabled, the MC builder will pass "-i" as an
    argument in its call to xtumlmc_build.
3.3 If the XMI Export builder is not enabled, "-i" will not be passed to 
    xtumlmc_build.  That is, xtumlmc_build will behave as it does currently, as
    if XMI Export does not exist.
3.4 xtumlmc_build will be modified to watch for the "-i" command line argument.
3.5 If xtumlmc_build is passed "-i" it will add a hook to force the XMI
    generating archetype specified in [4] to run, then exit after the archetype
    is processed.
        

Design Comments
---------------
The design presented here is not the most elegant solution in regards to the 
Eclipse environment.  The most elegant solution would be to extend the Eclipse
"Export Wizard" for XMI export functionality.  However, management has made the
decision to sacrifice some usability issues in order to get the functionality
out the door quickly.  The design presented here is thought to be the fastest
and easiest way to incorporate XMI export into EDGE.

Work Required
-------------
1   Create builder class
2   Set it up when xtUML nature is configured
3   Modify xtumlmc_build to handle "-i" argument
4   Update the Model Compiler User Guide with a description of the new feature
    and its usage
    
Unit Test
---------
1   Setup
1.1 Install the new bp.core into the EDGE installation
1.2 Install the new xtumlmc_build(.exe) into the EDGE installation
1.3 Install the XMI Export archetypes into the EDGE installation

2   Verify No Side Effects
    _- Create a new xtUML project
    _- Import an existing model that has 2 domains
    _- Select the Navigator view
    _- Select the "Properties" of the project
    _- Show the "Builders" page
    _R- Verify the "XMI Export" builder is unchecked
    _- Close the "Properties" dialog
    
    _- Build the project
    _R-Verify the project builds successfully and produces an executable
    
3   Verify Correct Operation
    _- Select the "Properties" of the project
    _- Show the "Builders" page
    _- Check the "XMI Export" builder
    _- Close the "Properties" dialog
    
    _- Build the project
    _R-Verify the project builds successfully and produces a output files
        <domain>_xmi_2_1.xml for each domain in the "reports" directory
    

End
---

$Log$
Revision 1.4  2009/01/01 23:13:57  rmulvey
Job:4060
Batch promotion of copyright changes from Review-i4060 and Review-i4060-01.

Revision 1.3.4.1  2008/12/31 16:11:12  rmulvey
Job:4060
This is a batch commit of 2009 copyright changes to branch Review-i4060.  This includes the
report that outlines all changes made (before/after for each line changed).  This report is found here: <cvs>/Documentation/internal/test_results/R2_1_2/i4060/update-copyright-results.txt.

Revision 1.3  2007/08/31 21:16:19  rmulvey
Job:2673
Moved the XMI folder to Documentation/technical/archive/20070830

Revision 1.1.2.1  2007/08/31 20:30:14  rmulvey
Job:2673
Commiting changes that archive the files and folders under /Documentation/technical as specified by i2673.int.  This is being done in branch Review-i2673-Documentation to test that resource history is not lost in the folder that are moved.

Revision 1.5  2006/02/13 15:38:37  kbrown
Job:1563
Completed design review updates.

Revision 1.4  2006/02/10 19:47:45  kbrown
Job:1563
Updated output file name in unit test section

Revision 1.3  2006/02/03 21:03:08  kbrown
Job:1563
Lots of updates.  Changed direction with the design.

Revision 1.2  2006/02/01 22:30:48  kbrown
Job:1563
More detail in the design note for the Tiger plugin.  Not finished yet.

Revision 1.1  2006/02/01 19:48:05  kbrown
Job:1563
Started design note for XMI export plugin.  It is under Documentation/internal/technical/XMI.

