========================================================================

File:      $RCSfile$
Version:   $Revision$
Modified:  $Date$

(c) Copyright 2006-2009 by Mentor Graphics Corp. All rights reserved.

========================================================================
This document contains information proprietary and confidential to
Mentor Graphics Corp., and is not for external distribution.
========================================================================

BridgePoint Technical Note
Components and Interfaces

Abstract
--------
Here we explain in plain text what components and interfaces are and how
they are used in BridgePoint xtUML modeling.

History
-------

Document References
-------------------
[1] Bugzilla issue 2954
[2] Bugzilla issue 1687

Background
----------
BridgePoint version 1.5 release semantics supporting UML components and
interfaces.  Technical details on the analysis and design of this support
is described in [2] and elsewhere.

Intended Audience
-----------------
This note is intended for the BP team.  The contents of this note will be
formatted into a graphical document for external consumption.

Free Format Sections
--------------------

Components

Define/show:
* (In presentation, start with original Campbell slide show of
  components and interfaces.)
* component

A component represents a quantity of functionality that can be interfaced
to other components.  A component can be modeled or _realized_.  A component
can be viewed as a black box of functionality with a set of published
interfaces.  The block box can be opened or viewed only from the outside.
The view from the outside consists only of the interfaces.  Other components
cannot "see" inside the component but can only send and receive information
to and from it through its interfaces.

Modeled components are _formalized_ to xtUML domain models.  The internal
functionality of a modeled component consists of xtUML modeling artifacts
such as class diagrams, state machines, classes, associations, attributes, etc.
Before being formalized to an xtUML model, a component is only the outside
of the black box and its interfaces.  Upon formalization, the internals of
the component can now be defined, edited and by user/modeler.

Formalizing a component in BridgePoint is an operation performed on the
component from the modeling user interface.  It also is possible to
unformalize a component.  This operation will disassociate the component
and the  underlying xtUML modeled domain.

_Realized_ components represent functionality that has been "realized" in
some way other than with an internal xtUML model.  Most often realized
components represent legacy software modules or libraries that are to be
integrated with modeled components.  Realized components have interfaces
just like modeled components have interfaces.  The interfaces prescribe
the API of the realized functionality.


    component package
* mixing of package types (interface on components, components on interfaces)
    
Components are packaged in UML packages.  Interfaces also are organized in
packages.  In fact, all BridgePoint xtUML diagrams are organized in packages.
Packages are a diagrammatic way to group modeling elements together and manage
their hierarchy.  Packages can be nested.  Component packages may contain
other component packages and/or interface packages.  This allows a level of
organization association between components and their interfaces.

    imported component
    
Components can be imported onto component diagrams.  An imported component
is a component that has been defined on one component diagram and is being
used on another diagram.  Importing a component allows for the reuse of
components.  Some developers may choose to define components in one diagram
but show their interfacing/wiring on a separate diagram.  This is supported
with the importing of components.  A similar concept is used on class
diagrams allowing users to import classes into one class diagram from other
class diagrams (subsystems).

*   nested component

Components can be nested within other components.  Component nesting provides
a hierarchical containment of components within components.  Component nesting
provides a way to functionally decompose a complex system into a
collection of simpler parts, components.  The components nested inside of
another component must have interfaces to satisfy all of the interface
requirements of the outer component.

* interface

An interface is a declaration of a collection of synchronous and asynchronous
messages that can be passed between components.  Interfaces are separate
from components.  Modeling them separately allows interfaces to be defined
and managed
independently of the components that implement these interfaces.
The separation also allows
more than one component to implement (require or provide) any particular
interface.

Interfaces are declared in interface diagrams.  An interface diagram
depicts interfaces in the standard UML box format with the messages
contained inside the interface.
A message is the declaration of an individual type of interaction between
components.  It provides the signature of the interaction including return
types and the types of all parameters carried in the message.
Messages can be asynchronous or synchronous.
Asynchronous messages are called _signals_.  Synchronous messages are
called _operations_.  Often operations on an interface will be called
_interface operations_ rather than simply operations
to distinguish the term from uses elsewhere in UML.
Messages in the interface are grouped graphically
by "synchronicity".  Asynchronous signals are in one compartment
in the box; synchronous interface operations are grouped in a
separate compartment.

    interface package
    
Multiple interfaces can be organized into packages.  Packages do not reflect
the functionality of interfaces but simply provide a way to group them and
manage them in convenient, logical groupings.

    provided and required interfaces

Components can _provide_ interfaces and _require_ interfaces.  A provided
interface is an interface through which the component is able to provide
services to other components.  It provides the services by passing
messages across the provided interface to and from the client who 
requires the interface.  Graphically a provided interface is depicted
as a "lollipop" (a stick with a ball on it) jutting out from the component.

A _required_ interface is an interface through which a component is able
to demand services from another component.  It demands these services by
passing messages across the required interface to and from the server who
provides the interface.  Graphically a required interface is depicted as
a stick with a "cup" on one end.

Ultimately a required interface is _wired_ to a provided interface.  This
connects the components across the interface.  On the component diagram,
the required interface (cup) and the required interface (ball) will join
together and bind.
Any number of components can provide and/or supply a particular named
interface.

    informal interfaces

The BridgePoint user interface supplies a glyph on the component diagram
canvas to add provided interfaces and to add required interfaces to components.
When a provided interface or a required interface is first added to a component, it
it is not named and not formalized.  At this point the provided or required 
interface is not named, is informal and contains no messages.  By renaming
it, the provided or required interface can be given an informal name.

    formal provided and required interfaces

Required interfaces and provided interfaces are formalized to interfaces
declared in interface diagrams.  Formalizing an interface establishes the
fact that the selected component requires or provides the named interface.
This further establishes that the exact set of messages declared in the 
interface (on the interface diagram) are to be required or provided by
the selected component.

Some developers will build component diagrams first.  They may model
informal required and provided interfaces and wire the components together
with them.  Then, they will declare the details of the interfaces and
formalize the wired interfaces on the component diagrams to the newly
defined interfaces from their interface diagrams.

Other developers with carefully craft interfaces first.  They will define
all the messages that can be passed between components.  Then, they will
build component diagrams and wire them with formalized provided and required
interfaces.

Both approaches are supported in BridgePoint.

* port

A port specifies a distinct interaction point between a component and its
outside environment or between the component and its internal subordinate
components.  A port has a name and is associated with one of the provided
or required interfaces of the component.

* delegation

When components are nested, the internally nested components must together
provide and require a superset of the interfaces of the parent component.
A delegation denotes the mapping of required/supplied interfaces of the
parent component to the required/provided interfaces of the nested
components.  The mapping is denoted with an arrow connecting the nested
interface to the parent component interface.


What happened to domains?
  How/where modeled domains fit.
  
The UML component provides the syntax and semantics needed to package
xtUML domain models into clearly interfaced modules.  The xtUML domain model
is used to define the internal behavior of the component.  On the component
and interface diagrams, the external view of a domain can be declared.
By formalizing a component to a domain model, the user is establishing that
the internal behavior of the component is defined by the xtUML artifacts
(classes, operations, state machines, etc.) of the xtUML domain model.

  How/where realized domains fit.

The UML component provides the syntax and semantics needed to package
realized (non-modeled) functionality into clearly interfaced modules.
The component works equally well for modeled and non-modeled functionality.
Non-modeled components declare the interaction of the non-modeled component
with the other components in the system.  The internal functionality of
the non-modeled component is assumed to be provided by legacy code, 
off-the-shelf libraries or some means other than a locally defined xtUML
model.

  the deprecating role of EEs
  
BridgePoint external entities (EEs) historically have defined the interfacing
to non-modeled functionality.  Although external entities will continue to
work as they do in version 1.4 of BridgePoint, their functionality is
effectively superseded by components and interfaces.

  the reduced role of domain functions
  
BridgePoint domain function historically have defined the externally
supplied synchronous application interface to an xtUML modeled domain.
Domain functions also provide a form of domain-global processing.  Because
domain functions are accessible from inside a domain model as well as outside,
they can serve as a place to package domain-level processing utilities.
This latter use of domain functions is unchanged and completely valid.
The former functionality of providing externally visible synchronous
interfacing is effectively superseded by components and interfaces.
  
Nesting
* nesting of packages (business as usual)
  nesting of components inside components

Interfaces
  provided interfaces
  required interfaces
  bidirectionality
    how it works
    message direction
    UML2 compatibility
  signals
*   importing signals onto class-based state machines
  synchronous interface operations
*?  importing synchronous messages onto class-based operations

Execution/Verification Semantics (for future)
  interface activities
    provided interface activity
    required interface activity
  imported signal
  imported synchronous message
  OAL Syntax
*   send signal
*   'sender' key word
       validity and assumptions

Meta-model Support
  Everything is semantically complete, of course.



End
---

$Log$
Revision 1.3  2009/01/01 23:12:57  rmulvey
Job:4060
Batch promotion of copyright changes from Review-i4060 and Review-i4060-01.

Revision 1.2.4.1  2008/12/31 16:10:00  rmulvey
Job:4060
This is a batch commit of 2009 copyright changes to branch Review-i4060.  This includes the
report that outlines all changes made (before/after for each line changed).  This report is found here: <cvs>/Documentation/internal/test_results/R2_1_2/i4060/update-copyright-results.txt.

Revision 1.2  2007/08/31 21:26:36  rmulvey
Job:2673
Moved the notes associated with closed issue into Documentation/technical/archive/20070830/notes

Revision 1.2  2007/06/14 21:37:41  cstarret
job:2954
updates

Revision 1.1  2007/06/14 21:05:32  cstarret
job:2954
Adding raw material for components/interfaces.

