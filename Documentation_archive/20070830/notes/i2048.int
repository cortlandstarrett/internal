========================================================================

File:      $RCSfile$
Version:   $Revision$
Modified:  $Date$

(c) Copyright 2007-2009 by Mentor Graphics Corp. All rights reserved.

========================================================================
This document contains information proprietary and confidential to
Mentor Graphics Corp., and is not for external distribution.
========================================================================

BridgePoint Project Implementation Note
Do First Pass with Persisted OAL

1. Abstract
-----------
1.1     All of the information needed for first pass is available in random
        access format in the instance data.  This note describes the
        replacement "first_pass" being built in parallel.

2. History
----------

3. Document References
----------------------
[1] Bugzilla item 2048
    http://tucson.wv.mentorg.com/bugzilla/show_bug.cgi?id=2048
[2] OAL First Pass design note
    <cvs>/MC-Documentation/internal/technical/mc3020/i2048.dnt
[3] unit test results
    <cvs>/Documentation/internal/test_results/R1_5_0/2048/*.txt

4. Background
-------------
4.1.    See [1] and [2].
4.2.    We replace al_xlate based OAL parsing with random access queries
        of the populated OAL meta-model.

5. Design
---------
5.1.    See [2].

6. Implementation Comments
--------------------------
6.1.    Instead of running first_pass directly in parallel, there is a routine,
        block_first_pass_skipped, that accesses a switch to use the old or new
        method of analysis.
6.2.    Noted that R609 and R689 needed conditionality reversed.  Raised BZ2889.
6.3.    We are calling the event queue length routine twice (early and late).
        This late call can be eliminated during the implementation of OAL-
        based code generation.
6.4.    There will be some clearing of sets (ClearSet) and END IF comments
        (and trace statements) that will be different because we do not build
        up the TE_BLOCKs in a real first_pass.  These (small) differences
        need to be recognized when comparing the generated code between the
        two versions of first_pass analysis (OAL-based and fragment-based).
6.5.    We will promote the archetypes with the first_pass_skipped flag set
        to false.  However, for testing, this flag must be set (temporarily)
        to true.

7. Unit Test
------------
7.1.    The design calls for running every test in the model compiler test
        suite.  However, the work of converting the models is highly manual.
        Only a subset of the test models were run.  We will automate the 
        update of the models at a later date.  The following tests were run:
7.1.1.  MicrowaveOven (interactively within Eclipse)
7.1.2.  pei
7.1.3.  assoc_unformal
7.1.4.  dogs
7.2.    Find the test results at [3].
7.2.1.  The results were obtained by running each test with the
        first_pass_skipped flag set to false and then to true.  [Change this
        flag by editing the first routine in q.fp.block.arc.]
7.2.2.  The generated code was then compared between each of the two runs.
7.2.3.  The resulting diffs are stored as [3].
7.2.4.  All diffs are accounted for.  Tests pass.

8. Code Changes
---------------
8.1.    This work is in R1_5_0-CDS-i2048.
8.2.    The following files were added.
8.2.1.  model_compilers/mc3020/arc/q.oal.analyze.arc
        This file contains the new functions that query the customer model
        and store statistics in the MC metamodel.  The analysis that used to
        be done by the fragments is done in random-access fashion against
        the OAL instances.
8.2.2.  model_compilers/mc3020/arc/q.fp.block.arc
        This file has block fragments that were run during first pass.  With
        OAL-based analysis, these can be moved to code generation time (for
        now).  They will be completely eliminated when OAL-based code
        generation is deployed.
8.2.3.  model_compilers/mc3020/arc/first_pass.al_xlate.arc
        This file contains most of what used to be in first_pass.arc.  This
        file is not even included when running with OAL-based analysis.
8.3.    The following files were changed.
8.3.1.  model_compilers/mc3020/arc/domain.arc
8.3.2.  model_compilers/mc3020/arc/first_pass.arc
        This file now contains only the parts that do not involve running
        al_xlate on all the action language semantic strings.  This file
        now calls OAL-based analysis when the first_pass_skipped flag is true.
        Otherwise, it includes the file first_pass.al_xlate.arc and does its
        work the old way.
8.3.3.  model_compilers/mc3020/arc/frag_code.arc
8.3.4.  model_compilers/mc3020/arc/fragment.arc
8.3.5.  model_compilers/mc3020/arc/gen_util.arc
8.3.6.  model_compilers/mc3020/arc/q.mc_metamodel.populate.arc
8.3.7.  model_compilers/mc3020/arc/q.domain.limits.arc
        This file was substantially changed to gather information from the
        OAL population rather than from first_pass statistics gathered by
        fragment functions.

End
---

$Log$
Revision 1.3  2009/01/01 23:12:57  rmulvey
Job:4060
Batch promotion of copyright changes from Review-i4060 and Review-i4060-01.

Revision 1.2.4.1  2008/12/31 16:10:00  rmulvey
Job:4060
This is a batch commit of 2009 copyright changes to branch Review-i4060.  This includes the
report that outlines all changes made (before/after for each line changed).  This report is found here: <cvs>/Documentation/internal/test_results/R2_1_2/i4060/update-copyright-results.txt.

Revision 1.2  2007/08/31 21:26:36  rmulvey
Job:2673
Moved the notes associated with closed issue into Documentation/technical/archive/20070830/notes

Revision 1.3  2007/06/05 19:45:32  cstarret
job:2048
Updated int based on review.

Revision 1.2  2007/05/11 14:14:32  cstarret
job:2048
introducing implementation note

Revision 1.1  2007/03/15 18:46:11  cstarret
job:2048
introducing shell
