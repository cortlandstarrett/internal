========================================================================

File:      $RCSfile$
Version:   $Revision$
Modified:  $Date$

(c) Copyright 2007-2009 by Mentor Graphics Corp. All rights reserved.

========================================================================
This document contains information proprietary and confidential to
Mentor Graphics Corp., and is not for external distribution.
========================================================================

BridgePoint Project Analysis Note
Release 1.5 Features

1. Abstract
-----------
This provides a high level description for each feature targeted for BridgePoint
Release 1.5.

2. History
----------

3. Document References
----------------------
[1]  Bugzilla Array issue 477
     http://phoenix.projtech.com/bugzilla/show_bug.cgi?id=477
[2]  Bugzilla Structured Data Type issue 478
     http://phoenix.projtech.com/bugzilla/show_bug.cgi?id=478
[3]  Bugzilla Actions on Transitions issue 491
     http://phoenix.projtech.com/bugzilla/show_bug.cgi?id=491
[4]  Bugzilla Initial Transition issue 1673
     http://phoenix.projtech.com/bugzilla/show_bug.cgi?id=1673
[5]  Bugzilla Components issue 2669
     http://phoenix.projtech.com/bugzilla/show_bug.cgi?id=2669
[6]  Bugzilla Components issue 1687
     http://phoenix.projtech.com/bugzilla/show_bug.cgi?id=1687
[7]  Bugzilla Copy/Paste issue 2234
     http://phoenix.projtech.com/bugzilla/show_bug.cgi?id=2234
[8]  Bugzilla Copy/Paste issue 2375
     http://phoenix.projtech.com/bugzilla/show_bug.cgi?id=2375
[9]  Bugzilla Relocatables issue 1872
     http://phoenix.projtech.com/bugzilla/show_bug.cgi?id=1872
[10] Bugzilla Relocatables issue 2322
     http://phoenix.projtech.com/bugzilla/show_bug.cgi?id=2322

4. Background
-------------
Much of the feature content of this release will be driven by Ericsson RNC
(Radio Network Controller) and its desire to move to BridgePoint from the Rose
R/T tool.

5. Analysis
-----------
The list of requirements specified by the Ericsson RNC tools team was:

1 Arrays
2 Structured data types
3 Action language on transitions
4 Initial transition support
5 Nested component diagrams
6 Copy/paste of model elements (for classes and associations)
7 Auto synchronization of action language and model changes

In addition, they listed 6 features that they would like to see added as soon as
possible:

* Remove unnessessary naming information (on signals and relationships)
* 'In place editing'
* Full UML 2.0 support for sequence diagrams, use case diagrams and\
  communication diagrams (requirements to be clarified)
* Good document generation possibilities (requirements to be clarified)
* Extended state event matrix support (allow specification of an Exception
  Procedure)
* Animated Sequence Diagrams when running the Verifier.

These latter requirements will not be further discussed here.

5.1 Arrays
Ericsson needs to integrate with existing, already developed components. These
existing components can pass an array as an argument in an interface. Therefore
BridgePoint must also handle these if it is to integrate with their existing
process.

Given this observation, the minimum requirement is to allow Signal and Interface
Operation arguments to be specified as being an array of the specified data
type. Obviously, along with this requirement, OAL must be added to access the
array elements.

An additional requirement may be that Bridge, Function and Operation arguments
also have this capability.

Finally, we might require that an attribute of a class can be specified as being
an array.

On diagrams, we will need to display such entities with an appended '[]'.

In OAL, we will either need to introduce a new for variant that uses an index or
else reuse the existing 'for each' to syntax to iterate over an array. The
latter approach is not recommended. It is easier for us to implement, but may
not meet customer expectations.

For more information, see [1].

5.2 Structured Data Types
Allow a data type to be defined as having attributes. Add OAL dot operator
syntax to allow said attribute values to be read and written. My preferred
solution to this is to add a new subtype of Data Type, 'Value Class' that has an
association with the existing metamodel element 'Model Class'. Doing this will
allow:

- Attributes to store instances (which is the same thing as most people's first
  idea of what a structured data type is)
- Instance reference arguments to Signals, Interface Operations, Bridges,
  Functions, Operations.
- Operation calls on attribute and argument values in addition to instance
  handles.
- Generate statements to attribute and argument values in addition to instance
  handles.

To create a Value Class data type the user right clicks on a class and specifies
'Publish . . . '. This will start a wizard to allow the user to choose the
Datatype package the class will be shown in. Published classes will appear in
the data type selector beside int, real etc.

For more information, see [2].

5.3 Action Language on Transitions
We already have the metamodel for this. It just needs to be tweaked to no longer
enforce that there are separate state model types; Mealy and Moore.

On diagrams, double clicking a transition will open an Activity editor. If OAL
is present, the event will be post fixed by a '/'.  Immediately below the event,
the text of the OAL will be listed.

For large actions, this may look ugly. We can recomment that people factor the
OAL into a small number of self documenting operation calls and put these in the
Transition Activity. That way, the diagram will retain the look of a traditional
Mealy transition; with a small number of clear actions. Alternatively, we can
modify the connector text blcok behavior to crop text that overflows the user
positioned text handles. Since this changed behavior would apply to all
diagrams, I would not recommend it.

For more information, see [3].

5.4 Initial Transition
Allow the user to draw an unlabeled transition into a state. This will modify
the exisitng state machine behavior by specifying the starting state (currently
specified as the lowest numbered state) of a synchronously created instance. In
addition, the OAL for the entered state shall be executed.

For more information, see [4].

5.5 Nested Components
Well documented elsewhere [5,6].

5.6 Copy/Paste of Model Elements (for classes and associations)
This should read _at_least_ for classes and associations. Obviously, if we can
do better than this we should.

For more information, see [7,8].

5.7 Auto synchronization of OAL and model changes
We know this as 'Relocatables'. Well documented elsewhere [9,10].

6. Work Required
----------------

7. Acceptance Test
------------------

End
---

$Log$
Revision 1.3  2009/01/01 23:12:57  rmulvey
Job:4060
Batch promotion of copyright changes from Review-i4060 and Review-i4060-01.

Revision 1.2.4.1  2008/12/31 16:10:00  rmulvey
Job:4060
This is a batch commit of 2009 copyright changes to branch Review-i4060.  This includes the
report that outlines all changes made (before/after for each line changed).  This report is found here: <cvs>/Documentation/internal/test_results/R2_1_2/i4060/update-copyright-results.txt.

Revision 1.2  2007/08/31 21:26:36  rmulvey
Job:2673
Moved the notes associated with closed issue into Documentation/technical/archive/20070830/notes

Revision 1.2  2007/01/25 00:28:36  campbell
Job:2705
Added references to existing Bugzilla items.

Revision 1.1  2007/01/25 00:11:30  campbell
Job:2705
Introduced.

