========================================================================

File:      $RCSfile$
Version:   $Revision$
Modified:  $Date$

(c) Copyright 2007-2009 by Mentor Graphics Corp. All rights reserved.

========================================================================
This document contains information proprietary and confidential to
Mentor Graphics Corp., and is not for external distribution.
========================================================================

BridgePoint Project Analysis Note
Structured Data Types

1. Abstract
-----------
This note describes how structured data types will be added to the BridgePoint
tool.

2. History
----------
    final - i478-020607-01.rvm

3. Document References
----------------------
[1] Bugzilla item 478
    http://tucson.wv.mentorg.com//bugzilla/show_bug.cgi?id=478
[2] Bugzilla item 1666
    http://tucson.wv.mentorg.com//bugzilla/show_bug.cgi?id=1666
[3] Bugzilla item 2724
    http://tucson.wv.mentorg.com//bugzilla/show_bug.cgi?id=2724
[4] Bugzilla item 2738
    http://tucson.wv.mentorg.com//bugzilla/show_bug.cgi?id=2738

4. Background
-------------
We need to support the declaration and access of structured data type values in
the BridgePoint tool.

5. Analysis
-----------
This note discusses the support of simple structured data types in BridgePoint.
See [2] for a discussion on the provision of full class instance reference
typing.

5.1 Create a simple subtype of Data Type
    In this approach, a new subtype of Data Type, 'Structured Data Type' has a
    new many to many association with the Data Type supertype. The associative
    class, 'Structure Member' shall have the name of the member as an attribute
    and have a reflexive association to control member ordering. Under a
    separate task[3], the association between User Defined Data Type and
    Core Data Type (R18) is moved to be between User Defined Data Type and the
    Data Type supertype. This will allow user defined types to call out all
    kinds of data types, not just core data types. This shall be done under a
    separate task because the model compilers must all be modified to process
    user defined types differently. In common with the policy for other
    metamodel elements, both 'Structured Data Type' and 'Structure Member' shall
    have 'Description' attributes.

5.2 Add new symbols to the Data Type diagram
    A new structured data type symbol shall be available in the Data Type
    Package Diagram. The structured type symbol will look like the other data
    type symbols, except that it will contain any added data members followed
    by the member type name separated from the member name by a colon as usual.
    Data type names will be fully qualified unless the type is declared in the
    same package. No operations or associations may be drawn between structured
    data types and other parts of the model. A structured data type may not
    possess a state machine (class or instance).
    
    Structured data types shall appear in the Model Explorer tree under the
    package in which they were declared. Nesting shall not extend past the
    immediate members. In other words, structured data type members that are
    themselves of a structured type shall not be expanded. All non core data
    types shall be shown in the tree with their type following a colon.
    
    Structured data type declarations are revision controlled with the enclosing
    Data Type Package.

5.3 Add new Menu entries
    The new symbol will allow new data members to be added using the standard
    context menu 'New > Data Member' idiom. Newly created data members shall
    default to integer type but they may be assigned another type (including a
    structured type) at any time. Members may be deleted and renamed. The
    structured data type may itself be deleted and renamed, either from the
    a canvas or from the Model Explorer.

5.4 Properties
    The properties view shall show the name of a selected Structured Data Type.
    It shall show the name and type of a selected data member.

5.5 Modify parser syntax
    The parser shall be modified so that attributes, parameters, event data
    items and temporary local variables may be of structured data type.
    Member values of structured data type variables may be accessed by using
    the standard dot operator. If a member of a structured data type is itself
    a structured data type, then dot operator references may be nested.
    
    Assignment is permitted between structured data type variables, provided
    they are of the same type. Equivalence and non equivalence are also allowed.
    No other operations shall be permitted on or between structured data type
    variables.
    
    Equivalence shall be based on member-wise comparison of values, not
    structure instance identity. When instance reference data types are
    introduced[2], their comparison shall be based on identity.

5.6 Modify Verifier
    Verifier will need to handle structured data types.

6. Work Required
----------------
6.1 Create a simple subtype of Data Type
    Add the Structured data type class cluster as described in the analysis.

6.2 Add new symbols to the Data Type diagram
    6.2.1 Add the Structured Data Type symbol to the Data Type diagram
    6.2.2 Modify the Model Explorer tree definition.
    6.2.3 Modify the OOA of OOA hierarchy and io pre-existing instance files to
          make structured data types comparable and to make them persistent.
    6.2.4 Modify core/color/ooaofooa_package_spec.clr to specify any new
          component boundary crossing associations.

6.3 Add new Menu entries
    6.3.1 Add new context menu entries to the pre-existing instance files as
          required by the analysis.
    6.3.2 Add new context menu entry functions to handle the menu invocations.

6.4 Properties
    Structured data types should appear in the properties as a result of changes
    to the OOA of OOA hierarchy file. This task checks that the properties look
    correct. Some coloring of the model may be required to ensure that the
    properties labels are human readable. Data type scoping shall be as for all
    other places where data types may be assigned, i.e. Domain level structure
    members may be assigned system level data types, but not vice versa.
    

6.5 Modify parser syntax
    6.5.1 The parser definition file oal.bnf shall be modified to allow the new
          syntax specified in the analysis section.
    6.5.2 A new subtype of Value will be required that allow the parser to
          capture the new syntax as metamodel instances.

6.6 Modify Verifier
    6.6.1 To handle structured data types, Verifier needs to implement a new
          computeValue() body for the new subtype created in 6.5.2 above.
    6.6.2 The Session Explorer tree (explorer/sql/InstUITree.pei.sql) requires
          new entries to allow a user to descend the value tree of structured
          data type. Note that this makes the Session Explorer and Variable
          Views infinitely deep (in theory anyway) for the first time. This is
          not a concern, since the JDT Variables View already has this property.

7. Acceptance Test
------------------
_- Check that structured types can be created and deleted.
_- Check that all places where a data type can be assigned can select a declared
   structured type (subject to normal scoping rules, see 6.4).
_- Check that members can be added to and deleted from a structured type.
_- Check that members of an attribute of a structured data type can be written
   and read.
_- Check that members of a bridge parameter of a structured data type can be
   accessed.
_- Check that members of a function parameter of a structured data type can be
   accessed.
_- Check that members of a operation parameter of a structured data type can be
   accessed.
_- Check that members of a event data item of a structured data type can be
   accessed.
_- Check that a bridge parameter of a structured data type can be passed.
_- Check that a function parameter of a structured data type can be passed.
_- Check that a operation parameter of a structured data type can be passed.
_- Check that an event data item of a structured data type can be passed in a
   generate statement.
_- Check that a temporary can be assigned from structured data type parameters,
   attributes etc.
_- Check that the temporary behaves the same way as the original (i.e. repeat
   all tests on the temporary).
_- Check that a temporary that has already been assigned to a compatible
   structured data type can be assigned.
_- Check that a temporary that has already been assigned to an incompatible
   structured data type cannot be assigned.
_- Check that a temporary that has already been assigned to something other than
   a structured data type cannot be assigned from a structure data type.
_- Check that == and != works between structured data types of the same type.
_- Check that == and != is an error between structured data types of different
   types.
_- Check that == and != is an error between a structured data type and a
   variable of a different kind.
_- New automated parser tests shall be created in the same style as for other
   pieces of syntax, in the oal test plugin.
_- A new model test suite shall also be created to prove Verifier. This suite
   shall also be used to prove the model compilers when they are upgraded to
   handle structured data types[4].

End
---

$Log$
Revision 1.3  2009/01/01 23:12:57  rmulvey
Job:4060
Batch promotion of copyright changes from Review-i4060 and Review-i4060-01.

Revision 1.2.4.1  2008/12/31 16:10:00  rmulvey
Job:4060
This is a batch commit of 2009 copyright changes to branch Review-i4060.  This includes the
report that outlines all changes made (before/after for each line changed).  This report is found here: <cvs>/Documentation/internal/test_results/R2_1_2/i4060/update-copyright-results.txt.

Revision 1.2  2007/08/31 21:26:35  rmulvey
Job:2673
Moved the notes associated with closed issue into Documentation/technical/archive/20070830/notes

Revision 1.10  2007/02/07 18:18:58  campbell
Job: 478
Address review issues.

Revision 1.9  2007/02/06 17:08:03  campbell
Job: 478
Fixed typos. Added some more details about changes to Verifier.

Revision 1.8  2007/02/05 23:19:59  campbell
Job: 478
Minor updates.

Revision 1.7  2007/02/05 22:40:21  campbell
Job: 478
Provided details for the Work Required and Acceptance test sections.

Revision 1.6  2007/02/01 22:05:55  campbell
Job: 478
More cosmetic changes.

Revision 1.5  2007/02/01 21:51:21  campbell
Job: 478
Cosmetic changes only.

Revision 1.4  2007/02/01 21:46:41  campbell
Job: 478
Removed imported package functionality.

Revision 1.3  2007/02/01 19:29:46  campbell
Job: 478
Reworked to discuss simple structured data types only.

Revision 1.2  2007/02/01 00:35:52  campbell
Job: 478
Cosmetics plus statement on operator overloading.

Revision 1.1  2007/02/01 00:26:43  campbell
Job: 478
Introduced.

