========================================================================

File:      $RCSfile$
Version:   $Revision$
Modified:  $Date$

(c) Copyright 2007-2009 by Mentor Graphics Corp. All rights reserved.

========================================================================
This document contains information proprietary and confidential to
Mentor Graphics Corp., and is not for external distribution.
========================================================================

BridgePoint Project Analysis Note
Component Diagram Graphics Infrastructure

1. Abstract
-----------
Component Diagrams place new requirements on the GD infrastructure. This note
describes how these will be addressed.

2. History
----------

3. Document References
----------------------
[1] Bugzilla item 1687
    http://tucson.wv.mentorg.com//bugzilla/show_bug.cgi?id=1687
[2] The Unified Modeling Language Reference Manual, Second Edition pg 324 Figure
		14-122  ISBN 0-321-24562-8
[3] The Unified Modeling Language Reference Manual, Second Edition pg 258 Figure
		14-76  ISBN 0-321-24562-8
[4] The Unified Modeling Language Reference Manual, Second Edition pg 586 Figure
		14-247  ISBN 0-321-24562-8
[5] The Unified Modeling Language Reference Manual, Second Edition pg 673 Figure
		14-285  ISBN 0-321-24562-8

4. Background
-------------
Component Diagrams place new requirements on the GD infrastructure. This note
describes an approach that will cover both these and also support some requested
sequence diagram enhancements.

5. Analysis
-----------
A Component diagram requires a enclosing container symbol. After examining
several alternatives where the enclosing symbol is drawn as an offset from the
edges of the visible canvas, it is concluded that nothing less than a user
editable (i.e movable and resizable) enclosing container works.

It turns out that these are needed elsewhere, for example a Sequence Diagram
can be optionally shown enclosed in such a container. Also the Use Case Diagram
subject symbol has these properties.

Sequence Diagrams also have a Conditional Fragment and Activity Diagrams have an
Activity Partition. These look like an enclosing container, but there most of
the similarity ends. This kind of symbol does not enclose all the symbols in the
diagram. In fact, to be easily editable, it cannot enclose _any_ symbols.
Otherwise, how are unwanted symbols to be excluded from a conditional fragment
or new ones added? It is much easier to imagine that these kinds of symbols may
be moved and resized freely. This level of semantics will be fine until sequence
and activity diagrams become more formalized.

Other requirements to meet are:

  - The enclosing container symbol is mandatory in the case of component
    diagrams but not for sequence diagrams.
  - Interface reference symbols on a parent component must be kept consistent
    with those on a child container component symbol and vice versa.

So we need new graphics infrastructure with the following properties:

5.1 A transparent symbol with no background. The symbols underneath show
    through. This symbol will show a name in the top left hand corner. The
    symbol can be picked up and moved only by clicking on the border (tolerance
    as for a connector) or by clicking on the name compartment (tolerance as for
    a shape).

5.2 A container shape that:
      - when moved, all other diagram graphics move with it.
      - resizes itself automatically to enclose all other diagram symbols

5.3 A symbol that represents the metamodel entity that the diagram represents.

5.4 A canvas tool that can be enabled and disabled based on the state of the
    canvas metamodel.

5.5 A canvas needs to listen for model changes and be prepared to instantiate
    new model graphics. It must do this unless the canvas is in a state where
    the graphic has already been created (as will be the case where the model
    change was initiated by the user through the canvas).

5.6 A shape symbol that automatically adds default connectors to itself when
    first drawn.

Note that these properties are independent, i.e a symbol may have only some of
these properties. Here is how these new properties would be used for the new
symbols proposed or considered here:

                               5.1         5.2        5.3         5.4     5.6
Component Container             y           y          y          y(1)     y
Component Symbol                n           n          n          y(2)    y(3)
Interface reference Symbol      n           n          n          y(2)     n
Sequence Container              y           y          y           n       n
Conditional Fragment            y           n          n           n       n

Notes:
1 - Enabled only when the canvas is empty
2 - Enabled only when the canvas is not empty
3 - A Used Component symbol will do this.

6. Work Required
----------------
6.1 Create a Transparent symbol property
6.1.1 Add a 'transparent' attribute to Element Specification
6.1.2 Add a 'transparent' attribute to the canvas element plugin schema
6.1.3 Read the attribute during startup (default to false)
6.1.4 Skip the fill bridge call if the elem spec indicates transparent == true
6.1.5 Modify Shape.draw to draw it as specified in [2].

6.2 Create a container shape
6.2.1 Add a 'container' attribute to Element Specification
6.2.2 Add a 'container' attribute to the canvas element plugin schema
6.2.3 Read the attribute during startup (default to false)
6.2.4 Create 2 new subtypes of GS_SHP named Containg Shape and NonContining 
      Shape.  Add analogous classes to  the specification hierarchy (simply for 
      orthagonality) so we have the following:
      In Graphical Data:
        GD_GE<-GD_SHP<-GD_CTR (the container)
                     <-GD_NCS (the non container)
      In Terminal Specifications:
        GD_ES<-TS_SSP<-TS_CTS (the container specification)
                     <-TS_NCS (the non container spec)
6.2.5 Create a new enclosure symbol styles for container Component, container
      Sequence and Use Case container (they all look slightly different).
6.2.6 Add a draw operation to draw them as specified in [3,4,5].
6.2.7 Add a move operation that selects all the other elements and commands them
      to move by the same delta.
6.2.8 Modify the drawing tool state machines to resize the container shape, if
      one exists, to enclose all the other symbols. We should take this
      opportunity to consider text positions and extents, I don't think we do
      for printout sizing. We should see if we can't take this opportunity to
      improve the hard copy output too.

6.3 Allow a component to represent the parent diagram
6.3.1 Add OAL to the Shape Creating Element state that sets the represents
      attribute directly from the represents value of the GD_MD instance. This
      isn't needed for Connector because a connector cannot forseeably represent
      the parent diagram meta model element.

6.4 Automatically instantiate new graphics
6.4.1 Add a new attribute to Element Specification, 'creationRule'. Valid values
      shall be "manual" and "on canvas creation".
6.4.2 Add the new attribute to the canvas element plugin schema
6.4.3 The default shall be "manual ". This shall enable the same behavior the 
      tool exhibits today.
6.4.4 Read the attributes during startup and set the attribute specified in
      6.4.1.
6.4.5 The "on canvas creation" option shall suppress the appearance of a tool
      button for creating the graphic.
6.4.6 In the Model class, the operation, 'initialize shall be extended to search
      the set of Element Specification classes (for that Model type) for one
      which has the creationRule attribute set to "on canvas creation". If one
      is found, a Graphical Element and suitable subtype shall be created (note
      that the subtype of the created graphical element shall be based on the
      subype of the Element Specification). This new GE shall be related to the
      new Model instance, as well as to the Element Specification. The
      size and position of the new GE shall be chosen as an offset from the
      default values for the Model class such that the new graphic appears
      centered and proportionately smaller than the initial canvas presentation.
6.4.7 The represents attribute for the symbol shall be set to be the same as
      that of the diagram.
      
6.5 Add a transaction listener to handle connector autocreation
6.5.1 Install a transaction listener for new model elements that looks through
      all graphical elements that represent the affected component root element
      (It should be possible to navigate from the Element Specification
      instances to cut down on the size of the population searched).
6.5.2 If such an element exists, and its canvas is in an idle state, add the
      required graphic and set up the represents attribute.
6.5.3 For shapes, place the shape somewhere on the diagram where it will not
      overlap with anything else.
6.5.4 For connectors ending on two shapes, draw a single segment from the center
      of one shape to the center of the other.
6.5.5 For connectors ending on one shape, draw a single short segment from the
      center of a side with no other connectors or, if all sides are occupied,
      as far as possible from other connectors and corners as possible.

6.6 Autocreate connectors
6.6.1 Add a new element <autocreate> to the canvas plugin <symbol> element.
6.6.2 Add xml attributes 'name', 'countMethod' and 'elementMethod'. 
6.6.3 This element valid only for shapes (isConnector = "false")
6.6.4 When a shape is created, call countMethod to find how many connectors to
      create.
6.6.5 If count is non-zero, call elementMethod to get the UUID value for each
      connector.
6.6.6 If the element already exists on the symbol, do nothing. If not create a
      new graphical element and set its represents value appropriately.
6.6.7 Use the same connector layout method as defined in 6.5.5 above.

6.7 Move to an enumerated symbol type
6.7.1 Modify the canvas plugin schema to replace the 'isConnector' attribute
      with a symbolType attribute, this shall take values of "shape",
      "connector" and "container".
6.7.2 Modify the CanvasPlugin startup code to jive with this change.
6.7.3 Instantiate the new Container shape subtype when the value is "container".
6.7.4 Instantiate the new Container shape subtype when the value is "shape".

6.8 Movement and resize rules
6.8.1 Drawing, moving and resizing shapes inside a container shape.
6.8.1.1 When a shape is drawn, moved or resized so that it passes over the
        boundary of the container shape, the container shall automatically
        enlarge so that the inner shape cannot appear outside of the container.
6.8.1.2 No automatic reduction in size shall be attempted, the user shall be
        expected to manually resize the container shape (see 6.8.2).        
6.8.1.3 Automatic enlargement shall be done by adding an autoSize operation to
        the container shape subtype. It shall be called from all states of the
        Selection, Shape and Connector tools. Most states which are transitioned
        into in response to a Mouse Move event will need to call this new
        operation.
6.8.2 Moving and resizing the container shape.
6.8.2.1 Container drawing rules are already specified above in 6.2.
6.8.2.2 Resizing the container shape shall be subject to the same rules
        described in 6.8.1. In other words, the autoSize call is made, even if
        the shape being resized is the container itself. Thus, the user will be
        able to make a container larger than the minimum size, but when they
        reach the minimum value in any dimaension, the autoSize call shall reset
        the dimensions to the minimu size and the extent of the symbol will stop
        following the mouse.

7. Acceptance Test
------------------

End
---

$Log$
Revision 1.3  2009/01/01 23:12:57  rmulvey
Job:4060
Batch promotion of copyright changes from Review-i4060 and Review-i4060-01.

Revision 1.2.4.1  2008/12/31 16:10:01  rmulvey
Job:4060
This is a batch commit of 2009 copyright changes to branch Review-i4060.  This includes the
report that outlines all changes made (before/after for each line changed).  This report is found here: <cvs>/Documentation/internal/test_results/R2_1_2/i4060/update-copyright-results.txt.

Revision 1.2  2007/08/31 21:26:36  rmulvey
Job:2673
Moved the notes associated with closed issue into Documentation/technical/archive/20070830/notes

Revision 1.7  2007/06/08 22:20:05  rmulvey
Job:1687
Updated based on discussion in IM between Campbell, Travis, and I.  Made the following changes:

Revision 1.6  2007/06/08 20:53:58  campbell
Job:1687
Added more detailed requirements.

Revision 1.5  2007/01/31 21:07:44  campbell
Job: 1687
Added connector autocreate Work Required section details.

Revision 1.4  2007/01/31 20:44:31  campbell
Job: 1687
Added connector autocreate requirement and graphics autosynchronize Work Required section details.

Revision 1.3  2007/01/31 20:17:18  campbell
Job: 1687
Added Work Required section details.

Revision 1.2  2007/01/31 18:44:37  campbell
Job: 1687
Added automatic graphics creation capability.

Revision 1.1  2007/01/31 17:41:15  campbell
Job: 1687
Introduced.

