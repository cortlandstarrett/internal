package com.mentor.nucleus.bp.ui.session;
//========================================================================
//
// File: com/mentor/nucleus/bp/ui/session/SessionExplorerLabelProvider.java
//
// WARNING:      Do not edit this generated file
// Generated by: ../com.mentor.nucleus.bp.ui.tree/arc/create_generic_label_provider.inc
// Version:      **Revision**
//
// (c) Copyright 2006-2014 by Mentor Graphics Corp.  All rights reserved.
//
//========================================================================
// Licensed under the Apache License, Version 2.0 (the "License"); you may not 
// use this file except in compliance with the License.  You may obtain a copy 
// of the License at
//
//       http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software 
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT 
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   See the 
// License for the specific language governing permissions and limitations under
// the License.
//======================================================================== 
//
// This class is responsible for decoupling the client model objects
// from the tree viewer by providing the naming and label information
// for the tree to show.
//
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;

import org.eclipse.jface.viewers.LabelProvider;
import org.eclipse.swt.graphics.Image;

import com.mentor.nucleus.bp.core.*;

/**
 * This file adapts the meta-model entities so that they work with the
 * Eclipse JFace user interface components.
 * <p>
 * Do not edit this class, it was created using the Project 
 * Technology MC-Java code generator product.
 * </p>
 */
public class SessionExplorerLabelProvider extends LabelProvider {
	private Map imageCache = new HashMap(11);
	/**
	 * @see ILabelProvider#getImage(Object)
	 */
	public Image getImage(Object element) {
		return CorePlugin.getImageFor(element);
	}
	/**
	 * @see ILabelProvider#getText(Object)
	 */
	public String getText(Object element) {
		if (element instanceof SystemModel_c) {
			String text = ((SystemModel_c) element).getName();
			if (text == null) {
				return "";
			} else {
				return text;
			}
		} else if (element instanceof Domain_c) {
			String text = ((Domain_c) element).getName();
			if (text == null) {
				return "";
			} else {
				return text;
			}
		} else if (element instanceof Function_c) {
			String text = ((Function_c) element).getName();
			if (text == null) {
				return "";
			} else {
				return text;
			}
		} else if (element instanceof _c) {
			String text = ((_c) element).getLabel();
			if (text == null) {
				return "";
			} else {
				return text;
			}
		} else if (element instanceof Instance_c) {
			String text = ((Instance_c) element).getLabel();
			if (text == null) {
				return "";
			} else {
				return text;
			}
		} else if (element instanceof AttributeValue_c) {
			String text = ((AttributeValue_c) element).getLabel();
			if (text == null) {
				return "";
			} else {
				return text;
			}
		} else if (element instanceof PendingEvent_c) {
			String text = ((PendingEvent_c) element).getLabel();
			if (text == null) {
				return "";
			} else {
				return text;
			}
		} else if (element instanceof StateMachineState_c) {
			String text = ((StateMachineState_c) element).getName();
			if (text == null) {
				return "";
			} else {
				return text;
			}
		} else if (element instanceof StateMachineState_c) {
			String text = ((StateMachineState_c) element).getName();
			if (text == null) {
				return "";
			} else {
				return text;
			}
		} else if (element instanceof _c) {
			String text = ((_c) element).getLabel();
			if (text == null) {
				return "";
			} else {
				return text;
			}
		} else if (element instanceof Component_c) {
			String text = ((Component_c) element).getLabel();
			if (text == null) {
				return "";
			} else {
				return text;
			}
		} else if (element instanceof ComponentInstance_c) {
			String text = ((ComponentInstance_c) element).getLabel();
			if (text == null) {
				return "";
			} else {
				return text;
			}
		} else if (element instanceof Port_c) {
			String text = ((Port_c) element).getName();
			if (text == null) {
				return "";
			} else {
				return text;
			}
		} else if (element instanceof Provision_c) {
			String text = ((Provision_c) element).getName();
			if (text == null) {
				return "";
			} else {
				return text;
			}
		} else if (element instanceof Requirement_c) {
			String text = ((Requirement_c) element).getName();
			if (text == null) {
				return "";
			} else {
				return text;
			}
		} else if (element instanceof ProvidedOperation_c) {
			String text = ((ProvidedOperation_c) element).getName();
			if (text == null) {
				return "";
			} else {
				return text;
			}
		} else if (element instanceof ProvidedSignal_c) {
			String text = ((ProvidedSignal_c) element).getName();
			if (text == null) {
				return "";
			} else {
				return text;
			}
		} else if (element instanceof RequiredOperation_c) {
			String text = ((RequiredOperation_c) element).getName();
			if (text == null) {
				return "";
			} else {
				return text;
			}
		} else if (element instanceof RequiredSignal_c) {
			String text = ((RequiredSignal_c) element).getName();
			if (text == null) {
				return "";
			} else {
				return text;
			}
		} else if (element instanceof PropertyParameter_c) {
			String text = ((PropertyParameter_c) element).getName();
			if (text == null) {
				return "";
			} else {
				return text;
			}
		} else if (element instanceof Operation_c) {
			String text = ((Operation_c) element).getName();
			if (text == null) {
				return "";
			} else {
				return text;
			}
		} else if (element instanceof ComponentReference_c) {
			String text = ((ComponentReference_c) element).getName();
			if (text == null) {
				return "";
			} else {
				return text;
			}
		} else if (element instanceof ComponentInstance_c) {
			String text = ((ComponentInstance_c) element).getLabel();
			if (text == null) {
				return "";
			} else {
				return text;
			}
		} else if (element instanceof LinkParticipation_c) {
			String text = ((LinkParticipation_c) element).getLabel();
			if (text == null) {
				return "";
			} else {
				return text;
			}
		} else if (element instanceof FunctionPackage_c) {
			String text = ((FunctionPackage_c) element).getName();
			if (text == null) {
				return "";
			} else {
				return text;
			}
		} else if (element instanceof FunctionParameter_c) {
			String text = ((FunctionParameter_c) element).getName();
			if (text == null) {
				return "";
			} else {
				return text;
			}
		} else if (element instanceof Package_c) {
			String text = ((Package_c) element).getName();
			if (text == null) {
				return "";
			} else {
				return text;
			}
		}
		return "Unknown Model Element";
	}
	/**
	 * @see ILabelProvider#dispose()
	 */
	public void dispose() {
		for (Iterator i = imageCache.values().iterator(); i.hasNext();) {
			((Image) i.next()).dispose();
		}
		imageCache.clear();
	}
}
