package com.mentor.nucleus.bp.ui.session;
//========================================================================
//
// File: com/mentor/nucleus/bp/ui/session/SessionExplorerContentProvider.java
//
// WARNING:      Do not edit this generated file
// Generated by: ../com.mentor.nucleus.bp.ui.tree/arc/create_generic_content_provider.inc
// Version:      **Revision**
//
// (c) Copyright 2006-2014 by Mentor Graphics Corp.  All rights reserved.
//
//========================================================================
// Licensed under the Apache License, Version 2.0 (the "License"); you may not 
// use this file except in compliance with the License.  You may obtain a copy 
// of the License at
//
//       http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software 
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT 
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   See the 
// License for the specific language governing permissions and limitations under
// the License.
//======================================================================== 
//
// This class is an adapter that decouples the client model objects from
// the tree viewer by delegating the job of finding a parent of an element
// or the children of an element to the correct adapter.
//
import org.eclipse.jface.viewers.ITreeContentProvider;
import org.eclipse.jface.viewers.TreeViewer;
import org.eclipse.jface.viewers.Viewer;

import com.mentor.nucleus.bp.core.*;
import com.mentor.nucleus.bp.core.sorter.*;
import com.mentor.nucleus.bp.ui.session.adapters.*;

public class SessionExplorerContentProvider implements ITreeContentProvider {
	protected TreeViewer viewer;
	protected static MetadataSortingManager.ISorter sorter = new AlphaSorter();
	/**
	 * @see IContentProvider#dispose()
	 */
	public void dispose() {
		// No resources allocated, nothing to dispose.
	}
	/**
	 * @see IContentProvider#inputChanged(Viewer, Object, Object)
	 */
	/**
	 * Notifies this content provider that the given viewer's input
	 * has been switched to a different element.
	 * <p>
	 * A typical use for this method is registering the content provider as a listener
	 * to changes on the new input (using model-specific means), and deregistering the viewer
	 * from the old input. In response to these change notifications, the content provider
	 * propagates the changes to the viewer.
	 * </p>
	 *
	 * @param viewer the viewer
	 * @param oldInput the old input element, or <code>null</code> if the viewer
	 *   did not previously have an input
	 * @param newInput the new input element, or <code>null</code> if the viewer
	 *   does not have an input
	 */
	public void inputChanged(Viewer viewer, Object oldInput, Object newInput) {
		// Singleton model, nothing to do
	}
	/**
	 * @see ITreeContentProvider#getChildren(Object)
	 */
	public Object[] getChildren(Object parentElement) {
		if (parentElement instanceof Ooaofooa) {
			return RootAdapter.getInstance().getChildren(parentElement);
		}
		if (parentElement instanceof SystemModel_c) {
			return SystemAdapter.getInstance().getChildren(parentElement);
		}
		if (parentElement instanceof Domain_c) {
			return DomainsAdapter.getInstance().getChildren(parentElement);
		}
		if (parentElement instanceof Function_c) {
			return FunctionsAdapter.getInstance().getChildren(parentElement);
		}
		if (parentElement instanceof _c) {
			return ClassesAdapter.getInstance().getChildren(parentElement);
		}
		if (parentElement instanceof Instance_c) {
			return InstancesAdapter.getInstance().getChildren(parentElement);
		}
		if (parentElement instanceof AttributeValue_c) {
			return ValuesAdapter.getInstance().getChildren(parentElement);
		}
		if (parentElement instanceof PendingEvent_c) {
			return PendingeventsAdapter.getInstance()
					.getChildren(parentElement);
		}
		if (parentElement instanceof StateMachineState_c) {
			return ClassStatesAdapter.getInstance().getChildren(parentElement);
		}
		if (parentElement instanceof StateMachineState_c) {
			return StatesAdapter.getInstance().getChildren(parentElement);
		}
		if (parentElement instanceof _c) {
			return RuntimevaluesAdapter.getInstance()
					.getChildren(parentElement);
		}
		if (parentElement instanceof Component_c) {
			return ComponentsAdapter.getInstance().getChildren(parentElement);
		}
		if (parentElement instanceof ComponentInstance_c) {
			return ComponentInstancesAdapter.getInstance().getChildren(
					parentElement);
		}
		if (parentElement instanceof Port_c) {
			return PortsAdapter.getInstance().getChildren(parentElement);
		}
		if (parentElement instanceof Provision_c) {
			return ProvisionsAdapter.getInstance().getChildren(parentElement);
		}
		if (parentElement instanceof Requirement_c) {
			return RequirementsAdapter.getInstance().getChildren(parentElement);
		}
		if (parentElement instanceof ProvidedOperation_c) {
			return ProvidedOperationsAdapter.getInstance().getChildren(
					parentElement);
		}
		if (parentElement instanceof ProvidedSignal_c) {
			return ProvidedSignalsAdapter.getInstance().getChildren(
					parentElement);
		}
		if (parentElement instanceof RequiredOperation_c) {
			return RequiredOperationsAdapter.getInstance().getChildren(
					parentElement);
		}
		if (parentElement instanceof RequiredSignal_c) {
			return RequiredSignalsAdapter.getInstance().getChildren(
					parentElement);
		}
		if (parentElement instanceof PropertyParameter_c) {
			return ParametersAdapter.getInstance().getChildren(parentElement);
		}
		if (parentElement instanceof Operation_c) {
			return OperationsAdapter.getInstance().getChildren(parentElement);
		}
		if (parentElement instanceof ComponentReference_c) {
			return ComponentReferencesAdapter.getInstance().getChildren(
					parentElement);
		}
		if (parentElement instanceof ComponentInstance_c) {
			return ComponentReferenceInstancesAdapter.getInstance()
					.getChildren(parentElement);
		}
		if (parentElement instanceof LinkParticipation_c) {
			return AssociationsAdapter.getInstance().getChildren(parentElement);
		}
		if (parentElement instanceof FunctionPackage_c) {
			return FunctionPackagesAdapter.getInstance().getChildren(
					parentElement);
		}
		if (parentElement instanceof FunctionParameter_c) {
			return FunctionParametersAdapter.getInstance().getChildren(
					parentElement);
		}
		if (parentElement instanceof Package_c) {
			return PackagesAdapter.getInstance().getChildren(parentElement);
		}
		return null;
	}
	/**
	 * @see ITreeContentProvider#getParent(Object)
	 */
	public Object getParent(Object element) {
		if (element instanceof Ooaofooa) {
			return RootAdapter.getInstance().getParent(element);
		}
		if (element instanceof SystemModel_c) {
			return SystemAdapter.getInstance().getParent(element);
		}
		if (element instanceof Domain_c) {
			return DomainsAdapter.getInstance().getParent(element);
		}
		if (element instanceof Function_c) {
			return FunctionsAdapter.getInstance().getParent(element);
		}
		if (element instanceof _c) {
			return ClassesAdapter.getInstance().getParent(element);
		}
		if (element instanceof Instance_c) {
			return InstancesAdapter.getInstance().getParent(element);
		}
		if (element instanceof AttributeValue_c) {
			return ValuesAdapter.getInstance().getParent(element);
		}
		if (element instanceof PendingEvent_c) {
			return PendingeventsAdapter.getInstance().getParent(element);
		}
		if (element instanceof StateMachineState_c) {
			return ClassStatesAdapter.getInstance().getParent(element);
		}
		if (element instanceof StateMachineState_c) {
			return StatesAdapter.getInstance().getParent(element);
		}
		if (element instanceof _c) {
			return RuntimevaluesAdapter.getInstance().getParent(element);
		}
		if (element instanceof Component_c) {
			return ComponentsAdapter.getInstance().getParent(element);
		}
		if (element instanceof ComponentInstance_c) {
			return ComponentInstancesAdapter.getInstance().getParent(element);
		}
		if (element instanceof Port_c) {
			return PortsAdapter.getInstance().getParent(element);
		}
		if (element instanceof Provision_c) {
			return ProvisionsAdapter.getInstance().getParent(element);
		}
		if (element instanceof Requirement_c) {
			return RequirementsAdapter.getInstance().getParent(element);
		}
		if (element instanceof ProvidedOperation_c) {
			return ProvidedOperationsAdapter.getInstance().getParent(element);
		}
		if (element instanceof ProvidedSignal_c) {
			return ProvidedSignalsAdapter.getInstance().getParent(element);
		}
		if (element instanceof RequiredOperation_c) {
			return RequiredOperationsAdapter.getInstance().getParent(element);
		}
		if (element instanceof RequiredSignal_c) {
			return RequiredSignalsAdapter.getInstance().getParent(element);
		}
		if (element instanceof PropertyParameter_c) {
			return ParametersAdapter.getInstance().getParent(element);
		}
		if (element instanceof Operation_c) {
			return OperationsAdapter.getInstance().getParent(element);
		}
		if (element instanceof ComponentReference_c) {
			return ComponentReferencesAdapter.getInstance().getParent(element);
		}
		if (element instanceof ComponentInstance_c) {
			return ComponentReferenceInstancesAdapter.getInstance().getParent(
					element);
		}
		if (element instanceof LinkParticipation_c) {
			return AssociationsAdapter.getInstance().getParent(element);
		}
		if (element instanceof FunctionPackage_c) {
			return FunctionPackagesAdapter.getInstance().getParent(element);
		}
		if (element instanceof FunctionParameter_c) {
			return FunctionParametersAdapter.getInstance().getParent(element);
		}
		if (element instanceof Package_c) {
			return PackagesAdapter.getInstance().getParent(element);
		}
		return null;
	}
	/**
	 * @see ITreeContentProvider#hasChildren(Object)
	 */
	public boolean hasChildren(Object element) {
		if (element instanceof Ooaofooa) {
			return RootAdapter.getInstance().hasChildren(element);
		}
		if (element instanceof SystemModel_c) {
			return SystemAdapter.getInstance().hasChildren(element);
		}
		if (element instanceof Domain_c) {
			return DomainsAdapter.getInstance().hasChildren(element);
		}
		if (element instanceof Function_c) {
			return FunctionsAdapter.getInstance().hasChildren(element);
		}
		if (element instanceof _c) {
			return ClassesAdapter.getInstance().hasChildren(element);
		}
		if (element instanceof Instance_c) {
			return InstancesAdapter.getInstance().hasChildren(element);
		}
		if (element instanceof AttributeValue_c) {
			return ValuesAdapter.getInstance().hasChildren(element);
		}
		if (element instanceof PendingEvent_c) {
			return PendingeventsAdapter.getInstance().hasChildren(element);
		}
		if (element instanceof StateMachineState_c) {
			return ClassStatesAdapter.getInstance().hasChildren(element);
		}
		if (element instanceof StateMachineState_c) {
			return StatesAdapter.getInstance().hasChildren(element);
		}
		if (element instanceof _c) {
			return RuntimevaluesAdapter.getInstance().hasChildren(element);
		}
		if (element instanceof Component_c) {
			return ComponentsAdapter.getInstance().hasChildren(element);
		}
		if (element instanceof ComponentInstance_c) {
			return ComponentInstancesAdapter.getInstance().hasChildren(element);
		}
		if (element instanceof Port_c) {
			return PortsAdapter.getInstance().hasChildren(element);
		}
		if (element instanceof Provision_c) {
			return ProvisionsAdapter.getInstance().hasChildren(element);
		}
		if (element instanceof Requirement_c) {
			return RequirementsAdapter.getInstance().hasChildren(element);
		}
		if (element instanceof ProvidedOperation_c) {
			return ProvidedOperationsAdapter.getInstance().hasChildren(element);
		}
		if (element instanceof ProvidedSignal_c) {
			return ProvidedSignalsAdapter.getInstance().hasChildren(element);
		}
		if (element instanceof RequiredOperation_c) {
			return RequiredOperationsAdapter.getInstance().hasChildren(element);
		}
		if (element instanceof RequiredSignal_c) {
			return RequiredSignalsAdapter.getInstance().hasChildren(element);
		}
		if (element instanceof PropertyParameter_c) {
			return ParametersAdapter.getInstance().hasChildren(element);
		}
		if (element instanceof Operation_c) {
			return OperationsAdapter.getInstance().hasChildren(element);
		}
		if (element instanceof ComponentReference_c) {
			return ComponentReferencesAdapter.getInstance()
					.hasChildren(element);
		}
		if (element instanceof ComponentInstance_c) {
			return ComponentReferenceInstancesAdapter.getInstance()
					.hasChildren(element);
		}
		if (element instanceof LinkParticipation_c) {
			return AssociationsAdapter.getInstance().hasChildren(element);
		}
		if (element instanceof FunctionPackage_c) {
			return FunctionPackagesAdapter.getInstance().hasChildren(element);
		}
		if (element instanceof FunctionParameter_c) {
			return FunctionParametersAdapter.getInstance().hasChildren(element);
		}
		if (element instanceof Package_c) {
			return PackagesAdapter.getInstance().hasChildren(element);
		}
		// Unknown element
		return false;
	}
	/**
	 * @see IStructuredContentProvider#getElements(Object)
	 */
	public Object[] getElements(Object inputElement) {
		return getChildren(inputElement);
	}
	public static void sort(Object[] elements) {
		sorter.sort(elements);
	}
}
