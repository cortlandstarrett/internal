package com.mentor.nucleus.bp.ui.session.adapters;
//======================================================================
//
// File: com/mentor/nucleus/bp/ui/session/adapters/InstancesAdapter.java
//
// WARNING:      Do not edit this generated file
// Generated by: ../com.mentor.nucleus.bp.ui.tree/arc/create_generic_adapters.inc
// Version:      $Revision$
//
// (c) Copyright 2006-2014 by Mentor Graphics Corp.  All rights reserved.
//
//========================================================================
// Licensed under the Apache License, Version 2.0 (the "License"); you may not 
// use this file except in compliance with the License.  You may obtain a copy 
// of the License at
//
//       http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software 
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT 
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   See the 
// License for the specific language governing permissions and limitations under
// the License.
//======================================================================== 
//
// This class is responsible for decoupling the client model entity
// class Instance_c from the tree viewer and the hierarchy
// it imposes.
//
import java.util.ArrayList;
import java.util.List;

import org.eclipse.jface.viewers.ITreeContentProvider;
import org.eclipse.jface.viewers.Viewer;
import com.mentor.nucleus.bp.core.*;
import com.mentor.nucleus.bp.core.common.*;
import com.mentor.nucleus.bp.ui.session.SessionExplorerContentProvider;
/**
 * This file adapts the meta-model entity; 'Instance_c'
 * so that it works with the Eclipse JFace user interface components.
 * <p>
 * Do not edit this class, it was created using the Project 
 * Technology MC-Java code generator product.
 * </p>
 */
public class InstancesAdapter implements ITreeContentProvider {
	static InstancesAdapter instancesadapter = null;
	/**
	 * Returns the adapters singleton instance. If this
	 * is the first time, the instance is created.
	 */
	public static InstancesAdapter getInstance() {
		if (instancesadapter == null) {
			instancesadapter = new InstancesAdapter();
		}
		return instancesadapter;
	}
	/**
	 * @see IContentProvider#inputChanged(Viewer, Object, Object)
	 * Called when the tree's input has been changed
	 */
	public void inputChanged(Viewer viewer, Object oldInput, Object newInput) {
		// Nothing to do
	}
	/**
	 * @see IContentProvider#dispose()
	 * Called when this viewer is no longer needed
	 */
	public void dispose() {
		// Nothing to dispose
	}
	/**
	 * @see ITreeContentProvider#getParent(Object)
	 * Returns the parent of this node
	 */
	public Object getParent(Object arg) {
    _c result7 = (Instance_c)arg);
    if (result7 != null) {
      return result7;
    }
    LinkParticipation_c result8 = LinkParticipation_c.getOneI_LIPOnR2901(Link_c.getOneI_LNKOnR2903(LinkParticipation_c.getOneI_LIPOnR2958((Instance_c)arg)));
    if (result8 != null) {
      return result8;
    }
    LinkParticipation_c result9 = LinkParticipation_c.getOneI_LIPOnR2902(Link_c.getOneI_LNKOnR2903(LinkParticipation_c.getOneI_LIPOnR2958((Instance_c)arg)));
    if (result9 != null) {
      return result9;
    }
    LinkParticipation_c result10 = LinkParticipation_c.getOneI_LIPOnR2958((Instance_c)arg);
    if (result10 != null) {
      return result10;
    }
    return null;
  }
	/**
	 * @see IStructuredContentProvider#getElements(Object)
	 * Returns the elements below this node
	 */
	public Object[] getElements(Object arg) {
		return getChildren(arg);
	}

	/**
	 * @see ITreeContentProvider#getChildren(Object)
	 * Returns the children of this node
	 */
	public Object[] getChildren(Object arg) {
		int resultSize = 0;
		StateMachineState_c[] states_2915_0 = StateMachineState_c
				.getManySM_STATEsOnR2915((Instance_c) arg);

		SessionExplorerContentProvider.sort(states_2915_0);
		resultSize += states_2915_0.length;
		AttributeValue_c[] values_2909_1 = AttributeValue_c
				.getManyI_AVLsOnR2909((Instance_c) arg);

		resultSize += values_2909_1.length;
		PendingEvent_c[] pendingevents_2935_2 = PendingEvent_c
				.getManyI_EVIsOnR2935((Instance_c) arg);

		resultSize += pendingevents_2935_2.length;
		LinkParticipation_c[] associations_2958_3 = LinkParticipation_c
				.getManyI_LIPsOnR2902(Link_c
						.getManyI_LNKsOnR2901(LinkParticipation_c
								.getManyI_LIPsOnR2958((Instance_c) arg)));

		resultSize += associations_2958_3.length;
		LinkParticipation_c[] associations_2958_4 = LinkParticipation_c
				.getManyI_LIPsOnR2901(Link_c
						.getManyI_LNKsOnR2902(LinkParticipation_c
								.getManyI_LIPsOnR2958((Instance_c) arg)));

		resultSize += associations_2958_4.length;
		LinkParticipation_c[] associations_2958_5 = LinkParticipation_c
				.getManyI_LIPsOnR2901(Link_c
						.getManyI_LNKsOnR2903(LinkParticipation_c
								.getManyI_LIPsOnR2958((Instance_c) arg)));

		resultSize += associations_2958_5.length;
		LinkParticipation_c[] associations_2958_6 = LinkParticipation_c
				.getManyI_LIPsOnR2902(Link_c
						.getManyI_LNKsOnR2903(LinkParticipation_c
								.getManyI_LIPsOnR2958((Instance_c) arg)));

		resultSize += associations_2958_6.length;
		Object[] result = new Object[resultSize];
		int count = 0;
		for (int i = 0; i < states_2915_0.length; i++) {
			result[count] = states_2915_0[i];
			count++;
		}
		for (int i = 0; i < values_2909_1.length; i++) {
			result[count] = values_2909_1[i];
			count++;
		}
		for (int i = 0; i < pendingevents_2935_2.length; i++) {
			result[count] = pendingevents_2935_2[i];
			count++;
		}
		for (int i = 0; i < associations_2958_3.length; i++) {
			result[count] = associations_2958_3[i];
			count++;
		}
		for (int i = 0; i < associations_2958_4.length; i++) {
			result[count] = associations_2958_4[i];
			count++;
		}
		for (int i = 0; i < associations_2958_5.length; i++) {
			result[count] = associations_2958_5[i];
			count++;
		}
		for (int i = 0; i < associations_2958_6.length; i++) {
			result[count] = associations_2958_6[i];
			count++;
		}
		return result;
	}
	/**
	 * @see ITreeContentProvider#hasChildren(Object)
	 * Returns true if this node has any children
	 */
	public boolean hasChildren(Object arg) {
		StateMachineState_c[] states_2915_0 = StateMachineState_c
				.getManySM_STATEsOnR2915((Instance_c) arg);

		if (states_2915_0.length > 0)
			return true;
		AttributeValue_c[] values_2909_1 = AttributeValue_c
				.getManyI_AVLsOnR2909((Instance_c) arg);

		if (values_2909_1.length > 0)
			return true;
		PendingEvent_c[] pendingevents_2935_2 = PendingEvent_c
				.getManyI_EVIsOnR2935((Instance_c) arg);

		if (pendingevents_2935_2.length > 0)
			return true;
		LinkParticipation_c[] associations_2958_3 = LinkParticipation_c
				.getManyI_LIPsOnR2902(Link_c
						.getManyI_LNKsOnR2901(LinkParticipation_c
								.getManyI_LIPsOnR2958((Instance_c) arg)));

		if (associations_2958_3.length > 0)
			return true;
		LinkParticipation_c[] associations_2958_4 = LinkParticipation_c
				.getManyI_LIPsOnR2901(Link_c
						.getManyI_LNKsOnR2902(LinkParticipation_c
								.getManyI_LIPsOnR2958((Instance_c) arg)));

		if (associations_2958_4.length > 0)
			return true;
		LinkParticipation_c[] associations_2958_5 = LinkParticipation_c
				.getManyI_LIPsOnR2901(Link_c
						.getManyI_LNKsOnR2903(LinkParticipation_c
								.getManyI_LIPsOnR2958((Instance_c) arg)));

		if (associations_2958_5.length > 0)
			return true;
		LinkParticipation_c[] associations_2958_6 = LinkParticipation_c
				.getManyI_LIPsOnR2902(Link_c
						.getManyI_LNKsOnR2903(LinkParticipation_c
								.getManyI_LIPsOnR2958((Instance_c) arg)));

		if (associations_2958_6.length > 0)
			return true;
		return false;
	}
}
