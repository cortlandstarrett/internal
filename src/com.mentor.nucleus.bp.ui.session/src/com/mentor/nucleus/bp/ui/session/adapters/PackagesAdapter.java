package com.mentor.nucleus.bp.ui.session.adapters;
//======================================================================
//
// File: com/mentor/nucleus/bp/ui/session/adapters/PackagesAdapter.java
//
// WARNING:      Do not edit this generated file
// Generated by: ../com.mentor.nucleus.bp.ui.tree/arc/create_generic_adapters.inc
// Version:      $Revision$
//
// (c) Copyright 2006-2014 by Mentor Graphics Corp.  All rights reserved.
//
//========================================================================
// Licensed under the Apache License, Version 2.0 (the "License"); you may not 
// use this file except in compliance with the License.  You may obtain a copy 
// of the License at
//
//       http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software 
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT 
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   See the 
// License for the specific language governing permissions and limitations under
// the License.
//======================================================================== 
//
// This class is responsible for decoupling the client model entity
// class Package_c from the tree viewer and the hierarchy
// it imposes.
//
import java.util.ArrayList;
import java.util.List;

import org.eclipse.jface.viewers.ITreeContentProvider;
import org.eclipse.jface.viewers.Viewer;
import com.mentor.nucleus.bp.core.*;
import com.mentor.nucleus.bp.core.common.*;
import com.mentor.nucleus.bp.ui.session.SessionExplorerContentProvider;
/**
 * This file adapts the meta-model entity; 'Package_c'
 * so that it works with the Eclipse JFace user interface components.
 * <p>
 * Do not edit this class, it was created using the Project 
 * Technology MC-Java code generator product.
 * </p>
 */
public class PackagesAdapter implements ITreeContentProvider {
	static PackagesAdapter packagesadapter = null;
	/**
	 * Returns the adapters singleton instance. If this
	 * is the first time, the instance is created.
	 */
	public static PackagesAdapter getInstance() {
		if (packagesadapter == null) {
			packagesadapter = new PackagesAdapter();
		}
		return packagesadapter;
	}
	/**
	 * @see IContentProvider#inputChanged(Viewer, Object, Object)
	 * Called when the tree's input has been changed
	 */
	public void inputChanged(Viewer viewer, Object oldInput, Object newInput) {
		// Nothing to do
	}
	/**
	 * @see IContentProvider#dispose()
	 * Called when this viewer is no longer needed
	 */
	public void dispose() {
		// Nothing to dispose
	}
	/**
	 * @see ITreeContentProvider#getParent(Object)
	 * Returns the parent of this node
	 */
	public Object getParent(Object arg) {
		SystemModel_c result48 = SystemModel_c
				.getOneS_SYSOnR1401((Package_c) arg);
		if (result48 != null) {
			return result48;
		}
		ComponentInstance_c result49 = ComponentInstance_c
				.getOneI_EXEOnR2955(Component_c
						.getOneC_COnR8003(PackageableElement_c
								.getOnePE_PEOnR8001((Package_c) arg)));
		if (result49 != null) {
			return result49;
		}
		ComponentInstance_c result50 = ComponentInstance_c
				.getOneI_EXEOnR2963(ComponentReference_c
						.getOneCL_ICOnR4201(Component_c
								.getOneC_COnR8003(PackageableElement_c
										.getOnePE_PEOnR8001((Package_c) arg))));
		if (result50 != null) {
			return result50;
		}
		Package_c result51 = Package_c.getOneEP_PKGOnR8000(PackageableElement_c
				.getOnePE_PEOnR8001((Package_c) arg));
		if (result51 != null) {
			return result51;
		}
		return null;
	}
	/**
	 * @see IStructuredContentProvider#getElements(Object)
	 * Returns the elements below this node
	 */
	public Object[] getElements(Object arg) {
		return getChildren(arg);
	}

	/**
	 * @see ITreeContentProvider#getChildren(Object)
	 * Returns the children of this node
	 */
	public Object[] getChildren(Object arg) {
    int resultSize = 0;
    Function_c [] functions_8000_0 = 
Function_c.getManyS_SYNCsOnR8001(
PackageableElement_c.getManyPE_PEsOnR8000(
(Package_c)arg)
)
;


    	        SessionExplorerContentProvider.sort(functions_8000_0);
    resultSize += functions_8000_0.length;
    _c [] classes_2971_1 = 
(Package_c)arg)
;


    resultSize += classes_2971_1.length;
    Component_c [] components_8000_2 = 
Component_c.getManyC_CsOnR8001(
PackageableElement_c.getManyPE_PEsOnR8000(
(Package_c)arg)
      , new ClassQueryInterface_c() {
							public boolean evaluate(Object candidate) {
								return ((Component_c)candidate).Isexecutingorischildexecuting() == true;
							}
						}
)
;


    	        SessionExplorerContentProvider.sort(components_8000_2);
    resultSize += components_8000_2.length;
    ComponentReference_c [] componentreferences_8000_3 = 
ComponentReference_c.getManyCL_ICsOnR8001(
PackageableElement_c.getManyPE_PEsOnR8000(
(Package_c)arg)
      , new ClassQueryInterface_c() {
							public boolean evaluate(Object candidate) {
								return ((ComponentReference_c)candidate).Isexecuting() == true;
							}
						}
)
;


    	        SessionExplorerContentProvider.sort(componentreferences_8000_3);
    resultSize += componentreferences_8000_3.length;
    Package_c [] packages_8000_4 = 
Package_c.getManyEP_PKGsOnR8001(
PackageableElement_c.getManyPE_PEsOnR8000(
(Package_c)arg)
      , new ClassQueryInterface_c() {
							public boolean evaluate(Object candidate) {
								return ((Package_c)candidate).Isexecutingorownsexecutableelements() == true;
							}
						}
)
;


    	        SessionExplorerContentProvider.sort(packages_8000_4);
    resultSize += packages_8000_4.length;
    Object [] result = new Object [resultSize];
    int count = 0;
    for (int i = 0 ; i < functions_8000_0.length ; i++) {
      result[count] = functions_8000_0[i];
      count++;
    }
    for (int i = 0 ; i < classes_2971_1.length ; i++) {
      result[count] = classes_2971_1[i];
      count++;
    }
    for (int i = 0 ; i < components_8000_2.length ; i++) {
      result[count] = components_8000_2[i];
      count++;
    }
    for (int i = 0 ; i < componentreferences_8000_3.length ; i++) {
      result[count] = componentreferences_8000_3[i];
      count++;
    }
    for (int i = 0 ; i < packages_8000_4.length ; i++) {
      result[count] = packages_8000_4[i];
      count++;
    }
    return result;
  }
	/**
	 * @see ITreeContentProvider#hasChildren(Object)
	 * Returns true if this node has any children
	 */
	public boolean hasChildren(Object arg) {
    Function_c [] functions_8000_0 = 
Function_c.getManyS_SYNCsOnR8001(
PackageableElement_c.getManyPE_PEsOnR8000(
(Package_c)arg)
)
;


    if (functions_8000_0.length > 0) return true;
    _c [] classes_2971_1 = 
(Package_c)arg)
;


    if (classes_2971_1.length > 0) return true;
    Component_c [] components_8000_2 = 
Component_c.getManyC_CsOnR8001(
PackageableElement_c.getManyPE_PEsOnR8000(
(Package_c)arg)
      , new ClassQueryInterface_c() {
							public boolean evaluate(Object candidate) {
								return ((Component_c)candidate).Isexecutingorischildexecuting() == true;
							}
						}
)
;


    if (components_8000_2.length > 0) return true;
    ComponentReference_c [] componentreferences_8000_3 = 
ComponentReference_c.getManyCL_ICsOnR8001(
PackageableElement_c.getManyPE_PEsOnR8000(
(Package_c)arg)
      , new ClassQueryInterface_c() {
							public boolean evaluate(Object candidate) {
								return ((ComponentReference_c)candidate).Isexecuting() == true;
							}
						}
)
;


    if (componentreferences_8000_3.length > 0) return true;
    Package_c [] packages_8000_4 = 
Package_c.getManyEP_PKGsOnR8001(
PackageableElement_c.getManyPE_PEsOnR8000(
(Package_c)arg)
      , new ClassQueryInterface_c() {
							public boolean evaluate(Object candidate) {
								return ((Package_c)candidate).Isexecutingorownsexecutableelements() == true;
							}
						}
)
;


    if (packages_8000_4.length > 0) return true;
    return false;
  }
}
