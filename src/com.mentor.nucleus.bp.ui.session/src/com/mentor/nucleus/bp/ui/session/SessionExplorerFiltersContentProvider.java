package com.mentor.nucleus.bp.ui.session;
//========================================================================
//
// File: com/mentor/nucleus/bp/ui/session/SessionExplorerFiltersContentProvider.java
//
// WARNING:      Do not edit this generated file
// Generated by: ../com.mentor.nucleus.bp.ui.tree/arc/create_generic_filters_content_provider.inc
// Version:      **Revision**
//
// (c) Copyright 2006-2014 by Mentor Graphics Corp.  All rights reserved.
//
//========================================================================
// Licensed under the Apache License, Version 2.0 (the "License"); you may not 
// use this file except in compliance with the License.  You may obtain a copy 
// of the License at
//
//       http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software 
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT 
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   See the 
// License for the specific language governing permissions and limitations under
// the License.
//======================================================================== 
//
// This class provides the SessionExplorer Explorer filter dialog with a list of
// things that can be filtered.
//
import java.util.ArrayList;
import java.util.List;

import org.eclipse.jface.dialogs.IDialogSettings;
import org.eclipse.jface.viewers.IStructuredContentProvider;
import org.eclipse.jface.viewers.Viewer;

/**
 * The FiltersContentProvider provides the elements for use by the list dialog
 * for selecting the patterns to apply.
 */
public class SessionExplorerFiltersContentProvider
		implements
			IStructuredContentProvider {
	private static List definedFilters;
	/**
	 * Create a SessionExplorerFiltersContentProvider using the selections from the supplied
	 * resource filter.
	 */
	public SessionExplorerFiltersContentProvider() {
	}
	/* (non-Javadoc)
	 * Method declared on IContentProvider.
	 */
	public void dispose() {
	}
	/**
	 * Returns the filters currently defined for the navigator.
	 *
	 * @return a list of strings
	 */
	public static List getDefinedFilters() {
		if (definedFilters == null) {
			readFilters();
		}
		return definedFilters;
	}
	/* (non-Javadoc)
	 * Method declared on IStructuredContentProvider.
	 */
	public Object[] getElements(Object inputElement) {
		return getDefinedFilters().toArray();
	}
	/**
	 * Return the initially selected elements.
	 */
	public String[] getInitialSelections() {
		IDialogSettings settings = SessionExplorerPlugin.getDefault()
				.getDialogSettings();
		ArrayList selections = new ArrayList();
		if (settings != null) {
			IDialogSettings filterSect = settings
					.getSection("com.mentor.nucleus.bp.ui.filterSettings"); // $NON-NLS-1$
			if (filterSect != null) {
				for (int i = 0; i < getDefinedFilters().size(); i++) {
					String filter = filterSect.get((String) getDefinedFilters()
							.get(i));
					if (filter != null) {
						if (filter.equals("true")) { // $NON-NLS-1$
							selections.add(getDefinedFilters().get(i));
						}
					}
				}
			}
		}
		String[] result = new String[selections.size()];
		for (int i = 0; i < selections.size(); i++) {
			result[i] = (String) selections.get(i);
		}
		return result;
	}
	/**
	 * Set the selected elements
	 */
	public void setSelections(String[] elements) {
		ArrayList selections = new ArrayList();
		for (int i = 0; i < elements.length; i++) {
			selections.add(elements[i]);
		}
		IDialogSettings settings = SessionExplorerPlugin.getDefault()
				.getDialogSettings();
		if (settings != null) {
			IDialogSettings filterSect = settings
					.getSection("com.mentor.nucleus.bp.ui.filterSettings"); // $NON-NLS-1$
			if (filterSect == null) {
				filterSect = settings
						.addNewSection("com.mentor.nucleus.bp.ui.filterSettings"); // $NON-NLS-1$
			}
			filterSect.put("System", selections.contains("System")); // $NON-NLS-1$ $NON-NLS-2$
			filterSect.put("Domains", selections.contains("Domains")); // $NON-NLS-1$ $NON-NLS-2$
			filterSect.put("Functions", selections.contains("Functions")); // $NON-NLS-1$ $NON-NLS-2$
			filterSect.put("Classes", selections.contains("Classes")); // $NON-NLS-1$ $NON-NLS-2$
			filterSect.put("Instances", selections.contains("Instances")); // $NON-NLS-1$ $NON-NLS-2$
			filterSect.put("Values", selections.contains("Values")); // $NON-NLS-1$ $NON-NLS-2$
			filterSect.put("PendingEvents",
					selections.contains("PendingEvents")); // $NON-NLS-1$ $NON-NLS-2$
			filterSect.put("Class States", selections.contains("Class States")); // $NON-NLS-1$ $NON-NLS-2$
			filterSect.put("States", selections.contains("States")); // $NON-NLS-1$ $NON-NLS-2$
			filterSect.put("RuntimeValues",
					selections.contains("RuntimeValues")); // $NON-NLS-1$ $NON-NLS-2$
			filterSect.put("Components", selections.contains("Components")); // $NON-NLS-1$ $NON-NLS-2$
			filterSect.put("Component Instances",
					selections.contains("Component Instances")); // $NON-NLS-1$ $NON-NLS-2$
			filterSect.put("Ports", selections.contains("Ports")); // $NON-NLS-1$ $NON-NLS-2$
			filterSect.put("Provisions", selections.contains("Provisions")); // $NON-NLS-1$ $NON-NLS-2$
			filterSect.put("Requirements", selections.contains("Requirements")); // $NON-NLS-1$ $NON-NLS-2$
			filterSect.put("Provided Operations",
					selections.contains("Provided Operations")); // $NON-NLS-1$ $NON-NLS-2$
			filterSect.put("Provided Signals",
					selections.contains("Provided Signals")); // $NON-NLS-1$ $NON-NLS-2$
			filterSect.put("Required Operations",
					selections.contains("Required Operations")); // $NON-NLS-1$ $NON-NLS-2$
			filterSect.put("Required Signals",
					selections.contains("Required Signals")); // $NON-NLS-1$ $NON-NLS-2$
			filterSect.put("Parameters", selections.contains("Parameters")); // $NON-NLS-1$ $NON-NLS-2$
			filterSect.put("Operations", selections.contains("Operations")); // $NON-NLS-1$ $NON-NLS-2$
			filterSect.put("Component References",
					selections.contains("Component References")); // $NON-NLS-1$ $NON-NLS-2$
			filterSect.put("Component Reference Instances",
					selections.contains("Component Reference Instances")); // $NON-NLS-1$ $NON-NLS-2$
			filterSect.put("Associations", selections.contains("Associations")); // $NON-NLS-1$ $NON-NLS-2$
			filterSect.put("Function Packages",
					selections.contains("Function Packages")); // $NON-NLS-1$ $NON-NLS-2$
			filterSect.put("Function Parameters",
					selections.contains("Function Parameters")); // $NON-NLS-1$ $NON-NLS-2$
			filterSect.put("Packages", selections.contains("Packages")); // $NON-NLS-1$ $NON-NLS-2$
		}
	}
	/* (non-Javadoc)
	 * Method declared on IContentProvider.
	 */
	public void inputChanged(Viewer viewer, Object oldInput, Object newInput) {
		// Input cannot change, do nothing.
	}
	/**
	 * Reads the filters currently defined for the workbench. 
	 */
	private static void readFilters() {
		definedFilters = new ArrayList();
		definedFilters.add("Domains"); // $NON-NLS-1$
		definedFilters.add("Functions"); // $NON-NLS-1$
		definedFilters.add("Classes"); // $NON-NLS-1$
		definedFilters.add("Instances"); // $NON-NLS-1$
		definedFilters.add("Values"); // $NON-NLS-1$
		definedFilters.add("PendingEvents"); // $NON-NLS-1$
		definedFilters.add("Class States"); // $NON-NLS-1$
		definedFilters.add("States"); // $NON-NLS-1$
		definedFilters.add("RuntimeValues"); // $NON-NLS-1$
		definedFilters.add("Components"); // $NON-NLS-1$
		definedFilters.add("Component Instances"); // $NON-NLS-1$
		definedFilters.add("Ports"); // $NON-NLS-1$
		definedFilters.add("Provisions"); // $NON-NLS-1$
		definedFilters.add("Requirements"); // $NON-NLS-1$
		definedFilters.add("Provided Operations"); // $NON-NLS-1$
		definedFilters.add("Provided Signals"); // $NON-NLS-1$
		definedFilters.add("Required Operations"); // $NON-NLS-1$
		definedFilters.add("Required Signals"); // $NON-NLS-1$
		definedFilters.add("Parameters"); // $NON-NLS-1$
		definedFilters.add("Operations"); // $NON-NLS-1$
		definedFilters.add("Component References"); // $NON-NLS-1$
		definedFilters.add("Component Reference Instances"); // $NON-NLS-1$
		definedFilters.add("Associations"); // $NON-NLS-1$
		definedFilters.add("Function Packages"); // $NON-NLS-1$
		definedFilters.add("Function Parameters"); // $NON-NLS-1$
		definedFilters.add("Packages"); // $NON-NLS-1$
	}
} // FiltersContentProvider

