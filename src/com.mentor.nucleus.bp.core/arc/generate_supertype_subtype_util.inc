.//=======================================================================
.//
.// File:      $RCSfile: generate_supertype_subtype_util.arc,v $
.// Version:   $Revision: 1.7 $
.// Modified:  $Date: 2013/01/17 03:38:58 $
.//
.// (c) Copyright 2005-2013 by Mentor Graphics Corp.  All rights reserved.
.//
.//=======================================================================
.// This document contains information proprietary and confidential to
.// Mentor Graphics Corp., and is not for external distribution.
.//=======================================================================
.//
.//
.invoke arc_env = GET_ENV_VAR( "PTC_MC_ARC_DIR" )
.assign mc_archetypes = arc_env.result
.if ( mc_archetypes == "" )
  .print "\nERROR: Environment variable PTC_MC_ARC_DIR not set."
  .exit 100
.end if
.//
.include "${mc_archetypes}/arch_utils.inc"
.//
.function generate_supertype_subtype_util
  .param String package
  .param String root_import
  .param String prefix
package ${package};
//========================================================================
//
// File: ${package}.SupertypeSubtypeUtil.java
//
// WARNING:      Do not edit this generated file
// Generated by: ${info.arch_file_name}
//
// (c) Copyright 2005-2013 by Mentor Graphics Corp.  All rights reserved.
//
//========================================================================
//This document contains information proprietary and confidential to
//Mentor Graphics Corp., and is not for external distribution.
//======================================================================== 
//
import java.util.ArrayList;
import java.util.List;

import ${root_import};
import com.mentor.nucleus.bp.core.common.*;

/**
 *  This class holds a utility method to determine
 *  if a given child and parent are participating in
 *  a supertype/subtype association
 */
public class ${prefix}SupertypeSubtypeUtil extends SupertypeSubtypeUtil {
    @Override
 	public boolean isSupertypeOf(NonRootModelElement child, NonRootModelElement parent) {
  .select many subs from instances of R_SUB
  .for each sub in subs
    .// select the child
    .select one child related by sub->R_RGO[R205]->R_OIR[R203]->O_OBJ[R201]
    .select one parent related by sub->R_SUBSUP[R213]->R_SUPER[R212]->R_RTO[R204]->R_OIR[R203]->O_OBJ[R201]
    .invoke gn = get_class_name(child)
    .assign className = gn.body
    .invoke gnp = get_class_name(parent)
    .assign parentClassName = gnp.body
		if(child.getClass() == ${className}.class) {
			if(parent.getClass() == ${parentClassName}.class) {
				return true;
			}
		}
  .end for
		return false;
	}
	@Override
	public List<NonRootModelElement> getSubtypes(NonRootModelElement supertype) {
		return getSubtypes(supertype, true);
	}
	@Override	
	public List<NonRootModelElement> getSubtypes(NonRootModelElement supertype, boolean load) {
  		List<NonRootModelElement> subtypes = new ArrayList<NonRootModelElement>();
  .select many objects from instances of O_OBJ
  .for each object in objects
    .invoke superObjName = get_class_name(object)
    .assign superClassName = superObjName.body
    .// select the supertype class
    .select many supers related by object->R_OIR[R201]->R_RTO[R203]->R_SUPER[R204]
    .if((cardinality supers) != 0)
  			if(supertype instanceof ${superClassName}) {
      .for each super in supers
        .select one association related by super->R_SUBSUP[R212]->R_REL[R206]
        .// select the subtype class
        .select many subtypeObjs related by super->R_SUBSUP[R212]->R_SUB[R213]->R_RGO[R205]->R_OIR[R203]->O_OBJ[R201]
        .for each subtypeObj in subtypeObjs
          .invoke subtypeObjName = get_class_name(subtypeObj)
          .assign subClassName = subtypeObjName.body
                ${subtypeObjName.body} subtype_${subClassName} = ${subtypeObjName.body}.getOne${subtypeObj.Key_Lett}OnR${association.Numb}((${superClassName}) supertype, load);
                if(subtype_${subClassName} != null) {
	  				subtypes.add(subtype_${subClassName});
	  			}
        .end for
      .end for
  			}
    .end if
  .end for
  		return subtypes;
	}
}
.end function
.//