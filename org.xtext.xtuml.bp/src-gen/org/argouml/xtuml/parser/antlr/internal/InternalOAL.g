/*
* generated by Xtext
*/
grammar InternalOAL;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package org.argouml.xtuml.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.argouml.xtuml.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.argouml.xtuml.services.OALGrammarAccess;

}

@parser::members {

 	private OALGrammarAccess grammarAccess;
 	
    public InternalOALParser(TokenStream input, OALGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Code";	
   	}
   	
   	@Override
   	protected OALGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleCode
entryRuleCode returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCodeRule()); }
	 iv_ruleCode=ruleCode 
	 { $current=$iv_ruleCode.current; } 
	 EOF 
;

// Rule Code
ruleCode returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getCodeAccess().getStatementsStatementParserRuleCall_0()); 
	    }
		lv_statements_0_0=rulestatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCodeRule());
	        }
       		add(
       			$current, 
       			"statements",
        		lv_statements_0_0, 
        		"statement");
	        afterParserOrEnumRuleCall();
	    }

)
)*
;





// Entry rule entryRulestatement
entryRulestatement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStatementRule()); }
	 iv_rulestatement=rulestatement 
	 { $current=$iv_rulestatement.current; } 
	 EOF 
;

// Rule statement
rulestatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
		{ 
	        newCompositeNode(grammarAccess.getStatementAccess().getSt1AssignmentParserRuleCall_0_0_0()); 
	    }
		lv_st1_0_0=ruleassignment		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStatementRule());
	        }
       		set(
       			$current, 
       			"st1",
        		lv_st1_0_0, 
        		"assignment");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getStatementAccess().getSt2Object_statementParserRuleCall_0_1_0()); 
	    }
		lv_st2_1_0=ruleobject_statement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStatementRule());
	        }
       		set(
       			$current, 
       			"st2",
        		lv_st2_1_0, 
        		"object_statement");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getStatementAccess().getSt3Flow_control_statementParserRuleCall_0_2_0()); 
	    }
		lv_st3_2_0=ruleflow_control_statement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStatementRule());
	        }
       		set(
       			$current, 
       			"st3",
        		lv_st3_2_0, 
        		"flow_control_statement");
	        afterParserOrEnumRuleCall();
	    }

)
))	otherlv_3=';' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getStatementAccess().getSemicolonKeyword_1());
    }
)
;





// Entry rule entryRuleobject_statement
entryRuleobject_statement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getObject_statementRule()); }
	 iv_ruleobject_statement=ruleobject_statement 
	 { $current=$iv_ruleobject_statement.current; } 
	 EOF 
;

// Rule object_statement
ruleobject_statement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    { 
        newCompositeNode(grammarAccess.getObject_statementAccess().getCreate_statementParserRuleCall_0_0()); 
    }
rulecreate_statement
    { 
        afterParserOrEnumRuleCall();
    }
(
    {
        $current = forceCreateModelElement(
            grammarAccess.getObject_statementAccess().getTypeCreateAction_0_1(),
            $current);
    }
))
    |
    { 
        newCompositeNode(grammarAccess.getObject_statementAccess().getSelect_statementParserRuleCall_1()); 
    }
    this_select_statement_2=ruleselect_statement
    { 
        $current = $this_select_statement_2.current; 
        afterParserOrEnumRuleCall();
    }

    |(
    { 
        newCompositeNode(grammarAccess.getObject_statementAccess().getRelate_statementParserRuleCall_2_0()); 
    }
rulerelate_statement
    { 
        afterParserOrEnumRuleCall();
    }
(
    {
        $current = forceCreateModelElement(
            grammarAccess.getObject_statementAccess().getTypeRelateAction_2_1(),
            $current);
    }
))
    |(
    { 
        newCompositeNode(grammarAccess.getObject_statementAccess().getUnrelate_statementParserRuleCall_3_0()); 
    }
ruleunrelate_statement
    { 
        afterParserOrEnumRuleCall();
    }
(
    {
        $current = forceCreateModelElement(
            grammarAccess.getObject_statementAccess().getTypeRelateAction_3_1(),
            $current);
    }
))
    |(
    { 
        newCompositeNode(grammarAccess.getObject_statementAccess().getDelete_statementParserRuleCall_4_0()); 
    }
ruledelete_statement
    { 
        afterParserOrEnumRuleCall();
    }
(
    {
        $current = forceCreateModelElement(
            grammarAccess.getObject_statementAccess().getTypeDeleteAction_4_1(),
            $current);
    }
)))
;





// Entry rule entryRulecreate_statement
entryRulecreate_statement returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getCreate_statementRule()); } 
	 iv_rulecreate_statement=rulecreate_statement 
	 { $current=$iv_rulecreate_statement.current.getText(); }  
	 EOF 
;

// Rule create_statement
rulecreate_statement returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='create' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getCreate_statementAccess().getCreateKeyword_0()); 
    }

	kw='object' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getCreate_statementAccess().getObjectKeyword_1()); 
    }
(
    { 
        newCompositeNode(grammarAccess.getCreate_statementAccess().getNameParserRuleCall_2()); 
    }
    this_name_2=rulename    {
		$current.merge(this_name_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)?
	kw='of' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getCreate_statementAccess().getOfKeyword_3()); 
    }

    { 
        newCompositeNode(grammarAccess.getCreate_statementAccess().getClass_nameParserRuleCall_4()); 
    }
    this_class_name_4=ruleclass_name    {
		$current.merge(this_class_name_4);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRuleselect_statement
entryRuleselect_statement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSelect_statementRule()); }
	 iv_ruleselect_statement=ruleselect_statement 
	 { $current=$iv_ruleselect_statement.current; } 
	 EOF 
;

// Rule select_statement
ruleselect_statement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='select' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getSelect_statementAccess().getSelectKeyword_0());
    }
(	otherlv_1='any' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getSelect_statementAccess().getAnyKeyword_1_0());
    }

    |	otherlv_2='many' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getSelect_statementAccess().getManyKeyword_1_1());
    }

    |	otherlv_3='one' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getSelect_statementAccess().getOneKeyword_1_2());
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getSelect_statementAccess().getVarNameParserRuleCall_2_0()); 
	    }
		lv_var_4_0=rulename		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSelect_statementRule());
	        }
       		set(
       			$current, 
       			"var",
        		lv_var_4_0, 
        		"name");
	        afterParserOrEnumRuleCall();
	    }

)
)((	otherlv_5='from' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getSelect_statementAccess().getFromKeyword_3_0_0());
    }
	otherlv_6='instances' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getSelect_statementAccess().getInstancesKeyword_3_0_1());
    }
	otherlv_7='of' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getSelect_statementAccess().getOfKeyword_3_0_2());
    }

    { 
        newCompositeNode(grammarAccess.getSelect_statementAccess().getClass_nameParserRuleCall_3_0_3()); 
    }
ruleclass_name
    { 
        afterParserOrEnumRuleCall();
    }
(	otherlv_9='where' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getSelect_statementAccess().getWhereKeyword_3_0_4_0());
    }

    { 
        newCompositeNode(grammarAccess.getSelect_statementAccess().getExpressionParserRuleCall_3_0_4_1()); 
    }
    this_expression_10=ruleexpression
    { 
        $current = $this_expression_10.current; 
        afterParserOrEnumRuleCall();
    }
)?)
    |(	otherlv_11='related' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getSelect_statementAccess().getRelatedKeyword_3_1_0());
    }
	otherlv_12='by' 
    {
    	newLeafNode(otherlv_12, grammarAccess.getSelect_statementAccess().getByKeyword_3_1_1());
    }

    { 
        newCompositeNode(grammarAccess.getSelect_statementAccess().getObject_referenceParserRuleCall_3_1_2()); 
    }
ruleobject_reference
    { 
        afterParserOrEnumRuleCall();
    }
(	otherlv_14='->' 
    {
    	newLeafNode(otherlv_14, grammarAccess.getSelect_statementAccess().getHyphenMinusGreaterThanSignKeyword_3_1_3_0());
    }

    { 
        newCompositeNode(grammarAccess.getSelect_statementAccess().getClass_nameParserRuleCall_3_1_3_1()); 
    }
ruleclass_name
    { 
        afterParserOrEnumRuleCall();
    }
	otherlv_16='[' 
    {
    	newLeafNode(otherlv_16, grammarAccess.getSelect_statementAccess().getLeftSquareBracketKeyword_3_1_3_2());
    }

    { 
        newCompositeNode(grammarAccess.getSelect_statementAccess().getRelationParserRuleCall_3_1_3_3()); 
    }
rulerelation
    { 
        afterParserOrEnumRuleCall();
    }
	otherlv_18=']' 
    {
    	newLeafNode(otherlv_18, grammarAccess.getSelect_statementAccess().getRightSquareBracketKeyword_3_1_3_4());
    }
)+(	otherlv_19='where' 
    {
    	newLeafNode(otherlv_19, grammarAccess.getSelect_statementAccess().getWhereKeyword_3_1_4_0());
    }

    { 
        newCompositeNode(grammarAccess.getSelect_statementAccess().getExpressionParserRuleCall_3_1_4_1()); 
    }
    this_expression_20=ruleexpression
    { 
        $current = $this_expression_20.current; 
        afterParserOrEnumRuleCall();
    }
)?)))
;





// Entry rule entryRulerelate_statement
entryRulerelate_statement returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getRelate_statementRule()); } 
	 iv_rulerelate_statement=rulerelate_statement 
	 { $current=$iv_rulerelate_statement.current.getText(); }  
	 EOF 
;

// Rule relate_statement
rulerelate_statement returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='relate' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getRelate_statementAccess().getRelateKeyword_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getRelate_statementAccess().getObject_referenceParserRuleCall_1()); 
    }
    this_object_reference_1=ruleobject_reference    {
		$current.merge(this_object_reference_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw='to' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getRelate_statementAccess().getToKeyword_2()); 
    }

    { 
        newCompositeNode(grammarAccess.getRelate_statementAccess().getObject_referenceParserRuleCall_3()); 
    }
    this_object_reference_3=ruleobject_reference    {
		$current.merge(this_object_reference_3);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw='across' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getRelate_statementAccess().getAcrossKeyword_4()); 
    }

    { 
        newCompositeNode(grammarAccess.getRelate_statementAccess().getRelationParserRuleCall_5()); 
    }
    this_relation_5=rulerelation    {
		$current.merge(this_relation_5);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRuleunrelate_statement
entryRuleunrelate_statement returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getUnrelate_statementRule()); } 
	 iv_ruleunrelate_statement=ruleunrelate_statement 
	 { $current=$iv_ruleunrelate_statement.current.getText(); }  
	 EOF 
;

// Rule unrelate_statement
ruleunrelate_statement returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='unrelate' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getUnrelate_statementAccess().getUnrelateKeyword_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getUnrelate_statementAccess().getObject_referenceParserRuleCall_1()); 
    }
    this_object_reference_1=ruleobject_reference    {
		$current.merge(this_object_reference_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw='from' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getUnrelate_statementAccess().getFromKeyword_2()); 
    }

    { 
        newCompositeNode(grammarAccess.getUnrelate_statementAccess().getObject_referenceParserRuleCall_3()); 
    }
    this_object_reference_3=ruleobject_reference    {
		$current.merge(this_object_reference_3);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw='across' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getUnrelate_statementAccess().getAcrossKeyword_4()); 
    }

    { 
        newCompositeNode(grammarAccess.getUnrelate_statementAccess().getRelationParserRuleCall_5()); 
    }
    this_relation_5=rulerelation    {
		$current.merge(this_relation_5);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRuledelete_statement
entryRuledelete_statement returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getDelete_statementRule()); } 
	 iv_ruledelete_statement=ruledelete_statement 
	 { $current=$iv_ruledelete_statement.current.getText(); }  
	 EOF 
;

// Rule delete_statement
ruledelete_statement returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='delete' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getDelete_statementAccess().getDeleteKeyword_0()); 
    }

	kw='object' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getDelete_statementAccess().getObjectKeyword_1()); 
    }

	kw='instance' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getDelete_statementAccess().getInstanceKeyword_2()); 
    }

    { 
        newCompositeNode(grammarAccess.getDelete_statementAccess().getObject_referenceParserRuleCall_3()); 
    }
    this_object_reference_3=ruleobject_reference    {
		$current.merge(this_object_reference_3);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRuleobject_reference
entryRuleobject_reference returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getObject_referenceRule()); } 
	 iv_ruleobject_reference=ruleobject_reference 
	 { $current=$iv_ruleobject_reference.current.getText(); }  
	 EOF 
;

// Rule object_reference
ruleobject_reference returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='self' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getObject_referenceAccess().getSelfKeyword_0()); 
    }

    |
    { 
        newCompositeNode(grammarAccess.getObject_referenceAccess().getNameParserRuleCall_1()); 
    }
    this_name_1=rulename    {
		$current.merge(this_name_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRulerelation
entryRulerelation returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getRelationRule()); } 
	 iv_rulerelation=rulerelation 
	 { $current=$iv_rulerelation.current.getText(); }  
	 EOF 
;

// Rule relation
rulerelation returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_RELATION_NAME_0=RULE_RELATION_NAME    {
		$current.merge(this_RELATION_NAME_0);
    }

    { 
    newLeafNode(this_RELATION_NAME_0, grammarAccess.getRelationAccess().getRELATION_NAMETerminalRuleCall_0()); 
    }
(
	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getRelationAccess().getFullStopKeyword_1_0()); 
    }
    this_STRING_2=RULE_STRING    {
		$current.merge(this_STRING_2);
    }

    { 
    newLeafNode(this_STRING_2, grammarAccess.getRelationAccess().getSTRINGTerminalRuleCall_1_1()); 
    }
)?)
    ;





// Entry rule entryRuleassignment
entryRuleassignment returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAssignmentRule()); }
	 iv_ruleassignment=ruleassignment 
	 { $current=$iv_ruleassignment.current; } 
	 EOF 
;

// Rule assignment
ruleassignment returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((	otherlv_0='assign' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getAssignmentAccess().getAssignKeyword_0());
    }
)?
    { 
        newCompositeNode(grammarAccess.getAssignmentAccess().getLvalueParserRuleCall_1()); 
    }
rulelvalue
    { 
        afterParserOrEnumRuleCall();
    }
	otherlv_2='=' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getAssignmentAccess().getEqualsSignKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAssignmentAccess().getEExpressionParserRuleCall_3_0()); 
	    }
		lv_e_3_0=ruleexpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAssignmentRule());
	        }
       		set(
       			$current, 
       			"e",
        		lv_e_3_0, 
        		"expression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRulelvalue
entryRulelvalue returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getLvalueRule()); } 
	 iv_rulelvalue=rulelvalue 
	 { $current=$iv_rulelvalue.current.getText(); }  
	 EOF 
;

// Rule lvalue
rulelvalue returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getLvalueAccess().getVariableParserRuleCall()); 
    }
    this_variable_0=rulevariable    {
		$current.merge(this_variable_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    ;





// Entry rule entryRuleflow_control_statement
entryRuleflow_control_statement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFlow_control_statementRule()); }
	 iv_ruleflow_control_statement=ruleflow_control_statement 
	 { $current=$iv_ruleflow_control_statement.current; } 
	 EOF 
;

// Rule flow_control_statement
ruleflow_control_statement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
    {
        $current = forceCreateModelElement(
            grammarAccess.getFlow_control_statementAccess().getTypeStatementIfAction_0_0(),
            $current);
    }
)	otherlv_1='if' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getFlow_control_statementAccess().getIfKeyword_0_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFlow_control_statementAccess().getExprExpressionParserRuleCall_0_2_0()); 
	    }
		lv_expr_2_0=ruleexpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFlow_control_statementRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_2_0, 
        		"expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3='then' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getFlow_control_statementAccess().getThenKeyword_0_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFlow_control_statementAccess().getSubstatementsStatementParserRuleCall_0_4_0()); 
	    }
		lv_substatements_4_0=rulestatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFlow_control_statementRule());
	        }
       		add(
       			$current, 
       			"substatements",
        		lv_substatements_4_0, 
        		"statement");
	        afterParserOrEnumRuleCall();
	    }

)
)*(	otherlv_5='elif' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getFlow_control_statementAccess().getElifKeyword_0_5_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFlow_control_statementAccess().getElifexprExpressionParserRuleCall_0_5_1_0()); 
	    }
		lv_elifexpr_6_0=ruleexpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFlow_control_statementRule());
	        }
       		add(
       			$current, 
       			"elifexpr",
        		lv_elifexpr_6_0, 
        		"expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_7='then' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getFlow_control_statementAccess().getThenKeyword_0_5_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFlow_control_statementAccess().getSubstatementsStatementParserRuleCall_0_5_3_0()); 
	    }
		lv_substatements_8_0=rulestatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFlow_control_statementRule());
	        }
       		add(
       			$current, 
       			"substatements",
        		lv_substatements_8_0, 
        		"statement");
	        afterParserOrEnumRuleCall();
	    }

)
)*)*(	otherlv_9='else' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getFlow_control_statementAccess().getElseKeyword_0_6_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFlow_control_statementAccess().getSubstatementsStatementParserRuleCall_0_6_1_0()); 
	    }
		lv_substatements_10_0=rulestatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFlow_control_statementRule());
	        }
       		add(
       			$current, 
       			"substatements",
        		lv_substatements_10_0, 
        		"statement");
	        afterParserOrEnumRuleCall();
	    }

)
)*)?	otherlv_11='end' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getFlow_control_statementAccess().getEndKeyword_0_7());
    }
	otherlv_12='if' 
    {
    	newLeafNode(otherlv_12, grammarAccess.getFlow_control_statementAccess().getIfKeyword_0_8());
    }
)
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getFlow_control_statementAccess().getTypeStatementForAction_1_0(),
            $current);
    }
)	otherlv_14='for' 
    {
    	newLeafNode(otherlv_14, grammarAccess.getFlow_control_statementAccess().getForKeyword_1_1());
    }

    { 
        newCompositeNode(grammarAccess.getFlow_control_statementAccess().getLvalueParserRuleCall_1_2()); 
    }
rulelvalue
    { 
        afterParserOrEnumRuleCall();
    }
	otherlv_16='of' 
    {
    	newLeafNode(otherlv_16, grammarAccess.getFlow_control_statementAccess().getOfKeyword_1_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFlow_control_statementAccess().getListNameParserRuleCall_1_4_0()); 
	    }
		lv_list_17_0=rulename		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFlow_control_statementRule());
	        }
       		set(
       			$current, 
       			"list",
        		lv_list_17_0, 
        		"name");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_18='do' 
    {
    	newLeafNode(otherlv_18, grammarAccess.getFlow_control_statementAccess().getDoKeyword_1_5());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFlow_control_statementAccess().getSubstatementsStatementParserRuleCall_1_6_0()); 
	    }
		lv_substatements_19_0=rulestatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFlow_control_statementRule());
	        }
       		add(
       			$current, 
       			"substatements",
        		lv_substatements_19_0, 
        		"statement");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_20='end' 
    {
    	newLeafNode(otherlv_20, grammarAccess.getFlow_control_statementAccess().getEndKeyword_1_7());
    }
	otherlv_21='for' 
    {
    	newLeafNode(otherlv_21, grammarAccess.getFlow_control_statementAccess().getForKeyword_1_8());
    }
)
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getFlow_control_statementAccess().getTypeStatementWhileAction_2_0(),
            $current);
    }
)	otherlv_23='while' 
    {
    	newLeafNode(otherlv_23, grammarAccess.getFlow_control_statementAccess().getWhileKeyword_2_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFlow_control_statementAccess().getExprExpressionParserRuleCall_2_2_0()); 
	    }
		lv_expr_24_0=ruleexpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFlow_control_statementRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_24_0, 
        		"expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_25='do' 
    {
    	newLeafNode(otherlv_25, grammarAccess.getFlow_control_statementAccess().getDoKeyword_2_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFlow_control_statementAccess().getSubstatementsStatementParserRuleCall_2_4_0()); 
	    }
		lv_substatements_26_0=rulestatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFlow_control_statementRule());
	        }
       		add(
       			$current, 
       			"substatements",
        		lv_substatements_26_0, 
        		"statement");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_27='end' 
    {
    	newLeafNode(otherlv_27, grammarAccess.getFlow_control_statementAccess().getEndKeyword_2_5());
    }
	otherlv_28='while' 
    {
    	newLeafNode(otherlv_28, grammarAccess.getFlow_control_statementAccess().getWhileKeyword_2_6());
    }
))
;





// Entry rule entryRuleexpression
entryRuleexpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExpressionRule()); }
	 iv_ruleexpression=ruleexpression 
	 { $current=$iv_ruleexpression.current; } 
	 EOF 
;

// Rule expression
ruleexpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((	otherlv_0='not' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getExpressionAccess().getNotKeyword_0_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getExpressionAccess().getNeExpressionParserRuleCall_0_1_0()); 
	    }
		lv_ne_1_0=ruleexpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpressionRule());
	        }
       		set(
       			$current, 
       			"ne",
        		lv_ne_1_0, 
        		"expression");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((
(
		{ 
	        newCompositeNode(grammarAccess.getExpressionAccess().getLsExpr2ParserRuleCall_1_0_0()); 
	    }
		lv_ls_2_0=ruleexpr2		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpressionRule());
	        }
       		set(
       			$current, 
       			"ls",
        		lv_ls_2_0, 
        		"expr2");
	        afterParserOrEnumRuleCall();
	    }

)
)((	otherlv_3='==' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getExpressionAccess().getEqualsSignEqualsSignKeyword_1_1_0_0());
    }

    |	otherlv_4='<>' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getExpressionAccess().getLessThanSignGreaterThanSignKeyword_1_1_0_1());
    }

    |	otherlv_5='<' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getExpressionAccess().getLessThanSignKeyword_1_1_0_2());
    }

    |	otherlv_6='>' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getExpressionAccess().getGreaterThanSignKeyword_1_1_0_3());
    }

    |	otherlv_7='>=' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getExpressionAccess().getGreaterThanSignEqualsSignKeyword_1_1_0_4());
    }

    |	otherlv_8='<=' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getExpressionAccess().getLessThanSignEqualsSignKeyword_1_1_0_5());
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getExpressionAccess().getRsExpr2ParserRuleCall_1_1_1_0()); 
	    }
		lv_rs_9_0=ruleexpr2		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpressionRule());
	        }
       		add(
       			$current, 
       			"rs",
        		lv_rs_9_0, 
        		"expr2");
	        afterParserOrEnumRuleCall();
	    }

)
))*))
;





// Entry rule entryRuleexpr2
entryRuleexpr2 returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExpr2Rule()); }
	 iv_ruleexpr2=ruleexpr2 
	 { $current=$iv_ruleexpr2.current; } 
	 EOF 
;

// Rule expr2
ruleexpr2 returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((	otherlv_0='empty' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getExpr2Access().getEmptyKeyword_0_0_0());
    }

    |	otherlv_1='not_empty' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getExpr2Access().getNot_emptyKeyword_0_0_1());
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getExpr2Access().getNNameParserRuleCall_0_1_0()); 
	    }
		lv_n_2_0=rulename		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpr2Rule());
	        }
       		set(
       			$current, 
       			"n",
        		lv_n_2_0, 
        		"name");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getExpr2Access().getSSumParserRuleCall_1_0()); 
	    }
		lv_s_3_0=rulesum		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpr2Rule());
	        }
       		set(
       			$current, 
       			"s",
        		lv_s_3_0, 
        		"sum");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRulesum
entryRulesum returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSumRule()); }
	 iv_rulesum=rulesum 
	 { $current=$iv_rulesum.current; } 
	 EOF 
;

// Rule sum
rulesum returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getSumAccess().getLtProductParserRuleCall_0_0()); 
	    }
		lv_lt_0_0=ruleproduct		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSumRule());
	        }
       		set(
       			$current, 
       			"lt",
        		lv_lt_0_0, 
        		"product");
	        afterParserOrEnumRuleCall();
	    }

)
)((	otherlv_1='+' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getSumAccess().getPlusSignKeyword_1_0_0());
    }

    |	otherlv_2='-' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getSumAccess().getHyphenMinusKeyword_1_0_1());
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getSumAccess().getRtProductParserRuleCall_1_1_0()); 
	    }
		lv_rt_3_0=ruleproduct		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSumRule());
	        }
       		add(
       			$current, 
       			"rt",
        		lv_rt_3_0, 
        		"product");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleproduct
entryRuleproduct returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getProductRule()); }
	 iv_ruleproduct=ruleproduct 
	 { $current=$iv_ruleproduct.current; } 
	 EOF 
;

// Rule product
ruleproduct returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getProductAccess().getLfValueParserRuleCall_0_0()); 
	    }
		lv_lf_0_0=rulevalue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getProductRule());
	        }
       		set(
       			$current, 
       			"lf",
        		lv_lf_0_0, 
        		"value");
	        afterParserOrEnumRuleCall();
	    }

)
)((	otherlv_1='*' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getProductAccess().getAsteriskKeyword_1_0_0());
    }

    |	otherlv_2='/' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getProductAccess().getSolidusKeyword_1_0_1());
    }

    |	otherlv_3='%' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getProductAccess().getPercentSignKeyword_1_0_2());
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getProductAccess().getRfValueParserRuleCall_1_1_0()); 
	    }
		lv_rf_4_0=rulevalue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getProductRule());
	        }
       		add(
       			$current, 
       			"rf",
        		lv_rf_4_0, 
        		"value");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRulevalue
entryRulevalue returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getValueRule()); }
	 iv_rulevalue=rulevalue 
	 { $current=$iv_rulevalue.current; } 
	 EOF 
;

// Rule value
rulevalue returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((	otherlv_0='(' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getValueAccess().getLeftParenthesisKeyword_0_0());
    }

    { 
        newCompositeNode(grammarAccess.getValueAccess().getExpressionParserRuleCall_0_1()); 
    }
    this_expression_1=ruleexpression
    { 
        $current = $this_expression_1.current; 
        afterParserOrEnumRuleCall();
    }
	otherlv_2=')' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getValueAccess().getRightParenthesisKeyword_0_2());
    }
)
    |(
    { 
        newCompositeNode(grammarAccess.getValueAccess().getVariableParserRuleCall_1_0()); 
    }
rulevariable
    { 
        afterParserOrEnumRuleCall();
    }
(
    {
        $current = forceCreateModelElement(
            grammarAccess.getValueAccess().getTypeValueVariableAction_1_1(),
            $current);
    }
))
    |(	otherlv_5='true' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getValueAccess().getTrueKeyword_2_0());
    }
(
    {
        $current = forceCreateModelElement(
            grammarAccess.getValueAccess().getTypeConstantAction_2_1(),
            $current);
    }
))
    |(	otherlv_7='false' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getValueAccess().getFalseKeyword_3_0());
    }
(
    {
        $current = forceCreateModelElement(
            grammarAccess.getValueAccess().getTypeConstantAction_3_1(),
            $current);
    }
))
    |(this_INT_9=RULE_INT
    { 
    newLeafNode(this_INT_9, grammarAccess.getValueAccess().getINTTerminalRuleCall_4_0()); 
    }
(
    {
        $current = forceCreateModelElement(
            grammarAccess.getValueAccess().getTypeConstantAction_4_1(),
            $current);
    }
)))
;





// Entry rule entryRulevariable
entryRulevariable returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getVariableRule()); } 
	 iv_rulevariable=rulevariable 
	 { $current=$iv_rulevariable.current.getText(); }  
	 EOF 
;

// Rule variable
rulevariable returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getVariableAccess().getNameParserRuleCall_0()); 
    }
    this_name_0=rulename    {
		$current.merge(this_name_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |(
    { 
        newCompositeNode(grammarAccess.getVariableAccess().getObject_referenceParserRuleCall_1_0()); 
    }
    this_object_reference_1=ruleobject_reference    {
		$current.merge(this_object_reference_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getVariableAccess().getFullStopKeyword_1_1()); 
    }
    this_ID_3=RULE_ID    {
		$current.merge(this_ID_3);
    }

    { 
    newLeafNode(this_ID_3, grammarAccess.getVariableAccess().getIDTerminalRuleCall_1_2()); 
    }
))
    ;





// Entry rule entryRuleclass_name
entryRuleclass_name returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getClass_nameRule()); } 
	 iv_ruleclass_name=ruleclass_name 
	 { $current=$iv_ruleclass_name.current.getText(); }  
	 EOF 
;

// Rule class_name
ruleclass_name returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getClass_nameAccess().getNameParserRuleCall()); 
    }
    this_name_0=rulename    {
		$current.merge(this_name_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    ;





// Entry rule entryRulename
entryRulename returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getNameRule()); } 
	 iv_rulename=rulename 
	 { $current=$iv_rulename.current.getText(); }  
	 EOF 
;

// Rule name
rulename returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    newLeafNode(this_ID_0, grammarAccess.getNameAccess().getIDTerminalRuleCall()); 
    }

    ;





RULE_RELATION_NAME : 'R' ('0'..'9')+;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


