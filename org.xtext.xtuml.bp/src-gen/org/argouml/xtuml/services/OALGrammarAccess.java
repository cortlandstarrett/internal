/*
* generated by Xtext
*/

package org.argouml.xtuml.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class OALGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class CodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Code");
		private final Assignment cStatementsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cStatementsStatementParserRuleCall_0 = (RuleCall)cStatementsAssignment.eContents().get(0);
		
		//Code:
		//	statements+=statement*;
		public ParserRule getRule() { return rule; }

		//statements+=statement*
		public Assignment getStatementsAssignment() { return cStatementsAssignment; }

		//statement
		public RuleCall getStatementsStatementParserRuleCall_0() { return cStatementsStatementParserRuleCall_0; }
	}

	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "statement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Assignment cSt1Assignment_0_0 = (Assignment)cAlternatives_0.eContents().get(0);
		private final RuleCall cSt1AssignmentParserRuleCall_0_0_0 = (RuleCall)cSt1Assignment_0_0.eContents().get(0);
		private final Assignment cSt2Assignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final RuleCall cSt2Object_statementParserRuleCall_0_1_0 = (RuleCall)cSt2Assignment_0_1.eContents().get(0);
		private final Assignment cSt3Assignment_0_2 = (Assignment)cAlternatives_0.eContents().get(2);
		private final RuleCall cSt3Flow_control_statementParserRuleCall_0_2_0 = (RuleCall)cSt3Assignment_0_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//statement:
		//	(st1=assignment | st2=object_statement | st3=flow_control_statement) ";";
		public ParserRule getRule() { return rule; }

		//(st1=assignment | st2=object_statement | st3=flow_control_statement) ";"
		public Group getGroup() { return cGroup; }

		//st1=assignment | st2=object_statement | st3=flow_control_statement
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//st1=assignment
		public Assignment getSt1Assignment_0_0() { return cSt1Assignment_0_0; }

		//assignment
		public RuleCall getSt1AssignmentParserRuleCall_0_0_0() { return cSt1AssignmentParserRuleCall_0_0_0; }

		//st2=object_statement
		public Assignment getSt2Assignment_0_1() { return cSt2Assignment_0_1; }

		//object_statement
		public RuleCall getSt2Object_statementParserRuleCall_0_1_0() { return cSt2Object_statementParserRuleCall_0_1_0; }

		//st3=flow_control_statement
		public Assignment getSt3Assignment_0_2() { return cSt3Assignment_0_2; }

		//flow_control_statement
		public RuleCall getSt3Flow_control_statementParserRuleCall_0_2_0() { return cSt3Flow_control_statementParserRuleCall_0_2_0; }

		//";"
		public Keyword getSemicolonKeyword_1() { return cSemicolonKeyword_1; }
	}

	public class Object_statementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "object_statement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cCreate_statementParserRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Action cTypeCreateAction_0_1 = (Action)cGroup_0.eContents().get(1);
		private final RuleCall cSelect_statementParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final RuleCall cRelate_statementParserRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final Action cTypeRelateAction_2_1 = (Action)cGroup_2.eContents().get(1);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final RuleCall cUnrelate_statementParserRuleCall_3_0 = (RuleCall)cGroup_3.eContents().get(0);
		private final Action cTypeRelateAction_3_1 = (Action)cGroup_3.eContents().get(1);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final RuleCall cDelete_statementParserRuleCall_4_0 = (RuleCall)cGroup_4.eContents().get(0);
		private final Action cTypeDeleteAction_4_1 = (Action)cGroup_4.eContents().get(1);
		
		//object_statement returns TypeObjectStatement:
		//	create_statement {TypeCreate} | select_statement | relate_statement {TypeRelate} | unrelate_statement {TypeRelate} |
		//	delete_statement {TypeDelete};
		public ParserRule getRule() { return rule; }

		//create_statement {TypeCreate} | select_statement | relate_statement {TypeRelate} | unrelate_statement {TypeRelate} |
		//delete_statement {TypeDelete}
		public Alternatives getAlternatives() { return cAlternatives; }

		//create_statement {TypeCreate}
		public Group getGroup_0() { return cGroup_0; }

		//create_statement
		public RuleCall getCreate_statementParserRuleCall_0_0() { return cCreate_statementParserRuleCall_0_0; }

		//{TypeCreate}
		public Action getTypeCreateAction_0_1() { return cTypeCreateAction_0_1; }

		//select_statement
		public RuleCall getSelect_statementParserRuleCall_1() { return cSelect_statementParserRuleCall_1; }

		//relate_statement {TypeRelate}
		public Group getGroup_2() { return cGroup_2; }

		//relate_statement
		public RuleCall getRelate_statementParserRuleCall_2_0() { return cRelate_statementParserRuleCall_2_0; }

		//{TypeRelate}
		public Action getTypeRelateAction_2_1() { return cTypeRelateAction_2_1; }

		//unrelate_statement {TypeRelate}
		public Group getGroup_3() { return cGroup_3; }

		//unrelate_statement
		public RuleCall getUnrelate_statementParserRuleCall_3_0() { return cUnrelate_statementParserRuleCall_3_0; }

		//{TypeRelate}
		public Action getTypeRelateAction_3_1() { return cTypeRelateAction_3_1; }

		//delete_statement {TypeDelete}
		public Group getGroup_4() { return cGroup_4; }

		//delete_statement
		public RuleCall getDelete_statementParserRuleCall_4_0() { return cDelete_statementParserRuleCall_4_0; }

		//{TypeDelete}
		public Action getTypeDeleteAction_4_1() { return cTypeDeleteAction_4_1; }
	}

	public class Create_statementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "create_statement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCreateKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cObjectKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cNameParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Keyword cOfKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final RuleCall cClass_nameParserRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		
		//create_statement:
		//	"create" "object" name? "of" class_name;
		public ParserRule getRule() { return rule; }

		//"create" "object" name? "of" class_name
		public Group getGroup() { return cGroup; }

		//"create"
		public Keyword getCreateKeyword_0() { return cCreateKeyword_0; }

		//"object"
		public Keyword getObjectKeyword_1() { return cObjectKeyword_1; }

		//name?
		public RuleCall getNameParserRuleCall_2() { return cNameParserRuleCall_2; }

		//"of"
		public Keyword getOfKeyword_3() { return cOfKeyword_3; }

		//class_name
		public RuleCall getClass_nameParserRuleCall_4() { return cClass_nameParserRuleCall_4; }
	}

	public class Select_statementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "select_statement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSelectKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cAnyKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cManyKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Keyword cOneKeyword_1_2 = (Keyword)cAlternatives_1.eContents().get(2);
		private final Assignment cVarAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cVarNameParserRuleCall_2_0 = (RuleCall)cVarAssignment_2.eContents().get(0);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cAlternatives_3.eContents().get(0);
		private final Keyword cFromKeyword_3_0_0 = (Keyword)cGroup_3_0.eContents().get(0);
		private final Keyword cInstancesKeyword_3_0_1 = (Keyword)cGroup_3_0.eContents().get(1);
		private final Keyword cOfKeyword_3_0_2 = (Keyword)cGroup_3_0.eContents().get(2);
		private final RuleCall cClass_nameParserRuleCall_3_0_3 = (RuleCall)cGroup_3_0.eContents().get(3);
		private final Group cGroup_3_0_4 = (Group)cGroup_3_0.eContents().get(4);
		private final Keyword cWhereKeyword_3_0_4_0 = (Keyword)cGroup_3_0_4.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_3_0_4_1 = (RuleCall)cGroup_3_0_4.eContents().get(1);
		private final Group cGroup_3_1 = (Group)cAlternatives_3.eContents().get(1);
		private final Keyword cRelatedKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Keyword cByKeyword_3_1_1 = (Keyword)cGroup_3_1.eContents().get(1);
		private final RuleCall cObject_referenceParserRuleCall_3_1_2 = (RuleCall)cGroup_3_1.eContents().get(2);
		private final Group cGroup_3_1_3 = (Group)cGroup_3_1.eContents().get(3);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_3_1_3_0 = (Keyword)cGroup_3_1_3.eContents().get(0);
		private final RuleCall cClass_nameParserRuleCall_3_1_3_1 = (RuleCall)cGroup_3_1_3.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_3_1_3_2 = (Keyword)cGroup_3_1_3.eContents().get(2);
		private final RuleCall cRelationParserRuleCall_3_1_3_3 = (RuleCall)cGroup_3_1_3.eContents().get(3);
		private final Keyword cRightSquareBracketKeyword_3_1_3_4 = (Keyword)cGroup_3_1_3.eContents().get(4);
		private final Group cGroup_3_1_4 = (Group)cGroup_3_1.eContents().get(4);
		private final Keyword cWhereKeyword_3_1_4_0 = (Keyword)cGroup_3_1_4.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_3_1_4_1 = (RuleCall)cGroup_3_1_4.eContents().get(1);
		
		//select_statement:
		//	"select" ("any" | "many" | "one") var=name ("from" "instances" "of" class_name ("where" expression)? | "related" "by"
		//	object_reference ("->" class_name "[" relation "]")+ ("where" expression)?);
		public ParserRule getRule() { return rule; }

		//"select" ("any" | "many" | "one") var=name ("from" "instances" "of" class_name ("where" expression)? | "related" "by"
		//object_reference ("->" class_name "[" relation "]")+ ("where" expression)?)
		public Group getGroup() { return cGroup; }

		//"select"
		public Keyword getSelectKeyword_0() { return cSelectKeyword_0; }

		//"any" | "many" | "one"
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//"any"
		public Keyword getAnyKeyword_1_0() { return cAnyKeyword_1_0; }

		//"many"
		public Keyword getManyKeyword_1_1() { return cManyKeyword_1_1; }

		//"one"
		public Keyword getOneKeyword_1_2() { return cOneKeyword_1_2; }

		//var=name
		public Assignment getVarAssignment_2() { return cVarAssignment_2; }

		//name
		public RuleCall getVarNameParserRuleCall_2_0() { return cVarNameParserRuleCall_2_0; }

		//"from" "instances" "of" class_name ("where" expression)? | "related" "by" object_reference ("->" class_name "[" relation
		//"]")+ ("where" expression)?
		public Alternatives getAlternatives_3() { return cAlternatives_3; }

		//"from" "instances" "of" class_name ("where" expression)?
		public Group getGroup_3_0() { return cGroup_3_0; }

		//"from"
		public Keyword getFromKeyword_3_0_0() { return cFromKeyword_3_0_0; }

		//"instances"
		public Keyword getInstancesKeyword_3_0_1() { return cInstancesKeyword_3_0_1; }

		//"of"
		public Keyword getOfKeyword_3_0_2() { return cOfKeyword_3_0_2; }

		//class_name
		public RuleCall getClass_nameParserRuleCall_3_0_3() { return cClass_nameParserRuleCall_3_0_3; }

		//("where" expression)?
		public Group getGroup_3_0_4() { return cGroup_3_0_4; }

		//"where"
		public Keyword getWhereKeyword_3_0_4_0() { return cWhereKeyword_3_0_4_0; }

		//expression
		public RuleCall getExpressionParserRuleCall_3_0_4_1() { return cExpressionParserRuleCall_3_0_4_1; }

		//"related" "by" object_reference ("->" class_name "[" relation "]")+ ("where" expression)?
		public Group getGroup_3_1() { return cGroup_3_1; }

		//"related"
		public Keyword getRelatedKeyword_3_1_0() { return cRelatedKeyword_3_1_0; }

		//"by"
		public Keyword getByKeyword_3_1_1() { return cByKeyword_3_1_1; }

		//object_reference
		public RuleCall getObject_referenceParserRuleCall_3_1_2() { return cObject_referenceParserRuleCall_3_1_2; }

		//("->" class_name "[" relation "]")+
		public Group getGroup_3_1_3() { return cGroup_3_1_3; }

		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_3_1_3_0() { return cHyphenMinusGreaterThanSignKeyword_3_1_3_0; }

		//class_name
		public RuleCall getClass_nameParserRuleCall_3_1_3_1() { return cClass_nameParserRuleCall_3_1_3_1; }

		//"["
		public Keyword getLeftSquareBracketKeyword_3_1_3_2() { return cLeftSquareBracketKeyword_3_1_3_2; }

		//relation
		public RuleCall getRelationParserRuleCall_3_1_3_3() { return cRelationParserRuleCall_3_1_3_3; }

		//"]"
		public Keyword getRightSquareBracketKeyword_3_1_3_4() { return cRightSquareBracketKeyword_3_1_3_4; }

		//("where" expression)?
		public Group getGroup_3_1_4() { return cGroup_3_1_4; }

		//"where"
		public Keyword getWhereKeyword_3_1_4_0() { return cWhereKeyword_3_1_4_0; }

		//expression
		public RuleCall getExpressionParserRuleCall_3_1_4_1() { return cExpressionParserRuleCall_3_1_4_1; }
	}

	public class Relate_statementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "relate_statement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRelateKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cObject_referenceParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cToKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cObject_referenceParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Keyword cAcrossKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final RuleCall cRelationParserRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		
		//relate_statement:
		//	"relate" object_reference "to" object_reference "across" relation;
		public ParserRule getRule() { return rule; }

		//"relate" object_reference "to" object_reference "across" relation
		public Group getGroup() { return cGroup; }

		//"relate"
		public Keyword getRelateKeyword_0() { return cRelateKeyword_0; }

		//object_reference
		public RuleCall getObject_referenceParserRuleCall_1() { return cObject_referenceParserRuleCall_1; }

		//"to"
		public Keyword getToKeyword_2() { return cToKeyword_2; }

		//object_reference
		public RuleCall getObject_referenceParserRuleCall_3() { return cObject_referenceParserRuleCall_3; }

		//"across"
		public Keyword getAcrossKeyword_4() { return cAcrossKeyword_4; }

		//relation
		public RuleCall getRelationParserRuleCall_5() { return cRelationParserRuleCall_5; }
	}

	public class Unrelate_statementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "unrelate_statement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cUnrelateKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cObject_referenceParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cFromKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cObject_referenceParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Keyword cAcrossKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final RuleCall cRelationParserRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		
		//unrelate_statement:
		//	"unrelate" object_reference "from" object_reference "across" relation;
		public ParserRule getRule() { return rule; }

		//"unrelate" object_reference "from" object_reference "across" relation
		public Group getGroup() { return cGroup; }

		//"unrelate"
		public Keyword getUnrelateKeyword_0() { return cUnrelateKeyword_0; }

		//object_reference
		public RuleCall getObject_referenceParserRuleCall_1() { return cObject_referenceParserRuleCall_1; }

		//"from"
		public Keyword getFromKeyword_2() { return cFromKeyword_2; }

		//object_reference
		public RuleCall getObject_referenceParserRuleCall_3() { return cObject_referenceParserRuleCall_3; }

		//"across"
		public Keyword getAcrossKeyword_4() { return cAcrossKeyword_4; }

		//relation
		public RuleCall getRelationParserRuleCall_5() { return cRelationParserRuleCall_5; }
	}

	public class Delete_statementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "delete_statement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDeleteKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cObjectKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cInstanceKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cObject_referenceParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//delete_statement:
		//	"delete" "object" "instance" object_reference;
		public ParserRule getRule() { return rule; }

		//"delete" "object" "instance" object_reference
		public Group getGroup() { return cGroup; }

		//"delete"
		public Keyword getDeleteKeyword_0() { return cDeleteKeyword_0; }

		//"object"
		public Keyword getObjectKeyword_1() { return cObjectKeyword_1; }

		//"instance"
		public Keyword getInstanceKeyword_2() { return cInstanceKeyword_2; }

		//object_reference
		public RuleCall getObject_referenceParserRuleCall_3() { return cObject_referenceParserRuleCall_3; }
	}

	public class Object_referenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "object_reference");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cSelfKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final RuleCall cNameParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//object_reference:
		//	"self" | name;
		public ParserRule getRule() { return rule; }

		//"self" | name
		public Alternatives getAlternatives() { return cAlternatives; }

		//"self"
		public Keyword getSelfKeyword_0() { return cSelfKeyword_0; }

		//name
		public RuleCall getNameParserRuleCall_1() { return cNameParserRuleCall_1; }
	}

	public class RelationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "relation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cRELATION_NAMETerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cSTRINGTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//relation:
		//	RELATION_NAME ("." STRING)?;
		public ParserRule getRule() { return rule; }

		//RELATION_NAME ("." STRING)?
		public Group getGroup() { return cGroup; }

		//RELATION_NAME
		public RuleCall getRELATION_NAMETerminalRuleCall_0() { return cRELATION_NAMETerminalRuleCall_0; }

		//("." STRING)?
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_1_1() { return cSTRINGTerminalRuleCall_1_1; }
	}

	public class AssignmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "assignment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAssignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cLvalueParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cEAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cEExpressionParserRuleCall_3_0 = (RuleCall)cEAssignment_3.eContents().get(0);
		
		//assignment:
		//	"assign"? lvalue "=" e=expression;
		public ParserRule getRule() { return rule; }

		//"assign"? lvalue "=" e=expression
		public Group getGroup() { return cGroup; }

		//"assign"?
		public Keyword getAssignKeyword_0() { return cAssignKeyword_0; }

		//lvalue
		public RuleCall getLvalueParserRuleCall_1() { return cLvalueParserRuleCall_1; }

		//"="
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }

		//e=expression
		public Assignment getEAssignment_3() { return cEAssignment_3; }

		//expression
		public RuleCall getEExpressionParserRuleCall_3_0() { return cEExpressionParserRuleCall_3_0; }
	}

	public class LvalueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "lvalue");
		private final RuleCall cVariableParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//// Saknas records
		//lvalue:
		//	variable;
		public ParserRule getRule() { return rule; }

		//variable
		public RuleCall getVariableParserRuleCall() { return cVariableParserRuleCall; }
	}

	public class Flow_control_statementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "flow_control_statement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cTypeStatementIfAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cIfKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cExprAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cExprExpressionParserRuleCall_0_2_0 = (RuleCall)cExprAssignment_0_2.eContents().get(0);
		private final Keyword cThenKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Assignment cSubstatementsAssignment_0_4 = (Assignment)cGroup_0.eContents().get(4);
		private final RuleCall cSubstatementsStatementParserRuleCall_0_4_0 = (RuleCall)cSubstatementsAssignment_0_4.eContents().get(0);
		private final Group cGroup_0_5 = (Group)cGroup_0.eContents().get(5);
		private final Keyword cElifKeyword_0_5_0 = (Keyword)cGroup_0_5.eContents().get(0);
		private final Assignment cElifexprAssignment_0_5_1 = (Assignment)cGroup_0_5.eContents().get(1);
		private final RuleCall cElifexprExpressionParserRuleCall_0_5_1_0 = (RuleCall)cElifexprAssignment_0_5_1.eContents().get(0);
		private final Keyword cThenKeyword_0_5_2 = (Keyword)cGroup_0_5.eContents().get(2);
		private final Assignment cSubstatementsAssignment_0_5_3 = (Assignment)cGroup_0_5.eContents().get(3);
		private final RuleCall cSubstatementsStatementParserRuleCall_0_5_3_0 = (RuleCall)cSubstatementsAssignment_0_5_3.eContents().get(0);
		private final Group cGroup_0_6 = (Group)cGroup_0.eContents().get(6);
		private final Keyword cElseKeyword_0_6_0 = (Keyword)cGroup_0_6.eContents().get(0);
		private final Assignment cSubstatementsAssignment_0_6_1 = (Assignment)cGroup_0_6.eContents().get(1);
		private final RuleCall cSubstatementsStatementParserRuleCall_0_6_1_0 = (RuleCall)cSubstatementsAssignment_0_6_1.eContents().get(0);
		private final Keyword cEndKeyword_0_7 = (Keyword)cGroup_0.eContents().get(7);
		private final Keyword cIfKeyword_0_8 = (Keyword)cGroup_0.eContents().get(8);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cTypeStatementForAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cForKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final RuleCall cLvalueParserRuleCall_1_2 = (RuleCall)cGroup_1.eContents().get(2);
		private final Keyword cOfKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Assignment cListAssignment_1_4 = (Assignment)cGroup_1.eContents().get(4);
		private final RuleCall cListNameParserRuleCall_1_4_0 = (RuleCall)cListAssignment_1_4.eContents().get(0);
		private final Keyword cDoKeyword_1_5 = (Keyword)cGroup_1.eContents().get(5);
		private final Assignment cSubstatementsAssignment_1_6 = (Assignment)cGroup_1.eContents().get(6);
		private final RuleCall cSubstatementsStatementParserRuleCall_1_6_0 = (RuleCall)cSubstatementsAssignment_1_6.eContents().get(0);
		private final Keyword cEndKeyword_1_7 = (Keyword)cGroup_1.eContents().get(7);
		private final Keyword cForKeyword_1_8 = (Keyword)cGroup_1.eContents().get(8);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cTypeStatementWhileAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Keyword cWhileKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cExprAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cExprExpressionParserRuleCall_2_2_0 = (RuleCall)cExprAssignment_2_2.eContents().get(0);
		private final Keyword cDoKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		private final Assignment cSubstatementsAssignment_2_4 = (Assignment)cGroup_2.eContents().get(4);
		private final RuleCall cSubstatementsStatementParserRuleCall_2_4_0 = (RuleCall)cSubstatementsAssignment_2_4.eContents().get(0);
		private final Keyword cEndKeyword_2_5 = (Keyword)cGroup_2.eContents().get(5);
		private final Keyword cWhileKeyword_2_6 = (Keyword)cGroup_2.eContents().get(6);
		
		//flow_control_statement returns TypeStatement:
		//	{TypeStatementIf} "if" expr=expression "then" substatements+=statement* ("elif" elifexpr+=expression "then"
		//	substatements+=statement*)* ("else" substatements+=statement*)? "end" "if" | {TypeStatementFor} "for" lvalue "of"
		//	list=name "do" substatements+=statement* "end" "for" | {TypeStatementWhile} "while" expr=expression "do"
		//	substatements+=statement* "end" "while";
		public ParserRule getRule() { return rule; }

		//{TypeStatementIf} "if" expr=expression "then" substatements+=statement* ("elif" elifexpr+=expression "then"
		//substatements+=statement*)* ("else" substatements+=statement*)? "end" "if" | {TypeStatementFor} "for" lvalue "of"
		//list=name "do" substatements+=statement* "end" "for" | {TypeStatementWhile} "while" expr=expression "do"
		//substatements+=statement* "end" "while"
		public Alternatives getAlternatives() { return cAlternatives; }

		//{TypeStatementIf} "if" expr=expression "then" substatements+=statement* ("elif" elifexpr+=expression "then"
		//substatements+=statement*)* ("else" substatements+=statement*)? "end" "if"
		public Group getGroup_0() { return cGroup_0; }

		//{TypeStatementIf}
		public Action getTypeStatementIfAction_0_0() { return cTypeStatementIfAction_0_0; }

		//"if"
		public Keyword getIfKeyword_0_1() { return cIfKeyword_0_1; }

		//expr=expression
		public Assignment getExprAssignment_0_2() { return cExprAssignment_0_2; }

		//expression
		public RuleCall getExprExpressionParserRuleCall_0_2_0() { return cExprExpressionParserRuleCall_0_2_0; }

		//"then"
		public Keyword getThenKeyword_0_3() { return cThenKeyword_0_3; }

		//substatements+=statement*
		public Assignment getSubstatementsAssignment_0_4() { return cSubstatementsAssignment_0_4; }

		//statement
		public RuleCall getSubstatementsStatementParserRuleCall_0_4_0() { return cSubstatementsStatementParserRuleCall_0_4_0; }

		//("elif" elifexpr+=expression "then" substatements+=statement*)*
		public Group getGroup_0_5() { return cGroup_0_5; }

		//"elif"
		public Keyword getElifKeyword_0_5_0() { return cElifKeyword_0_5_0; }

		//elifexpr+=expression
		public Assignment getElifexprAssignment_0_5_1() { return cElifexprAssignment_0_5_1; }

		//expression
		public RuleCall getElifexprExpressionParserRuleCall_0_5_1_0() { return cElifexprExpressionParserRuleCall_0_5_1_0; }

		//"then"
		public Keyword getThenKeyword_0_5_2() { return cThenKeyword_0_5_2; }

		//substatements+=statement*
		public Assignment getSubstatementsAssignment_0_5_3() { return cSubstatementsAssignment_0_5_3; }

		//statement
		public RuleCall getSubstatementsStatementParserRuleCall_0_5_3_0() { return cSubstatementsStatementParserRuleCall_0_5_3_0; }

		//("else" substatements+=statement*)?
		public Group getGroup_0_6() { return cGroup_0_6; }

		//"else"
		public Keyword getElseKeyword_0_6_0() { return cElseKeyword_0_6_0; }

		//substatements+=statement*
		public Assignment getSubstatementsAssignment_0_6_1() { return cSubstatementsAssignment_0_6_1; }

		//statement
		public RuleCall getSubstatementsStatementParserRuleCall_0_6_1_0() { return cSubstatementsStatementParserRuleCall_0_6_1_0; }

		//"end"
		public Keyword getEndKeyword_0_7() { return cEndKeyword_0_7; }

		//"if"
		public Keyword getIfKeyword_0_8() { return cIfKeyword_0_8; }

		//{TypeStatementFor} "for" lvalue "of" list=name "do" substatements+=statement* "end" "for"
		public Group getGroup_1() { return cGroup_1; }

		//{TypeStatementFor}
		public Action getTypeStatementForAction_1_0() { return cTypeStatementForAction_1_0; }

		//"for"
		public Keyword getForKeyword_1_1() { return cForKeyword_1_1; }

		//lvalue
		public RuleCall getLvalueParserRuleCall_1_2() { return cLvalueParserRuleCall_1_2; }

		//"of"
		public Keyword getOfKeyword_1_3() { return cOfKeyword_1_3; }

		//list=name
		public Assignment getListAssignment_1_4() { return cListAssignment_1_4; }

		//name
		public RuleCall getListNameParserRuleCall_1_4_0() { return cListNameParserRuleCall_1_4_0; }

		//"do"
		public Keyword getDoKeyword_1_5() { return cDoKeyword_1_5; }

		//substatements+=statement*
		public Assignment getSubstatementsAssignment_1_6() { return cSubstatementsAssignment_1_6; }

		//statement
		public RuleCall getSubstatementsStatementParserRuleCall_1_6_0() { return cSubstatementsStatementParserRuleCall_1_6_0; }

		//"end"
		public Keyword getEndKeyword_1_7() { return cEndKeyword_1_7; }

		//"for"
		public Keyword getForKeyword_1_8() { return cForKeyword_1_8; }

		//{TypeStatementWhile} "while" expr=expression "do" substatements+=statement* "end" "while"
		public Group getGroup_2() { return cGroup_2; }

		//{TypeStatementWhile}
		public Action getTypeStatementWhileAction_2_0() { return cTypeStatementWhileAction_2_0; }

		//"while"
		public Keyword getWhileKeyword_2_1() { return cWhileKeyword_2_1; }

		//expr=expression
		public Assignment getExprAssignment_2_2() { return cExprAssignment_2_2; }

		//expression
		public RuleCall getExprExpressionParserRuleCall_2_2_0() { return cExprExpressionParserRuleCall_2_2_0; }

		//"do"
		public Keyword getDoKeyword_2_3() { return cDoKeyword_2_3; }

		//substatements+=statement*
		public Assignment getSubstatementsAssignment_2_4() { return cSubstatementsAssignment_2_4; }

		//statement
		public RuleCall getSubstatementsStatementParserRuleCall_2_4_0() { return cSubstatementsStatementParserRuleCall_2_4_0; }

		//"end"
		public Keyword getEndKeyword_2_5() { return cEndKeyword_2_5; }

		//"while"
		public Keyword getWhileKeyword_2_6() { return cWhileKeyword_2_6; }
	}

	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "expression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cNotKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cNeAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cNeExpressionParserRuleCall_0_1_0 = (RuleCall)cNeAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cLsAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cLsExpr2ParserRuleCall_1_0_0 = (RuleCall)cLsAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Alternatives cAlternatives_1_1_0 = (Alternatives)cGroup_1_1.eContents().get(0);
		private final Keyword cEqualsSignEqualsSignKeyword_1_1_0_0 = (Keyword)cAlternatives_1_1_0.eContents().get(0);
		private final Keyword cLessThanSignGreaterThanSignKeyword_1_1_0_1 = (Keyword)cAlternatives_1_1_0.eContents().get(1);
		private final Keyword cLessThanSignKeyword_1_1_0_2 = (Keyword)cAlternatives_1_1_0.eContents().get(2);
		private final Keyword cGreaterThanSignKeyword_1_1_0_3 = (Keyword)cAlternatives_1_1_0.eContents().get(3);
		private final Keyword cGreaterThanSignEqualsSignKeyword_1_1_0_4 = (Keyword)cAlternatives_1_1_0.eContents().get(4);
		private final Keyword cLessThanSignEqualsSignKeyword_1_1_0_5 = (Keyword)cAlternatives_1_1_0.eContents().get(5);
		private final Assignment cRsAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cRsExpr2ParserRuleCall_1_1_1_0 = (RuleCall)cRsAssignment_1_1_1.eContents().get(0);
		
		//expression:
		//	"not" ne=expression | ls=expr2 (("==" | "<>" | "<" | ">" | ">=" | "<=") rs+=expr2)*;
		public ParserRule getRule() { return rule; }

		//"not" ne=expression | ls=expr2 (("==" | "<>" | "<" | ">" | ">=" | "<=") rs+=expr2)*
		public Alternatives getAlternatives() { return cAlternatives; }

		//"not" ne=expression
		public Group getGroup_0() { return cGroup_0; }

		//"not"
		public Keyword getNotKeyword_0_0() { return cNotKeyword_0_0; }

		//ne=expression
		public Assignment getNeAssignment_0_1() { return cNeAssignment_0_1; }

		//expression
		public RuleCall getNeExpressionParserRuleCall_0_1_0() { return cNeExpressionParserRuleCall_0_1_0; }

		//ls=expr2 (("==" | "<>" | "<" | ">" | ">=" | "<=") rs+=expr2)*
		public Group getGroup_1() { return cGroup_1; }

		//ls=expr2
		public Assignment getLsAssignment_1_0() { return cLsAssignment_1_0; }

		//expr2
		public RuleCall getLsExpr2ParserRuleCall_1_0_0() { return cLsExpr2ParserRuleCall_1_0_0; }

		//(("==" | "<>" | "<" | ">" | ">=" | "<=") rs+=expr2)*
		public Group getGroup_1_1() { return cGroup_1_1; }

		//"==" | "<>" | "<" | ">" | ">=" | "<="
		public Alternatives getAlternatives_1_1_0() { return cAlternatives_1_1_0; }

		//"=="
		public Keyword getEqualsSignEqualsSignKeyword_1_1_0_0() { return cEqualsSignEqualsSignKeyword_1_1_0_0; }

		//"<>"
		public Keyword getLessThanSignGreaterThanSignKeyword_1_1_0_1() { return cLessThanSignGreaterThanSignKeyword_1_1_0_1; }

		//"<"
		public Keyword getLessThanSignKeyword_1_1_0_2() { return cLessThanSignKeyword_1_1_0_2; }

		//">"
		public Keyword getGreaterThanSignKeyword_1_1_0_3() { return cGreaterThanSignKeyword_1_1_0_3; }

		//">="
		public Keyword getGreaterThanSignEqualsSignKeyword_1_1_0_4() { return cGreaterThanSignEqualsSignKeyword_1_1_0_4; }

		//"<="
		public Keyword getLessThanSignEqualsSignKeyword_1_1_0_5() { return cLessThanSignEqualsSignKeyword_1_1_0_5; }

		//rs+=expr2
		public Assignment getRsAssignment_1_1_1() { return cRsAssignment_1_1_1; }

		//expr2
		public RuleCall getRsExpr2ParserRuleCall_1_1_1_0() { return cRsExpr2ParserRuleCall_1_1_1_0; }
	}

	public class Expr2Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "expr2");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Alternatives cAlternatives_0_0 = (Alternatives)cGroup_0.eContents().get(0);
		private final Keyword cEmptyKeyword_0_0_0 = (Keyword)cAlternatives_0_0.eContents().get(0);
		private final Keyword cNot_emptyKeyword_0_0_1 = (Keyword)cAlternatives_0_0.eContents().get(1);
		private final Assignment cNAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cNNameParserRuleCall_0_1_0 = (RuleCall)cNAssignment_0_1.eContents().get(0);
		private final Assignment cSAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cSSumParserRuleCall_1_0 = (RuleCall)cSAssignment_1.eContents().get(0);
		
		//expr2:
		//	("empty" | "not_empty") n=name | s=sum;
		public ParserRule getRule() { return rule; }

		//("empty" | "not_empty") n=name | s=sum
		public Alternatives getAlternatives() { return cAlternatives; }

		//("empty" | "not_empty") n=name
		public Group getGroup_0() { return cGroup_0; }

		//"empty" | "not_empty"
		public Alternatives getAlternatives_0_0() { return cAlternatives_0_0; }

		//"empty"
		public Keyword getEmptyKeyword_0_0_0() { return cEmptyKeyword_0_0_0; }

		//"not_empty"
		public Keyword getNot_emptyKeyword_0_0_1() { return cNot_emptyKeyword_0_0_1; }

		//n=name
		public Assignment getNAssignment_0_1() { return cNAssignment_0_1; }

		//name
		public RuleCall getNNameParserRuleCall_0_1_0() { return cNNameParserRuleCall_0_1_0; }

		//s=sum
		public Assignment getSAssignment_1() { return cSAssignment_1; }

		//sum
		public RuleCall getSSumParserRuleCall_1_0() { return cSSumParserRuleCall_1_0; }
	}

	public class SumElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sum");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLtAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLtProductParserRuleCall_0_0 = (RuleCall)cLtAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Keyword cPlusSignKeyword_1_0_0 = (Keyword)cAlternatives_1_0.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1_0_1 = (Keyword)cAlternatives_1_0.eContents().get(1);
		private final Assignment cRtAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRtProductParserRuleCall_1_1_0 = (RuleCall)cRtAssignment_1_1.eContents().get(0);
		
		//sum:
		//	lt=product (("+" | "-") rt+=product)*;
		public ParserRule getRule() { return rule; }

		//lt=product (("+" | "-") rt+=product)*
		public Group getGroup() { return cGroup; }

		//lt=product
		public Assignment getLtAssignment_0() { return cLtAssignment_0; }

		//product
		public RuleCall getLtProductParserRuleCall_0_0() { return cLtProductParserRuleCall_0_0; }

		//(("+" | "-") rt+=product)*
		public Group getGroup_1() { return cGroup_1; }

		//"+" | "-"
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }

		//"+"
		public Keyword getPlusSignKeyword_1_0_0() { return cPlusSignKeyword_1_0_0; }

		//"-"
		public Keyword getHyphenMinusKeyword_1_0_1() { return cHyphenMinusKeyword_1_0_1; }

		//rt+=product
		public Assignment getRtAssignment_1_1() { return cRtAssignment_1_1; }

		//product
		public RuleCall getRtProductParserRuleCall_1_1_0() { return cRtProductParserRuleCall_1_1_0; }
	}

	public class ProductElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "product");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLfAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLfValueParserRuleCall_0_0 = (RuleCall)cLfAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Keyword cAsteriskKeyword_1_0_0 = (Keyword)cAlternatives_1_0.eContents().get(0);
		private final Keyword cSolidusKeyword_1_0_1 = (Keyword)cAlternatives_1_0.eContents().get(1);
		private final Keyword cPercentSignKeyword_1_0_2 = (Keyword)cAlternatives_1_0.eContents().get(2);
		private final Assignment cRfAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRfValueParserRuleCall_1_1_0 = (RuleCall)cRfAssignment_1_1.eContents().get(0);
		
		//product:
		//	lf=value (("*" | "/" | "%") rf+=value)*;
		public ParserRule getRule() { return rule; }

		//lf=value (("*" | "/" | "%") rf+=value)*
		public Group getGroup() { return cGroup; }

		//lf=value
		public Assignment getLfAssignment_0() { return cLfAssignment_0; }

		//value
		public RuleCall getLfValueParserRuleCall_0_0() { return cLfValueParserRuleCall_0_0; }

		//(("*" | "/" | "%") rf+=value)*
		public Group getGroup_1() { return cGroup_1; }

		//"*" | "/" | "%"
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }

		//"*"
		public Keyword getAsteriskKeyword_1_0_0() { return cAsteriskKeyword_1_0_0; }

		//"/"
		public Keyword getSolidusKeyword_1_0_1() { return cSolidusKeyword_1_0_1; }

		//"%"
		public Keyword getPercentSignKeyword_1_0_2() { return cPercentSignKeyword_1_0_2; }

		//rf+=value
		public Assignment getRfAssignment_1_1() { return cRfAssignment_1_1; }

		//value
		public RuleCall getRfValueParserRuleCall_1_1_0() { return cRfValueParserRuleCall_1_1_0; }
	}

	public class ValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "value");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cVariableParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Action cTypeValueVariableAction_1_1 = (Action)cGroup_1.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cTrueKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Action cTypeConstantAction_2_1 = (Action)cGroup_2.eContents().get(1);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Keyword cFalseKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Action cTypeConstantAction_3_1 = (Action)cGroup_3.eContents().get(1);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final RuleCall cINTTerminalRuleCall_4_0 = (RuleCall)cGroup_4.eContents().get(0);
		private final Action cTypeConstantAction_4_1 = (Action)cGroup_4.eContents().get(1);
		
		//value returns TypeValue:
		//	"(" expression ")" | variable {TypeValueVariable} | "true" {TypeConstant} | "false" {TypeConstant} | INT
		//	{TypeConstant};
		public ParserRule getRule() { return rule; }

		//"(" expression ")" | variable {TypeValueVariable} | "true" {TypeConstant} | "false" {TypeConstant} | INT {TypeConstant}
		public Alternatives getAlternatives() { return cAlternatives; }

		//"(" expression ")"
		public Group getGroup_0() { return cGroup_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_0_0() { return cLeftParenthesisKeyword_0_0; }

		//expression
		public RuleCall getExpressionParserRuleCall_0_1() { return cExpressionParserRuleCall_0_1; }

		//")"
		public Keyword getRightParenthesisKeyword_0_2() { return cRightParenthesisKeyword_0_2; }

		//variable {TypeValueVariable}
		public Group getGroup_1() { return cGroup_1; }

		//variable
		public RuleCall getVariableParserRuleCall_1_0() { return cVariableParserRuleCall_1_0; }

		//{TypeValueVariable}
		public Action getTypeValueVariableAction_1_1() { return cTypeValueVariableAction_1_1; }

		//"true" {TypeConstant}
		public Group getGroup_2() { return cGroup_2; }

		//"true"
		public Keyword getTrueKeyword_2_0() { return cTrueKeyword_2_0; }

		//{TypeConstant}
		public Action getTypeConstantAction_2_1() { return cTypeConstantAction_2_1; }

		//"false" {TypeConstant}
		public Group getGroup_3() { return cGroup_3; }

		//"false"
		public Keyword getFalseKeyword_3_0() { return cFalseKeyword_3_0; }

		//{TypeConstant}
		public Action getTypeConstantAction_3_1() { return cTypeConstantAction_3_1; }

		//INT {TypeConstant}
		public Group getGroup_4() { return cGroup_4; }

		//INT
		public RuleCall getINTTerminalRuleCall_4_0() { return cINTTerminalRuleCall_4_0; }

		//{TypeConstant}
		public Action getTypeConstantAction_4_1() { return cTypeConstantAction_4_1; }
	}

	public class VariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "variable");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNameParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cObject_referenceParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Keyword cFullStopKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_1_2 = (RuleCall)cGroup_1.eContents().get(2);
		
		//variable:
		//	name | object_reference "." ID;
		public ParserRule getRule() { return rule; }

		//name | object_reference "." ID
		public Alternatives getAlternatives() { return cAlternatives; }

		//name
		public RuleCall getNameParserRuleCall_0() { return cNameParserRuleCall_0; }

		//object_reference "." ID
		public Group getGroup_1() { return cGroup_1; }

		//object_reference
		public RuleCall getObject_referenceParserRuleCall_1_0() { return cObject_referenceParserRuleCall_1_0; }

		//"."
		public Keyword getFullStopKeyword_1_1() { return cFullStopKeyword_1_1; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_2() { return cIDTerminalRuleCall_1_2; }
	}

	public class Class_nameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "class_name");
		private final RuleCall cNameParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//class_name:
		//	name;
		public ParserRule getRule() { return rule; }

		//name
		public RuleCall getNameParserRuleCall() { return cNameParserRuleCall; }
	}

	public class NameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "name");
		private final RuleCall cIDTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//name:
		//	ID;
		public ParserRule getRule() { return rule; }

		//ID
		public RuleCall getIDTerminalRuleCall() { return cIDTerminalRuleCall; }
	}
	
	
	private CodeElements pCode;
	private StatementElements pStatement;
	private Object_statementElements pObject_statement;
	private Create_statementElements pCreate_statement;
	private Select_statementElements pSelect_statement;
	private Relate_statementElements pRelate_statement;
	private Unrelate_statementElements pUnrelate_statement;
	private Delete_statementElements pDelete_statement;
	private Object_referenceElements pObject_reference;
	private RelationElements pRelation;
	private AssignmentElements pAssignment;
	private LvalueElements pLvalue;
	private Flow_control_statementElements pFlow_control_statement;
	private ExpressionElements pExpression;
	private Expr2Elements pExpr2;
	private SumElements pSum;
	private ProductElements pProduct;
	private ValueElements pValue;
	private VariableElements pVariable;
	private Class_nameElements pClass_name;
	private NameElements pName;
	private TerminalRule tRELATION_NAME;
	
	private final GrammarProvider grammarProvider;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public OALGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammarProvider = grammarProvider;
		this.gaTerminals = gaTerminals;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Code:
	//	statements+=statement*;
	public CodeElements getCodeAccess() {
		return (pCode != null) ? pCode : (pCode = new CodeElements());
	}
	
	public ParserRule getCodeRule() {
		return getCodeAccess().getRule();
	}

	//statement:
	//	(st1=assignment | st2=object_statement | st3=flow_control_statement) ";";
	public StatementElements getStatementAccess() {
		return (pStatement != null) ? pStatement : (pStatement = new StatementElements());
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}

	//object_statement returns TypeObjectStatement:
	//	create_statement {TypeCreate} | select_statement | relate_statement {TypeRelate} | unrelate_statement {TypeRelate} |
	//	delete_statement {TypeDelete};
	public Object_statementElements getObject_statementAccess() {
		return (pObject_statement != null) ? pObject_statement : (pObject_statement = new Object_statementElements());
	}
	
	public ParserRule getObject_statementRule() {
		return getObject_statementAccess().getRule();
	}

	//create_statement:
	//	"create" "object" name? "of" class_name;
	public Create_statementElements getCreate_statementAccess() {
		return (pCreate_statement != null) ? pCreate_statement : (pCreate_statement = new Create_statementElements());
	}
	
	public ParserRule getCreate_statementRule() {
		return getCreate_statementAccess().getRule();
	}

	//select_statement:
	//	"select" ("any" | "many" | "one") var=name ("from" "instances" "of" class_name ("where" expression)? | "related" "by"
	//	object_reference ("->" class_name "[" relation "]")+ ("where" expression)?);
	public Select_statementElements getSelect_statementAccess() {
		return (pSelect_statement != null) ? pSelect_statement : (pSelect_statement = new Select_statementElements());
	}
	
	public ParserRule getSelect_statementRule() {
		return getSelect_statementAccess().getRule();
	}

	//relate_statement:
	//	"relate" object_reference "to" object_reference "across" relation;
	public Relate_statementElements getRelate_statementAccess() {
		return (pRelate_statement != null) ? pRelate_statement : (pRelate_statement = new Relate_statementElements());
	}
	
	public ParserRule getRelate_statementRule() {
		return getRelate_statementAccess().getRule();
	}

	//unrelate_statement:
	//	"unrelate" object_reference "from" object_reference "across" relation;
	public Unrelate_statementElements getUnrelate_statementAccess() {
		return (pUnrelate_statement != null) ? pUnrelate_statement : (pUnrelate_statement = new Unrelate_statementElements());
	}
	
	public ParserRule getUnrelate_statementRule() {
		return getUnrelate_statementAccess().getRule();
	}

	//delete_statement:
	//	"delete" "object" "instance" object_reference;
	public Delete_statementElements getDelete_statementAccess() {
		return (pDelete_statement != null) ? pDelete_statement : (pDelete_statement = new Delete_statementElements());
	}
	
	public ParserRule getDelete_statementRule() {
		return getDelete_statementAccess().getRule();
	}

	//object_reference:
	//	"self" | name;
	public Object_referenceElements getObject_referenceAccess() {
		return (pObject_reference != null) ? pObject_reference : (pObject_reference = new Object_referenceElements());
	}
	
	public ParserRule getObject_referenceRule() {
		return getObject_referenceAccess().getRule();
	}

	//relation:
	//	RELATION_NAME ("." STRING)?;
	public RelationElements getRelationAccess() {
		return (pRelation != null) ? pRelation : (pRelation = new RelationElements());
	}
	
	public ParserRule getRelationRule() {
		return getRelationAccess().getRule();
	}

	//assignment:
	//	"assign"? lvalue "=" e=expression;
	public AssignmentElements getAssignmentAccess() {
		return (pAssignment != null) ? pAssignment : (pAssignment = new AssignmentElements());
	}
	
	public ParserRule getAssignmentRule() {
		return getAssignmentAccess().getRule();
	}

	//// Saknas records
	//lvalue:
	//	variable;
	public LvalueElements getLvalueAccess() {
		return (pLvalue != null) ? pLvalue : (pLvalue = new LvalueElements());
	}
	
	public ParserRule getLvalueRule() {
		return getLvalueAccess().getRule();
	}

	//flow_control_statement returns TypeStatement:
	//	{TypeStatementIf} "if" expr=expression "then" substatements+=statement* ("elif" elifexpr+=expression "then"
	//	substatements+=statement*)* ("else" substatements+=statement*)? "end" "if" | {TypeStatementFor} "for" lvalue "of"
	//	list=name "do" substatements+=statement* "end" "for" | {TypeStatementWhile} "while" expr=expression "do"
	//	substatements+=statement* "end" "while";
	public Flow_control_statementElements getFlow_control_statementAccess() {
		return (pFlow_control_statement != null) ? pFlow_control_statement : (pFlow_control_statement = new Flow_control_statementElements());
	}
	
	public ParserRule getFlow_control_statementRule() {
		return getFlow_control_statementAccess().getRule();
	}

	//expression:
	//	"not" ne=expression | ls=expr2 (("==" | "<>" | "<" | ">" | ">=" | "<=") rs+=expr2)*;
	public ExpressionElements getExpressionAccess() {
		return (pExpression != null) ? pExpression : (pExpression = new ExpressionElements());
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}

	//expr2:
	//	("empty" | "not_empty") n=name | s=sum;
	public Expr2Elements getExpr2Access() {
		return (pExpr2 != null) ? pExpr2 : (pExpr2 = new Expr2Elements());
	}
	
	public ParserRule getExpr2Rule() {
		return getExpr2Access().getRule();
	}

	//sum:
	//	lt=product (("+" | "-") rt+=product)*;
	public SumElements getSumAccess() {
		return (pSum != null) ? pSum : (pSum = new SumElements());
	}
	
	public ParserRule getSumRule() {
		return getSumAccess().getRule();
	}

	//product:
	//	lf=value (("*" | "/" | "%") rf+=value)*;
	public ProductElements getProductAccess() {
		return (pProduct != null) ? pProduct : (pProduct = new ProductElements());
	}
	
	public ParserRule getProductRule() {
		return getProductAccess().getRule();
	}

	//value returns TypeValue:
	//	"(" expression ")" | variable {TypeValueVariable} | "true" {TypeConstant} | "false" {TypeConstant} | INT
	//	{TypeConstant};
	public ValueElements getValueAccess() {
		return (pValue != null) ? pValue : (pValue = new ValueElements());
	}
	
	public ParserRule getValueRule() {
		return getValueAccess().getRule();
	}

	//variable:
	//	name | object_reference "." ID;
	public VariableElements getVariableAccess() {
		return (pVariable != null) ? pVariable : (pVariable = new VariableElements());
	}
	
	public ParserRule getVariableRule() {
		return getVariableAccess().getRule();
	}

	//class_name:
	//	name;
	public Class_nameElements getClass_nameAccess() {
		return (pClass_name != null) ? pClass_name : (pClass_name = new Class_nameElements());
	}
	
	public ParserRule getClass_nameRule() {
		return getClass_nameAccess().getRule();
	}

	//name:
	//	ID;
	public NameElements getNameAccess() {
		return (pName != null) ? pName : (pName = new NameElements());
	}
	
	public ParserRule getNameRule() {
		return getNameAccess().getRule();
	}

	//terminal RELATION_NAME:
	//	"R" "0".."9"+;
	public TerminalRule getRELATION_NAMERule() {
		return (tRELATION_NAME != null) ? tRELATION_NAME : (tRELATION_NAME = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "RELATION_NAME"));
	} 

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
